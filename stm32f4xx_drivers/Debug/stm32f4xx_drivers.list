
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080023cc  080023cc  000123cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c4  080024c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080024c4  080024c4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024c4  080024c4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024c4  080024c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080024cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000090  0800255c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800255c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dae  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000055a  00000000  00000000  00021e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000170  00000000  00000000  000223c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  00022538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000022c2  00000000  00000000  00022670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013f1  00000000  00000000  00024932  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000098d7  00000000  00000000  00025d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f5fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001020  00000000  00000000  0002f678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080023b4 	.word	0x080023b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	080023b4 	.word	0x080023b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <delay>:

//rcv buffer of 32 bytes
uint8_t rcv_buff[32];

void delay(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000/2 ; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <delay+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	0003d08f 	.word	0x0003d08f

080002ec <I2C1_GPIO_Init>:

void I2C1_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <I2C1_GPIO_Init+0x40>)
 80002f4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 80002f6:	2302      	movs	r3, #2
 80002f8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode= 4;
 80002fa:	2304      	movs	r3, #4
 80002fc:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 80002fe:	2301      	movs	r3, #1
 8000300:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PU;
 8000302:	2301      	movs	r3, #1
 8000304:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000306:	2302      	movs	r3, #2
 8000308:	72bb      	strb	r3, [r7, #10]
	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber= 8;
 800030a:	2308      	movs	r3, #8
 800030c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fc53 	bl	8000bbc <GPIO_Init>
	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber= 9;
 8000316:	2309      	movs	r3, #9
 8000318:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fc4d 	bl	8000bbc <GPIO_Init>


}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40020400 	.word	0x40020400

08000330 <I2C1_Init>:

//init i2c1 peripheral
void I2C1_Init(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <I2C1_Init+0x2c>)
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <I2C1_Init+0x30>)
 8000338:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <I2C1_Init+0x2c>)
 800033c:	2201      	movs	r2, #1
 800033e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <I2C1_Init+0x2c>)
 8000342:	2261      	movs	r2, #97	; 0x61
 8000344:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <I2C1_Init+0x2c>)
 8000348:	2200      	movs	r2, #0
 800034a:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <I2C1_Init+0x2c>)
 800034e:	4a05      	ldr	r2, [pc, #20]	; (8000364 <I2C1_Init+0x34>)
 8000350:	605a      	str	r2, [r3, #4]


	I2C_Init(&I2C1Handle);
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <I2C1_Init+0x2c>)
 8000354:	f000 f978 	bl	8000648 <I2C_Init>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000164 	.word	0x20000164
 8000360:	40005400 	.word	0x40005400
 8000364:	000186a0 	.word	0x000186a0

08000368 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//button configuration
	GpioBtn.pGPIOx =GPIOC;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <GPIO_ButtonInit+0x2c>)
 8000370:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 8000372:	230d      	movs	r3, #13
 8000374:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IN;
 8000376:	2300      	movs	r3, #0
 8000378:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800037a:	2302      	movs	r3, #2
 800037c:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800037e:	2300      	movs	r3, #0
 8000380:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fc19 	bl	8000bbc <GPIO_Init>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40020800 	.word	0x40020800

08000398 <main>:

int main(void){
 8000398:	b5b0      	push	{r4, r5, r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af02      	add	r7, sp, #8

	uint8_t commandcode;
	uint8_t length;

	//semihosting to print to console
	initialise_monitor_handles();
 800039e:	f001 ff89 	bl	80022b4 <initialise_monitor_handles>

	printf("Application is runnint\n");
 80003a2:	4829      	ldr	r0, [pc, #164]	; (8000448 <main+0xb0>)
 80003a4:	f000 fe60 	bl	8001068 <puts>
	//init user button on stm board
	GPIO_ButtonInit();
 80003a8:	f7ff ffde 	bl	8000368 <GPIO_ButtonInit>

	I2C1_GPIO_Init();
 80003ac:	f7ff ff9e 	bl	80002ec <I2C1_GPIO_Init>
	I2C1_Init();
 80003b0:	f7ff ffbe 	bl	8000330 <I2C1_Init>
	//enable I2C1 peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80003b4:	2101      	movs	r1, #1
 80003b6:	4825      	ldr	r0, [pc, #148]	; (800044c <main+0xb4>)
 80003b8:	f000 f92a 	bl	8000610 <I2C_PeripheralControl>

	//send some data on button press (slave address is 0x68 set by arduino)
	uint8_t some_data[]=  "We are testing I1c master Tx\n";
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <main+0xb8>)
 80003be:	463c      	mov	r4, r7
 80003c0:	461d      	mov	r5, r3
 80003c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003ca:	c407      	stmia	r4!, {r0, r1, r2}
 80003cc:	8023      	strh	r3, [r4, #0]
	(void)some_data;

	while (1)
	{
		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 80003ce:	bf00      	nop
 80003d0:	210d      	movs	r1, #13
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <main+0xbc>)
 80003d4:	f000 fd92 	bl	8000efc <GPIO_ReadFromInputPin>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d0f8      	beq.n	80003d0 <main+0x38>
		delay();//debounce prevention
 80003de:	f7ff ff6f 	bl	80002c0 <delay>


		// 1. send command to request length of data to be read from slave
		commandcode = 0x51;
 80003e2:	2351      	movs	r3, #81	; 0x51
 80003e4:	77fb      	strb	r3, [r7, #31]
		I2CMasterSendData(&I2C1Handle, &commandcode, 1, 0x68, ENABLE);
 80003e6:	f107 011f 	add.w	r1, r7, #31
 80003ea:	2301      	movs	r3, #1
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2368      	movs	r3, #104	; 0x68
 80003f0:	2201      	movs	r2, #1
 80003f2:	4819      	ldr	r0, [pc, #100]	; (8000458 <main+0xc0>)
 80003f4:	f000 f9f4 	bl	80007e0 <I2CMasterSendData>
		// 2. Read response of length command from slave
		I2CMasterRcvData(&I2C1Handle, &length, 1, 0x68,  ENABLE);
 80003f8:	f107 011e 	add.w	r1, r7, #30
 80003fc:	2301      	movs	r3, #1
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2368      	movs	r3, #104	; 0x68
 8000402:	2201      	movs	r2, #1
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <main+0xc0>)
 8000406:	f000 fa5e 	bl	80008c6 <I2CMasterRcvData>
		// 3. Begin command to read 'length' bytes of data
		commandcode = 0x52;
 800040a:	2352      	movs	r3, #82	; 0x52
 800040c:	77fb      	strb	r3, [r7, #31]
		I2CMasterSendData(&I2C1Handle, &commandcode, 1, 0x68, ENABLE);
 800040e:	f107 011f 	add.w	r1, r7, #31
 8000412:	2301      	movs	r3, #1
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2368      	movs	r3, #104	; 0x68
 8000418:	2201      	movs	r2, #1
 800041a:	480f      	ldr	r0, [pc, #60]	; (8000458 <main+0xc0>)
 800041c:	f000 f9e0 	bl	80007e0 <I2CMasterSendData>
		I2CMasterRcvData(&I2C1Handle, rcv_buff, length, 0x68, DISABLE);
 8000420:	7fbb      	ldrb	r3, [r7, #30]
 8000422:	461a      	mov	r2, r3
 8000424:	2300      	movs	r3, #0
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2368      	movs	r3, #104	; 0x68
 800042a:	490c      	ldr	r1, [pc, #48]	; (800045c <main+0xc4>)
 800042c:	480a      	ldr	r0, [pc, #40]	; (8000458 <main+0xc0>)
 800042e:	f000 fa4a 	bl	80008c6 <I2CMasterRcvData>

		rcv_buff[length+1] = '\0';
 8000432:	7fbb      	ldrb	r3, [r7, #30]
 8000434:	3301      	adds	r3, #1
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <main+0xc4>)
 8000438:	2100      	movs	r1, #0
 800043a:	54d1      	strb	r1, [r2, r3]

		//print data to console using semihosting
		//can also see data using logic analyzer
		printf("Data : %s", rcv_buff);
 800043c:	4907      	ldr	r1, [pc, #28]	; (800045c <main+0xc4>)
 800043e:	4808      	ldr	r0, [pc, #32]	; (8000460 <main+0xc8>)
 8000440:	f000 fd9e 	bl	8000f80 <iprintf>
		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 8000444:	e7c3      	b.n	80003ce <main+0x36>
 8000446:	bf00      	nop
 8000448:	080023cc 	.word	0x080023cc
 800044c:	40005400 	.word	0x40005400
 8000450:	080023f0 	.word	0x080023f0
 8000454:	40020800 	.word	0x40020800
 8000458:	20000164 	.word	0x20000164
 800045c:	2000018c 	.word	0x2000018c
 8000460:	080023e4 	.word	0x080023e4

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000468:	480d      	ldr	r0, [pc, #52]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046a:	490e      	ldr	r1, [pc, #56]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000470:	e002      	b.n	8000478 <LoopCopyDataInit>

08000472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000476:	3304      	adds	r3, #4

08000478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800047c:	d3f9      	bcc.n	8000472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000480:	4c0b      	ldr	r4, [pc, #44]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000484:	e001      	b.n	800048a <LoopFillZerobss>

08000486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000488:	3204      	adds	r2, #4

0800048a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800048c:	d3fb      	bcc.n	8000486 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800048e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 fd49 	bl	8000f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff ff7f 	bl	8000398 <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80004a8:	080024cc 	.word	0x080024cc
  ldr r2, =_sbss
 80004ac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80004b0:	200001b0 	.word	0x200001b0

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <RCC_GETPCLK1Value>:

	}
}

uint32_t RCC_GETPCLK1Value(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
	uint32_t pclk1, systemclk;
	uint8_t clksrc, temp, ahbpresc,apb1presc;
	//determine clock source by reading RCC registers
	clksrc = ((RCC->CFGR >>2) & 0x3);
 80004be:	4b23      	ldr	r3, [pc, #140]	; (800054c <RCC_GETPCLK1Value+0x94>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f003 0303 	and.w	r3, r3, #3
 80004ca:	727b      	strb	r3, [r7, #9]
	if (clksrc ==0 )
 80004cc:	7a7b      	ldrb	r3, [r7, #9]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <RCC_GETPCLK1Value+0x20>
	{
		//HSI clock source 16 MHz
		systemclk =  16000000;
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <RCC_GETPCLK1Value+0x98>)
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	e004      	b.n	80004e2 <RCC_GETPCLK1Value+0x2a>
	}
	else if (clksrc ==1 )
 80004d8:	7a7b      	ldrb	r3, [r7, #9]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d101      	bne.n	80004e2 <RCC_GETPCLK1Value+0x2a>
	{
		//HSE clock source (8 MHz for discovery board)
		systemclk =  8000000;
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <RCC_GETPCLK1Value+0x9c>)
 80004e0:	60fb      	str	r3, [r7, #12]
	}
	//get AHB prescaler value
	temp =  ((RCC->CFGR >>4) & 0xF);
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <RCC_GETPCLK1Value+0x94>)
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	091b      	lsrs	r3, r3, #4
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 030f 	and.w	r3, r3, #15
 80004ee:	723b      	strb	r3, [r7, #8]
	if (temp<8)
 80004f0:	7a3b      	ldrb	r3, [r7, #8]
 80004f2:	2b07      	cmp	r3, #7
 80004f4:	d802      	bhi.n	80004fc <RCC_GETPCLK1Value+0x44>
	{
		ahbpresc = 1;
 80004f6:	2301      	movs	r3, #1
 80004f8:	72fb      	strb	r3, [r7, #11]
 80004fa:	e005      	b.n	8000508 <RCC_GETPCLK1Value+0x50>
	}
	else
	{
		ahbpresc = AHB_Prescaler[temp-8];
 80004fc:	7a3b      	ldrb	r3, [r7, #8]
 80004fe:	3b08      	subs	r3, #8
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <RCC_GETPCLK1Value+0xa0>)
 8000502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000506:	72fb      	strb	r3, [r7, #11]
	}
	//get APB1 prescaler
	temp =  ((RCC->CFGR >>10) & 0x7);
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <RCC_GETPCLK1Value+0x94>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	0a9b      	lsrs	r3, r3, #10
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	723b      	strb	r3, [r7, #8]
	if (temp<7)
 8000516:	7a3b      	ldrb	r3, [r7, #8]
 8000518:	2b06      	cmp	r3, #6
 800051a:	d802      	bhi.n	8000522 <RCC_GETPCLK1Value+0x6a>
	{
		apb1presc = 1;
 800051c:	2301      	movs	r3, #1
 800051e:	72bb      	strb	r3, [r7, #10]
 8000520:	e005      	b.n	800052e <RCC_GETPCLK1Value+0x76>
	}
	else
	{
		apb1presc = APB1_Prescaler[temp-4];
 8000522:	7a3b      	ldrb	r3, [r7, #8]
 8000524:	3b04      	subs	r3, #4
 8000526:	4a0d      	ldr	r2, [pc, #52]	; (800055c <RCC_GETPCLK1Value+0xa4>)
 8000528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052c:	72bb      	strb	r3, [r7, #10]
	}
	//calculate peripheral clock 1 frequency
	pclk1 = (systemclk/ahbpresc)/apb1presc;
 800052e:	7afb      	ldrb	r3, [r7, #11]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	fbb2 f2f3 	udiv	r2, r2, r3
 8000536:	7abb      	ldrb	r3, [r7, #10]
 8000538:	fbb2 f3f3 	udiv	r3, r2, r3
 800053c:	607b      	str	r3, [r7, #4]
	return pclk1;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40023800 	.word	0x40023800
 8000550:	00f42400 	.word	0x00f42400
 8000554:	007a1200 	.word	0x007a1200
 8000558:	20000000 	.word	0x20000000
 800055c:	20000010 	.word	0x20000010

08000560 <I2C_PeriClockControl>:


void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d120      	bne.n	80005b4 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <I2C_PeriClockControl+0xa0>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <I2C_PeriClockControl+0x28>
		{
			I2C1_PERICLK_EN();
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <I2C_PeriClockControl+0xa4>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	4a21      	ldr	r2, [pc, #132]	; (8000604 <I2C_PeriClockControl+0xa4>)
 8000580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000584:	6413      	str	r3, [r2, #64]	; 0x40
			I2C3_PERICLK_DI();
		}

	}

}
 8000586:	e035      	b.n	80005f4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <I2C_PeriClockControl+0xa8>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d106      	bne.n	800059e <I2C_PeriClockControl+0x3e>
			I2C2_PERICLK_EN();
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <I2C_PeriClockControl+0xa4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <I2C_PeriClockControl+0xa4>)
 8000596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800059c:	e02a      	b.n	80005f4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <I2C_PeriClockControl+0xac>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d126      	bne.n	80005f4 <I2C_PeriClockControl+0x94>
			I2C3_PERICLK_EN();
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005b2:	e01f      	b.n	80005f4 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <I2C_PeriClockControl+0xa0>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d106      	bne.n	80005ca <I2C_PeriClockControl+0x6a>
			I2C1_PERICLK_DI();
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a10      	ldr	r2, [pc, #64]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005c8:	e014      	b.n	80005f4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <I2C_PeriClockControl+0xa8>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d106      	bne.n	80005e0 <I2C_PeriClockControl+0x80>
			I2C2_PERICLK_DI();
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005de:	e009      	b.n	80005f4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <I2C_PeriClockControl+0xac>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d105      	bne.n	80005f4 <I2C_PeriClockControl+0x94>
			I2C3_PERICLK_DI();
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a05      	ldr	r2, [pc, #20]	; (8000604 <I2C_PeriClockControl+0xa4>)
 80005ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40005400 	.word	0x40005400
 8000604:	40023800 	.word	0x40023800
 8000608:	40005800 	.word	0x40005800
 800060c:	40005c00 	.word	0x40005c00

08000610 <I2C_PeripheralControl>:


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d106      	bne.n	8000630 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1<<I2C_CR1_PE);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f043 0201 	orr.w	r2, r3, #1
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
	}
}
 800062e:	e005      	b.n	800063c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 0201 	bic.w	r2, r3, #1
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <I2C_Init>:



void I2C_Init(I2C_Handle_t *I2CHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	uint16_t ccrvalue;
	uint8_t trise =0;
 8000654:	2300      	movs	r3, #0
 8000656:	727b      	strb	r3, [r7, #9]


	//enable peripheral clock
	I2C_PeriClockControl(I2CHandle->pI2Cx,ENABLE );
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff7e 	bl	8000560 <I2C_PeriClockControl>


	// steps must be done when peripheral is disabled
	//1. Configure mode (speed): standard or fast
	if (I2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a50      	ldr	r2, [pc, #320]	; (80007ac <I2C_Init+0x164>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d80f      	bhi.n	800068e <I2C_Init+0x46>
	{
		//standard mode
		ccrvalue =  (RCC_GETPCLK1Value()/(2*I2CHandle->I2C_Config.I2C_SCLSpeed));
 800066e:	f7ff ff23 	bl	80004b8 <RCC_GETPCLK1Value>
 8000672:	4602      	mov	r2, r0
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	817b      	strh	r3, [r7, #10]
		tempreg |= ccrvalue & 0xFFF; //maskout other bits except first 12
 8000680:	897b      	ldrh	r3, [r7, #10]
 8000682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4313      	orrs	r3, r2
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e02d      	b.n	80006ea <I2C_Init+0xa2>
	}
	else
	{
		//fastmode
		tempreg |= (1<<15);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000694:	60fb      	str	r3, [r7, #12]
		tempreg |= (I2CHandle->I2C_Config.I2C_FMDutyCycle <<14);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	895b      	ldrh	r3, [r3, #10]
 800069a:	039b      	lsls	r3, r3, #14
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
		if (I2CHandle->I2C_Config.I2C_FMDutyCycle==2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	895b      	ldrh	r3, [r3, #10]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d10b      	bne.n	80006c4 <I2C_Init+0x7c>
		{
			ccrvalue =  (RCC_GETPCLK1Value()/(3*I2CHandle->I2C_Config.I2C_SCLSpeed));
 80006ac:	f7ff ff04 	bl	80004b8 <RCC_GETPCLK1Value>
 80006b0:	4601      	mov	r1, r0
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80006c0:	817b      	strh	r3, [r7, #10]
 80006c2:	e00c      	b.n	80006de <I2C_Init+0x96>
		}
		else
		{
			ccrvalue =  (RCC_GETPCLK1Value()/(25*I2CHandle->I2C_Config.I2C_SCLSpeed));
 80006c4:	f7ff fef8 	bl	80004b8 <RCC_GETPCLK1Value>
 80006c8:	4601      	mov	r1, r0
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	4613      	mov	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	009a      	lsls	r2, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006dc:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccrvalue & 0xFFF; //maskout other bits except first 12
 80006de:	897b      	ldrh	r3, [r7, #10]
 80006e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
	}
	I2CHandle->pI2Cx->CCR = tempreg;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	61da      	str	r2, [r3, #28]
	//2. FREQ bits must be configured with the APB clock frequency value
	tempreg = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
	tempreg |=  RCC_GETPCLK1Value()/1000000;
 80006f6:	f7ff fedf 	bl	80004b8 <RCC_GETPCLK1Value>
 80006fa:	4602      	mov	r2, r0
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <I2C_Init+0x168>)
 80006fe:	fba3 2302 	umull	r2, r3, r3, r2
 8000702:	0c9b      	lsrs	r3, r3, #18
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	4313      	orrs	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); //masks other bits and write to cr2
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000714:	605a      	str	r2, [r3, #4]
	//3. Configure device address (applies if slave)
	tempreg=0;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
	tempreg |= I2CHandle->I2C_Config.I2C_DeviceAddress<<1  ;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7a1b      	ldrb	r3, [r3, #8]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	461a      	mov	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4313      	orrs	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14); //bit 14 has to be kept at 1 per ref manual
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->OAR1 = tempreg;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	609a      	str	r2, [r3, #8]
	//4. Enable Acking
	tempreg=0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	tempreg |=  (I2CHandle->I2C_Config.I2C_ACKControl <<10);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a5b      	ldrb	r3, [r3, #9]
 8000740:	029b      	lsls	r3, r3, #10
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4313      	orrs	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->CR1 = tempreg;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	601a      	str	r2, [r3, #0]
	//5. Configure rise time of I2C pins
	tempreg = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
	//TRISE= (trisemax /tpclkl1)+1 or...fpclk1/frisetimemax+1
	if (I2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <I2C_Init+0x164>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d80a      	bhi.n	8000776 <I2C_Init+0x12e>
	{
		//standard mode (trise max =  1000 nanoseconds)
		trise= (RCC_GETPCLK1Value()/1000000)+1;
 8000760:	f7ff feaa 	bl	80004b8 <RCC_GETPCLK1Value>
 8000764:	4602      	mov	r2, r0
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <I2C_Init+0x168>)
 8000768:	fba3 2302 	umull	r2, r3, r3, r2
 800076c:	0c9b      	lsrs	r3, r3, #18
 800076e:	b2db      	uxtb	r3, r3
 8000770:	3301      	adds	r3, #1
 8000772:	727b      	strb	r3, [r7, #9]
 8000774:	e00e      	b.n	8000794 <I2C_Init+0x14c>

	}
	else
	{
		//fast mode (trise max = 300 nanoseconds)
		trise= ((RCC_GETPCLK1Value()*300)/1000000000)+1;
 8000776:	f7ff fe9f 	bl	80004b8 <RCC_GETPCLK1Value>
 800077a:	4602      	mov	r2, r0
 800077c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000780:	fb03 f302 	mul.w	r3, r3, r2
 8000784:	0a5b      	lsrs	r3, r3, #9
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <I2C_Init+0x16c>)
 8000788:	fba2 2303 	umull	r2, r3, r2, r3
 800078c:	09db      	lsrs	r3, r3, #7
 800078e:	b2db      	uxtb	r3, r3
 8000790:	3301      	adds	r3, #1
 8000792:	727b      	strb	r3, [r7, #9]

	}
	tempreg = trise;
 8000794:	7a7b      	ldrb	r3, [r7, #9]
 8000796:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->TRISE = (tempreg &0x3F);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007a2:	621a      	str	r2, [r3, #32]



}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	000186a0 	.word	0x000186a0
 80007b0:	431bde83 	.word	0x431bde83
 80007b4:	00044b83 	.word	0x00044b83

080007b8 <I2C_GetFlagStatus>:



/*******************Blocking Data controls************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t Flagname)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & Flagname)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	4013      	ands	r3, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <I2C_GetFlagStatus+0x1a>
	{
		return 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e000      	b.n	80007d4 <I2C_GetFlagStatus+0x1c>
	}
	return 0;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <I2CMasterSendData>:

void I2CMasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t len, uint8_t slaveaddr, uint8_t SR)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	70fb      	strb	r3, [r7, #3]
	//SR is to enable repeated start to hold the bus from other devices
	//len is in bytes
	//1. Generate Start condition
	pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_START);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007fc:	601a      	str	r2, [r3, #0]
	//2. Confirm start generation by checking SB flag in SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SB_FLAG));
 80007fe:	bf00      	nop
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2101      	movs	r1, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ffd6 	bl	80007b8 <I2C_GetFlagStatus>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f6      	beq.n	8000800 <I2CMasterSendData+0x20>
	//3. Send address of the slave + r/w bit set to '0'
	slaveaddr = slaveaddr <<1;
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	70fb      	strb	r3, [r7, #3]
	slaveaddr &= ~(1);
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	70fb      	strb	r3, [r7, #3]
	pI2CHandle->pI2Cx->DR =  slaveaddr;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	78fa      	ldrb	r2, [r7, #3]
 8000826:	611a      	str	r2, [r3, #16]
	//4. Confirm address phase is completed by checking ADDR flag
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_ADDR_FLAG));
 8000828:	bf00      	nop
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2102      	movs	r1, #2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffc1 	bl	80007b8 <I2C_GetFlagStatus>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f6      	beq.n	800082a <I2CMasterSendData+0x4a>
	//5. Clear ADDR FLAG
	uint32_t dummyread =  pI2CHandle->pI2Cx->SR1;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	617b      	str	r3, [r7, #20]
	dummyread =  pI2CHandle->pI2Cx->SR2;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	617b      	str	r3, [r7, #20]
	(void)dummyread;
	//6. Send data until len becomes 0
	while (len>0)
 800084c:	e014      	b.n	8000878 <I2CMasterSendData+0x98>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_TXE_FLAG));
 800084e:	bf00      	nop
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffae 	bl	80007b8 <I2C_GetFlagStatus>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f6      	beq.n	8000850 <I2CMasterSendData+0x70>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3301      	adds	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
		len--;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3b01      	subs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
	while (len>0)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1e7      	bne.n	800084e <I2CMasterSendData+0x6e>

	}
	//7. When len = 0 wait for TXE=1 and BTF=1 then generate stop condition or repeated start
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_TXE_FLAG));
 800087e:	bf00      	nop
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff96 	bl	80007b8 <I2C_GetFlagStatus>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f6      	beq.n	8000880 <I2CMasterSendData+0xa0>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_BTF_FLAG));
 8000892:	bf00      	nop
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2104      	movs	r1, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff8c 	bl	80007b8 <I2C_GetFlagStatus>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0f6      	beq.n	8000894 <I2CMasterSendData+0xb4>
	if (SR == 0 )
 80008a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d107      	bne.n	80008be <I2CMasterSendData+0xde>
	{
		pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008bc:	601a      	str	r2, [r3, #0]
	}




}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <I2CMasterRcvData>:

void I2CMasterRcvData(I2C_Handle_t *pI2CHandle, uint8_t *pRxbuffer, uint32_t len, uint8_t slaveaddr, uint8_t SR)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b088      	sub	sp, #32
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	70fb      	strb	r3, [r7, #3]
	//len is in bytes
	//SR is to enable repeated start to hold the bus from other devices

	//1. Generate the START condition
	pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_START);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008e2:	601a      	str	r2, [r3, #0]

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_SB_FLAG));
 80008e4:	bf00      	nop
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff63 	bl	80007b8 <I2C_GetFlagStatus>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f6      	beq.n	80008e6 <I2CMasterRcvData+0x20>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	slaveaddr = slaveaddr <<1;
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	70fb      	strb	r3, [r7, #3]
	slaveaddr |= 1;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	70fb      	strb	r3, [r7, #3]
	pI2CHandle->pI2Cx->DR =  slaveaddr;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	78fa      	ldrb	r2, [r7, #3]
 800090c:	611a      	str	r2, [r3, #16]

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_ADDR_FLAG));
 800090e:	bf00      	nop
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff4e 	bl	80007b8 <I2C_GetFlagStatus>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0f6      	beq.n	8000910 <I2CMasterRcvData+0x4a>


	//procedure to read only 1 byte from slave
	if(len == 1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d12b      	bne.n	8000980 <I2CMasterRcvData+0xba>
	{
		//Disable Acking
		pI2CHandle->pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000936:	601a      	str	r2, [r3, #0]

		//clear the ADDR flag
		uint32_t dummyread =  pI2CHandle->pI2Cx->SR1;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	61bb      	str	r3, [r7, #24]
		dummyread =  pI2CHandle->pI2Cx->SR2;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	61bb      	str	r3, [r7, #24]
		(void) dummyread;

		//wait until  RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_RXNE_FLAG));
 8000948:	bf00      	nop
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff31 	bl	80007b8 <I2C_GetFlagStatus>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0f6      	beq.n	800094a <I2CMasterRcvData+0x84>


		//generate STOP condition if SR set to 1
		if (SR == 0 )
 800095c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000960:	2b00      	cmp	r3, #0
 8000962:	d107      	bne.n	8000974 <I2CMasterRcvData+0xae>
		{
			pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000972:	601a      	str	r2, [r3, #0]
		}

		//read data in to buffer
		*pRxbuffer = pI2CHandle->pI2Cx->DR;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	701a      	strb	r2, [r3, #0]

	}


	//procedure to read data from slave when Len > 1
	if(len > 1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d93a      	bls.n	80009fc <I2CMasterRcvData+0x136>
	{
		//clear the ADDR flag
		uint32_t dummyread =  pI2CHandle->pI2Cx->SR1;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	617b      	str	r3, [r7, #20]
		dummyread =  pI2CHandle->pI2Cx->SR2;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	617b      	str	r3, [r7, #20]
		(void) dummyread;

		//read the data until len becomes zero
		for ( uint32_t i = len ; i > 0 ; i--)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	61fb      	str	r3, [r7, #28]
 800099a:	e02c      	b.n	80009f6 <I2CMasterRcvData+0x130>
		{
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_RXNE_FLAG));
 800099c:	bf00      	nop
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff07 	bl	80007b8 <I2C_GetFlagStatus>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f6      	beq.n	800099e <I2CMasterRcvData+0xd8>

			if(i == 2) //if last 2 bytes are remaining
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d113      	bne.n	80009de <I2CMasterRcvData+0x118>
			{
				//Disable Acking
				pI2CHandle->pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009c4:	601a      	str	r2, [r3, #0]

				//generate STOP condition if SR set to 1
				if (SR == 0 )
 80009c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d107      	bne.n	80009de <I2CMasterRcvData+0x118>
				{
					pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009dc:	601a      	str	r2, [r3, #0]
				}

			}

			//read the data from data register in to buffer
			*pRxbuffer = pI2CHandle->pI2Cx->DR;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxbuffer++;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = len ; i > 0 ; i--)
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1cf      	bne.n	800099c <I2CMasterRcvData+0xd6>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl==I2C_ACK_ENABLE)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	7a5b      	ldrb	r3, [r3, #9]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d107      	bne.n	8000a14 <I2CMasterRcvData+0x14e>
	{pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_ACK);}
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a12:	601a      	str	r2, [r3, #0]





}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <GPIO_PeriClockControl>:
* ReturnVal:	none
* Notes:		none
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d157      	bne.n	8000ade <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a59      	ldr	r2, [pc, #356]	; (8000b98 <GPIO_PeriClockControl+0x17c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PERICLK_EN();
 8000a36:	4b59      	ldr	r3, [pc, #356]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a58      	ldr	r2, [pc, #352]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PERICLK_DI();
		}

	}
}
 8000a42:	e0a3      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a56      	ldr	r2, [pc, #344]	; (8000ba0 <GPIO_PeriClockControl+0x184>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d106      	bne.n	8000a5a <GPIO_PeriClockControl+0x3e>
			GPIOB_PERICLK_EN();
 8000a4c:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a52      	ldr	r2, [pc, #328]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a58:	e098      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a51      	ldr	r2, [pc, #324]	; (8000ba4 <GPIO_PeriClockControl+0x188>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <GPIO_PeriClockControl+0x54>
			GPIOC_PERICLK_EN();
 8000a62:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a4d      	ldr	r2, [pc, #308]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a6e:	e08d      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a4d      	ldr	r2, [pc, #308]	; (8000ba8 <GPIO_PeriClockControl+0x18c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <GPIO_PeriClockControl+0x6a>
			GPIOD_PERICLK_EN();
 8000a78:	4b48      	ldr	r3, [pc, #288]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a47      	ldr	r2, [pc, #284]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a84:	e082      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a48      	ldr	r2, [pc, #288]	; (8000bac <GPIO_PeriClockControl+0x190>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <GPIO_PeriClockControl+0x80>
			GPIOE_PERICLK_EN();
 8000a8e:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a9a:	e077      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <GPIO_PeriClockControl+0x194>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d106      	bne.n	8000ab2 <GPIO_PeriClockControl+0x96>
			GPIOF_PERICLK_EN();
 8000aa4:	4b3d      	ldr	r3, [pc, #244]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a3c      	ldr	r2, [pc, #240]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000aaa:	f043 0320 	orr.w	r3, r3, #32
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ab0:	e06c      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <GPIO_PeriClockControl+0x198>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <GPIO_PeriClockControl+0xac>
			GPIOG_PERICLK_EN();
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a37      	ldr	r2, [pc, #220]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ac6:	e061      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a3b      	ldr	r2, [pc, #236]	; (8000bb8 <GPIO_PeriClockControl+0x19c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d15d      	bne.n	8000b8c <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_EN();
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000adc:	e056      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a2d      	ldr	r2, [pc, #180]	; (8000b98 <GPIO_PeriClockControl+0x17c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PERICLK_DI();
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a2c      	ldr	r2, [pc, #176]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000aec:	f023 0301 	bic.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000af2:	e04b      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a2a      	ldr	r2, [pc, #168]	; (8000ba0 <GPIO_PeriClockControl+0x184>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d106      	bne.n	8000b0a <GPIO_PeriClockControl+0xee>
			GPIOB_PERICLK_DI();
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b02:	f023 0302 	bic.w	r3, r3, #2
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b08:	e040      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <GPIO_PeriClockControl+0x188>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d106      	bne.n	8000b20 <GPIO_PeriClockControl+0x104>
			GPIOC_PERICLK_DI();
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b18:	f023 0304 	bic.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b1e:	e035      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <GPIO_PeriClockControl+0x18c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d106      	bne.n	8000b36 <GPIO_PeriClockControl+0x11a>
			GPIOD_PERICLK_DI();
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b2e:	f023 0308 	bic.w	r3, r3, #8
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b34:	e02a      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <GPIO_PeriClockControl+0x190>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d106      	bne.n	8000b4c <GPIO_PeriClockControl+0x130>
			GPIOE_PERICLK_DI();
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b44:	f023 0310 	bic.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b4a:	e01f      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <GPIO_PeriClockControl+0x194>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d106      	bne.n	8000b62 <GPIO_PeriClockControl+0x146>
			GPIOF_PERICLK_DI();
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b5a:	f023 0320 	bic.w	r3, r3, #32
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b60:	e014      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <GPIO_PeriClockControl+0x198>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d106      	bne.n	8000b78 <GPIO_PeriClockControl+0x15c>
			GPIOG_PERICLK_DI();
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b76:	e009      	b.n	8000b8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <GPIO_PeriClockControl+0x19c>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d105      	bne.n	8000b8c <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_DI();
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <GPIO_PeriClockControl+0x180>)
 8000b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40021400 	.word	0x40021400
 8000bb4:	40021800 	.word	0x40021800
 8000bb8:	40021c00 	.word	0x40021c00

08000bbc <GPIO_Init>:
* Parameter1:	Handle of GPIO port
* ReturnVal:	none
* Notes:		none
*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{	uint32_t temp=0;
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]

	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff24 	bl	8000a1c <GPIO_PeriClockControl>

	//see if its not an interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	795b      	ldrb	r3, [r3, #5]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d820      	bhi.n	8000c1e <GPIO_Init+0x62>
	{
		//configure pin mode
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	795b      	ldrb	r3, [r3, #5]
 8000be0:	461a      	mov	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	791b      	ldrb	r3, [r3, #4]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear bit fields before setting
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	791b      	ldrb	r3, [r3, #4]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	400a      	ands	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp; //set bits
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	e0c6      	b.n	8000dac <GPIO_Init+0x1f0>

	}
	//else configure for  interrupt mode
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	795b      	ldrb	r3, [r3, #5]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d117      	bne.n	8000c56 <GPIO_Init+0x9a>
		{
			//1. configure Falling trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c26:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <GPIO_Init+0x18c>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	7912      	ldrb	r2, [r2, #4]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	2201      	movs	r2, #1
 8000c32:	408a      	lsls	r2, r1
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a44      	ldr	r2, [pc, #272]	; (8000d48 <GPIO_Init+0x18c>)
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c3c:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <GPIO_Init+0x18c>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	7912      	ldrb	r2, [r2, #4]
 8000c44:	4611      	mov	r1, r2
 8000c46:	2201      	movs	r2, #1
 8000c48:	408a      	lsls	r2, r1
 8000c4a:	43d2      	mvns	r2, r2
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <GPIO_Init+0x18c>)
 8000c50:	400b      	ands	r3, r1
 8000c52:	6093      	str	r3, [r2, #8]
 8000c54:	e035      	b.n	8000cc2 <GPIO_Init+0x106>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	795b      	ldrb	r3, [r3, #5]
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	d117      	bne.n	8000c8e <GPIO_Init+0xd2>
		{
			//1. configure Rising trigger selection register
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <GPIO_Init+0x18c>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	7912      	ldrb	r2, [r2, #4]
 8000c66:	4611      	mov	r1, r2
 8000c68:	2201      	movs	r2, #1
 8000c6a:	408a      	lsls	r2, r1
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a36      	ldr	r2, [pc, #216]	; (8000d48 <GPIO_Init+0x18c>)
 8000c70:	430b      	orrs	r3, r1
 8000c72:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <GPIO_Init+0x18c>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	7912      	ldrb	r2, [r2, #4]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	408a      	lsls	r2, r1
 8000c82:	43d2      	mvns	r2, r2
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a30      	ldr	r2, [pc, #192]	; (8000d48 <GPIO_Init+0x18c>)
 8000c88:	400b      	ands	r3, r1
 8000c8a:	60d3      	str	r3, [r2, #12]
 8000c8c:	e019      	b.n	8000cc2 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	795b      	ldrb	r3, [r3, #5]
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d115      	bne.n	8000cc2 <GPIO_Init+0x106>
		{
			//1. configure Falling and Rising trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <GPIO_Init+0x18c>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	7912      	ldrb	r2, [r2, #4]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	408a      	lsls	r2, r1
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <GPIO_Init+0x18c>)
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <GPIO_Init+0x18c>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	7912      	ldrb	r2, [r2, #4]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	408a      	lsls	r2, r1
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <GPIO_Init+0x18c>)
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6093      	str	r3, [r2, #8]
		}
		//2. configure GPIO port selection in SYSCFG_EXTIC
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to get which exti control register
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4; //to determine section within control register determined above
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	75fb      	strb	r3, [r7, #23]

		if(pGPIOHandle->pGPIOx == GPIOA){portcode=0;}
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <GPIO_Init+0x190>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d102      	bne.n	8000ce8 <GPIO_Init+0x12c>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	75fb      	strb	r3, [r7, #23]
 8000ce6:	e046      	b.n	8000d76 <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOB){portcode=1;}
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <GPIO_Init+0x194>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d102      	bne.n	8000cf8 <GPIO_Init+0x13c>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	75fb      	strb	r3, [r7, #23]
 8000cf6:	e03e      	b.n	8000d76 <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOC){portcode=2;}
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <GPIO_Init+0x198>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d102      	bne.n	8000d08 <GPIO_Init+0x14c>
 8000d02:	2302      	movs	r3, #2
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	e036      	b.n	8000d76 <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOD){portcode=3;}
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <GPIO_Init+0x19c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d102      	bne.n	8000d18 <GPIO_Init+0x15c>
 8000d12:	2303      	movs	r3, #3
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e02e      	b.n	8000d76 <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOE){portcode=4;}
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <GPIO_Init+0x1a0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d102      	bne.n	8000d28 <GPIO_Init+0x16c>
 8000d22:	2304      	movs	r3, #4
 8000d24:	75fb      	strb	r3, [r7, #23]
 8000d26:	e026      	b.n	8000d76 <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOF){portcode=5;}
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <GPIO_Init+0x1a4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d102      	bne.n	8000d38 <GPIO_Init+0x17c>
 8000d32:	2305      	movs	r3, #5
 8000d34:	75fb      	strb	r3, [r7, #23]
 8000d36:	e01e      	b.n	8000d76 <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOG){portcode=6;}
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <GPIO_Init+0x1a8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d112      	bne.n	8000d68 <GPIO_Init+0x1ac>
 8000d42:	2306      	movs	r3, #6
 8000d44:	75fb      	strb	r3, [r7, #23]
 8000d46:	e016      	b.n	8000d76 <GPIO_Init+0x1ba>
 8000d48:	40013c00 	.word	0x40013c00
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40021400 	.word	0x40021400
 8000d64:	40021800 	.word	0x40021800
		else if(pGPIOHandle->pGPIOx == GPIOH){portcode=7;}
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a5f      	ldr	r2, [pc, #380]	; (8000eec <GPIO_Init+0x330>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <GPIO_Init+0x1ba>
 8000d72:	2307      	movs	r3, #7
 8000d74:	75fb      	strb	r3, [r7, #23]

		SYSCFG_PERICLK_EN();
 8000d76:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <GPIO_Init+0x334>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a5d      	ldr	r2, [pc, #372]	; (8000ef0 <GPIO_Init+0x334>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000d82:	7dfa      	ldrb	r2, [r7, #23]
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fa02 f103 	lsl.w	r1, r2, r3
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <GPIO_Init+0x338>)
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	3302      	adds	r3, #2
 8000d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. enable EXTI interrupt delivery via IMR
		EXTI->IMR |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000d96:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <GPIO_Init+0x33c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	7912      	ldrb	r2, [r2, #4]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	2201      	movs	r2, #1
 8000da2:	408a      	lsls	r2, r1
 8000da4:	4611      	mov	r1, r2
 8000da6:	4a54      	ldr	r2, [pc, #336]	; (8000ef8 <GPIO_Init+0x33c>)
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6013      	str	r3, [r2, #0]
	}
	//configure speed
	temp=0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	799b      	ldrb	r3, [r3, #6]
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	791b      	ldrb	r3, [r3, #4]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	791b      	ldrb	r3, [r3, #4]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2103      	movs	r1, #3
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	400a      	ands	r2, r1
 8000dde:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6899      	ldr	r1, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	609a      	str	r2, [r3, #8]
	//configure pullup/pulldown
	temp=0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	79db      	ldrb	r3, [r3, #7]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	791b      	ldrb	r3, [r3, #4]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	791b      	ldrb	r3, [r3, #4]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2103      	movs	r1, #3
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	400a      	ands	r2, r1
 8000e22:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68d9      	ldr	r1, [r3, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	60da      	str	r2, [r3, #12]
	//configure output type
	temp=0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7a1b      	ldrb	r3, [r3, #8]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	791b      	ldrb	r3, [r3, #4]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	791b      	ldrb	r3, [r3, #4]
 8000e52:	4619      	mov	r1, r3
 8000e54:	2301      	movs	r3, #1
 8000e56:	408b      	lsls	r3, r1
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	400a      	ands	r2, r1
 8000e62:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6859      	ldr	r1, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	605a      	str	r2, [r3, #4]

	temp=0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	795b      	ldrb	r3, [r3, #5]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d131      	bne.n	8000ee4 <GPIO_Init+0x328>
	{
		//Need to revisit this to understand
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	737b      	strb	r3, [r7, #13]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	733b      	strb	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[temp1]&= ~(0xF<<(4*temp2));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	7b7a      	ldrb	r2, [r7, #13]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e9e:	7b3b      	ldrb	r3, [r7, #12]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	7b7a      	ldrb	r2, [r7, #13]
 8000eb2:	4001      	ands	r1, r0
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode<<(4*temp2));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	7b7a      	ldrb	r2, [r7, #13]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	7b7a      	ldrb	r2, [r7, #13]
 8000edc:	4301      	orrs	r1, r0
 8000ede:	3208      	adds	r2, #8
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}




}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021c00 	.word	0x40021c00
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <GPIO_ReadFromInputPin>:
* Parameter2:	GPIO pin in range of 0 to 16
* ReturnVal:	0 or 1
* Notes:		none
*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
	return value;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <__libc_init_array>:
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4e0d      	ldr	r6, [pc, #52]	; (8000f60 <__libc_init_array+0x38>)
 8000f2c:	4c0d      	ldr	r4, [pc, #52]	; (8000f64 <__libc_init_array+0x3c>)
 8000f2e:	1ba4      	subs	r4, r4, r6
 8000f30:	10a4      	asrs	r4, r4, #2
 8000f32:	2500      	movs	r5, #0
 8000f34:	42a5      	cmp	r5, r4
 8000f36:	d109      	bne.n	8000f4c <__libc_init_array+0x24>
 8000f38:	4e0b      	ldr	r6, [pc, #44]	; (8000f68 <__libc_init_array+0x40>)
 8000f3a:	4c0c      	ldr	r4, [pc, #48]	; (8000f6c <__libc_init_array+0x44>)
 8000f3c:	f001 fa3a 	bl	80023b4 <_init>
 8000f40:	1ba4      	subs	r4, r4, r6
 8000f42:	10a4      	asrs	r4, r4, #2
 8000f44:	2500      	movs	r5, #0
 8000f46:	42a5      	cmp	r5, r4
 8000f48:	d105      	bne.n	8000f56 <__libc_init_array+0x2e>
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f50:	4798      	blx	r3
 8000f52:	3501      	adds	r5, #1
 8000f54:	e7ee      	b.n	8000f34 <__libc_init_array+0xc>
 8000f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5a:	4798      	blx	r3
 8000f5c:	3501      	adds	r5, #1
 8000f5e:	e7f2      	b.n	8000f46 <__libc_init_array+0x1e>
 8000f60:	080024c4 	.word	0x080024c4
 8000f64:	080024c4 	.word	0x080024c4
 8000f68:	080024c4 	.word	0x080024c4
 8000f6c:	080024c8 	.word	0x080024c8

08000f70 <memset>:
 8000f70:	4402      	add	r2, r0
 8000f72:	4603      	mov	r3, r0
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d100      	bne.n	8000f7a <memset+0xa>
 8000f78:	4770      	bx	lr
 8000f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8000f7e:	e7f9      	b.n	8000f74 <memset+0x4>

08000f80 <iprintf>:
 8000f80:	b40f      	push	{r0, r1, r2, r3}
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <iprintf+0x2c>)
 8000f84:	b513      	push	{r0, r1, r4, lr}
 8000f86:	681c      	ldr	r4, [r3, #0]
 8000f88:	b124      	cbz	r4, 8000f94 <iprintf+0x14>
 8000f8a:	69a3      	ldr	r3, [r4, #24]
 8000f8c:	b913      	cbnz	r3, 8000f94 <iprintf+0x14>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f000 fa22 	bl	80013d8 <__sinit>
 8000f94:	ab05      	add	r3, sp, #20
 8000f96:	9a04      	ldr	r2, [sp, #16]
 8000f98:	68a1      	ldr	r1, [r4, #8]
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f000 fbdb 	bl	8001758 <_vfiprintf_r>
 8000fa2:	b002      	add	sp, #8
 8000fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fa8:	b004      	add	sp, #16
 8000faa:	4770      	bx	lr
 8000fac:	20000020 	.word	0x20000020

08000fb0 <_puts_r>:
 8000fb0:	b570      	push	{r4, r5, r6, lr}
 8000fb2:	460e      	mov	r6, r1
 8000fb4:	4605      	mov	r5, r0
 8000fb6:	b118      	cbz	r0, 8000fc0 <_puts_r+0x10>
 8000fb8:	6983      	ldr	r3, [r0, #24]
 8000fba:	b90b      	cbnz	r3, 8000fc0 <_puts_r+0x10>
 8000fbc:	f000 fa0c 	bl	80013d8 <__sinit>
 8000fc0:	69ab      	ldr	r3, [r5, #24]
 8000fc2:	68ac      	ldr	r4, [r5, #8]
 8000fc4:	b913      	cbnz	r3, 8000fcc <_puts_r+0x1c>
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f000 fa06 	bl	80013d8 <__sinit>
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <_puts_r+0xac>)
 8000fce:	429c      	cmp	r4, r3
 8000fd0:	d117      	bne.n	8001002 <_puts_r+0x52>
 8000fd2:	686c      	ldr	r4, [r5, #4]
 8000fd4:	89a3      	ldrh	r3, [r4, #12]
 8000fd6:	071b      	lsls	r3, r3, #28
 8000fd8:	d51d      	bpl.n	8001016 <_puts_r+0x66>
 8000fda:	6923      	ldr	r3, [r4, #16]
 8000fdc:	b1db      	cbz	r3, 8001016 <_puts_r+0x66>
 8000fde:	3e01      	subs	r6, #1
 8000fe0:	68a3      	ldr	r3, [r4, #8]
 8000fe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	60a3      	str	r3, [r4, #8]
 8000fea:	b9e9      	cbnz	r1, 8001028 <_puts_r+0x78>
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da2e      	bge.n	800104e <_puts_r+0x9e>
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	210a      	movs	r1, #10
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f000 f83f 	bl	8001078 <__swbuf_r>
 8000ffa:	3001      	adds	r0, #1
 8000ffc:	d011      	beq.n	8001022 <_puts_r+0x72>
 8000ffe:	200a      	movs	r0, #10
 8001000:	e011      	b.n	8001026 <_puts_r+0x76>
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <_puts_r+0xb0>)
 8001004:	429c      	cmp	r4, r3
 8001006:	d101      	bne.n	800100c <_puts_r+0x5c>
 8001008:	68ac      	ldr	r4, [r5, #8]
 800100a:	e7e3      	b.n	8000fd4 <_puts_r+0x24>
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_puts_r+0xb4>)
 800100e:	429c      	cmp	r4, r3
 8001010:	bf08      	it	eq
 8001012:	68ec      	ldreq	r4, [r5, #12]
 8001014:	e7de      	b.n	8000fd4 <_puts_r+0x24>
 8001016:	4621      	mov	r1, r4
 8001018:	4628      	mov	r0, r5
 800101a:	f000 f87f 	bl	800111c <__swsetup_r>
 800101e:	2800      	cmp	r0, #0
 8001020:	d0dd      	beq.n	8000fde <_puts_r+0x2e>
 8001022:	f04f 30ff 	mov.w	r0, #4294967295
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	2b00      	cmp	r3, #0
 800102a:	da04      	bge.n	8001036 <_puts_r+0x86>
 800102c:	69a2      	ldr	r2, [r4, #24]
 800102e:	429a      	cmp	r2, r3
 8001030:	dc06      	bgt.n	8001040 <_puts_r+0x90>
 8001032:	290a      	cmp	r1, #10
 8001034:	d004      	beq.n	8001040 <_puts_r+0x90>
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	6022      	str	r2, [r4, #0]
 800103c:	7019      	strb	r1, [r3, #0]
 800103e:	e7cf      	b.n	8000fe0 <_puts_r+0x30>
 8001040:	4622      	mov	r2, r4
 8001042:	4628      	mov	r0, r5
 8001044:	f000 f818 	bl	8001078 <__swbuf_r>
 8001048:	3001      	adds	r0, #1
 800104a:	d1c9      	bne.n	8000fe0 <_puts_r+0x30>
 800104c:	e7e9      	b.n	8001022 <_puts_r+0x72>
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	200a      	movs	r0, #10
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	6022      	str	r2, [r4, #0]
 8001056:	7018      	strb	r0, [r3, #0]
 8001058:	e7e5      	b.n	8001026 <_puts_r+0x76>
 800105a:	bf00      	nop
 800105c:	08002434 	.word	0x08002434
 8001060:	08002454 	.word	0x08002454
 8001064:	08002414 	.word	0x08002414

08001068 <puts>:
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <puts+0xc>)
 800106a:	4601      	mov	r1, r0
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f7ff bf9f 	b.w	8000fb0 <_puts_r>
 8001072:	bf00      	nop
 8001074:	20000020 	.word	0x20000020

08001078 <__swbuf_r>:
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107a:	460e      	mov	r6, r1
 800107c:	4614      	mov	r4, r2
 800107e:	4605      	mov	r5, r0
 8001080:	b118      	cbz	r0, 800108a <__swbuf_r+0x12>
 8001082:	6983      	ldr	r3, [r0, #24]
 8001084:	b90b      	cbnz	r3, 800108a <__swbuf_r+0x12>
 8001086:	f000 f9a7 	bl	80013d8 <__sinit>
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <__swbuf_r+0x98>)
 800108c:	429c      	cmp	r4, r3
 800108e:	d12a      	bne.n	80010e6 <__swbuf_r+0x6e>
 8001090:	686c      	ldr	r4, [r5, #4]
 8001092:	69a3      	ldr	r3, [r4, #24]
 8001094:	60a3      	str	r3, [r4, #8]
 8001096:	89a3      	ldrh	r3, [r4, #12]
 8001098:	071a      	lsls	r2, r3, #28
 800109a:	d52e      	bpl.n	80010fa <__swbuf_r+0x82>
 800109c:	6923      	ldr	r3, [r4, #16]
 800109e:	b363      	cbz	r3, 80010fa <__swbuf_r+0x82>
 80010a0:	6923      	ldr	r3, [r4, #16]
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	1ac0      	subs	r0, r0, r3
 80010a6:	6963      	ldr	r3, [r4, #20]
 80010a8:	b2f6      	uxtb	r6, r6
 80010aa:	4283      	cmp	r3, r0
 80010ac:	4637      	mov	r7, r6
 80010ae:	dc04      	bgt.n	80010ba <__swbuf_r+0x42>
 80010b0:	4621      	mov	r1, r4
 80010b2:	4628      	mov	r0, r5
 80010b4:	f000 f926 	bl	8001304 <_fflush_r>
 80010b8:	bb28      	cbnz	r0, 8001106 <__swbuf_r+0x8e>
 80010ba:	68a3      	ldr	r3, [r4, #8]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60a3      	str	r3, [r4, #8]
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	6022      	str	r2, [r4, #0]
 80010c6:	701e      	strb	r6, [r3, #0]
 80010c8:	6963      	ldr	r3, [r4, #20]
 80010ca:	3001      	adds	r0, #1
 80010cc:	4283      	cmp	r3, r0
 80010ce:	d004      	beq.n	80010da <__swbuf_r+0x62>
 80010d0:	89a3      	ldrh	r3, [r4, #12]
 80010d2:	07db      	lsls	r3, r3, #31
 80010d4:	d519      	bpl.n	800110a <__swbuf_r+0x92>
 80010d6:	2e0a      	cmp	r6, #10
 80010d8:	d117      	bne.n	800110a <__swbuf_r+0x92>
 80010da:	4621      	mov	r1, r4
 80010dc:	4628      	mov	r0, r5
 80010de:	f000 f911 	bl	8001304 <_fflush_r>
 80010e2:	b190      	cbz	r0, 800110a <__swbuf_r+0x92>
 80010e4:	e00f      	b.n	8001106 <__swbuf_r+0x8e>
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <__swbuf_r+0x9c>)
 80010e8:	429c      	cmp	r4, r3
 80010ea:	d101      	bne.n	80010f0 <__swbuf_r+0x78>
 80010ec:	68ac      	ldr	r4, [r5, #8]
 80010ee:	e7d0      	b.n	8001092 <__swbuf_r+0x1a>
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <__swbuf_r+0xa0>)
 80010f2:	429c      	cmp	r4, r3
 80010f4:	bf08      	it	eq
 80010f6:	68ec      	ldreq	r4, [r5, #12]
 80010f8:	e7cb      	b.n	8001092 <__swbuf_r+0x1a>
 80010fa:	4621      	mov	r1, r4
 80010fc:	4628      	mov	r0, r5
 80010fe:	f000 f80d 	bl	800111c <__swsetup_r>
 8001102:	2800      	cmp	r0, #0
 8001104:	d0cc      	beq.n	80010a0 <__swbuf_r+0x28>
 8001106:	f04f 37ff 	mov.w	r7, #4294967295
 800110a:	4638      	mov	r0, r7
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800110e:	bf00      	nop
 8001110:	08002434 	.word	0x08002434
 8001114:	08002454 	.word	0x08002454
 8001118:	08002414 	.word	0x08002414

0800111c <__swsetup_r>:
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <__swsetup_r+0xcc>)
 800111e:	b570      	push	{r4, r5, r6, lr}
 8001120:	681d      	ldr	r5, [r3, #0]
 8001122:	4606      	mov	r6, r0
 8001124:	460c      	mov	r4, r1
 8001126:	b125      	cbz	r5, 8001132 <__swsetup_r+0x16>
 8001128:	69ab      	ldr	r3, [r5, #24]
 800112a:	b913      	cbnz	r3, 8001132 <__swsetup_r+0x16>
 800112c:	4628      	mov	r0, r5
 800112e:	f000 f953 	bl	80013d8 <__sinit>
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <__swsetup_r+0xd0>)
 8001134:	429c      	cmp	r4, r3
 8001136:	d10f      	bne.n	8001158 <__swsetup_r+0x3c>
 8001138:	686c      	ldr	r4, [r5, #4]
 800113a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800113e:	b29a      	uxth	r2, r3
 8001140:	0715      	lsls	r5, r2, #28
 8001142:	d42c      	bmi.n	800119e <__swsetup_r+0x82>
 8001144:	06d0      	lsls	r0, r2, #27
 8001146:	d411      	bmi.n	800116c <__swsetup_r+0x50>
 8001148:	2209      	movs	r2, #9
 800114a:	6032      	str	r2, [r6, #0]
 800114c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001150:	81a3      	strh	r3, [r4, #12]
 8001152:	f04f 30ff 	mov.w	r0, #4294967295
 8001156:	e03e      	b.n	80011d6 <__swsetup_r+0xba>
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <__swsetup_r+0xd4>)
 800115a:	429c      	cmp	r4, r3
 800115c:	d101      	bne.n	8001162 <__swsetup_r+0x46>
 800115e:	68ac      	ldr	r4, [r5, #8]
 8001160:	e7eb      	b.n	800113a <__swsetup_r+0x1e>
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <__swsetup_r+0xd8>)
 8001164:	429c      	cmp	r4, r3
 8001166:	bf08      	it	eq
 8001168:	68ec      	ldreq	r4, [r5, #12]
 800116a:	e7e6      	b.n	800113a <__swsetup_r+0x1e>
 800116c:	0751      	lsls	r1, r2, #29
 800116e:	d512      	bpl.n	8001196 <__swsetup_r+0x7a>
 8001170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001172:	b141      	cbz	r1, 8001186 <__swsetup_r+0x6a>
 8001174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001178:	4299      	cmp	r1, r3
 800117a:	d002      	beq.n	8001182 <__swsetup_r+0x66>
 800117c:	4630      	mov	r0, r6
 800117e:	f000 fa19 	bl	80015b4 <_free_r>
 8001182:	2300      	movs	r3, #0
 8001184:	6363      	str	r3, [r4, #52]	; 0x34
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800118c:	81a3      	strh	r3, [r4, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	6063      	str	r3, [r4, #4]
 8001192:	6923      	ldr	r3, [r4, #16]
 8001194:	6023      	str	r3, [r4, #0]
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	81a3      	strh	r3, [r4, #12]
 800119e:	6923      	ldr	r3, [r4, #16]
 80011a0:	b94b      	cbnz	r3, 80011b6 <__swsetup_r+0x9a>
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ac:	d003      	beq.n	80011b6 <__swsetup_r+0x9a>
 80011ae:	4621      	mov	r1, r4
 80011b0:	4630      	mov	r0, r6
 80011b2:	f000 f9bf 	bl	8001534 <__smakebuf_r>
 80011b6:	89a2      	ldrh	r2, [r4, #12]
 80011b8:	f012 0301 	ands.w	r3, r2, #1
 80011bc:	d00c      	beq.n	80011d8 <__swsetup_r+0xbc>
 80011be:	2300      	movs	r3, #0
 80011c0:	60a3      	str	r3, [r4, #8]
 80011c2:	6963      	ldr	r3, [r4, #20]
 80011c4:	425b      	negs	r3, r3
 80011c6:	61a3      	str	r3, [r4, #24]
 80011c8:	6923      	ldr	r3, [r4, #16]
 80011ca:	b953      	cbnz	r3, 80011e2 <__swsetup_r+0xc6>
 80011cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80011d4:	d1ba      	bne.n	800114c <__swsetup_r+0x30>
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	0792      	lsls	r2, r2, #30
 80011da:	bf58      	it	pl
 80011dc:	6963      	ldrpl	r3, [r4, #20]
 80011de:	60a3      	str	r3, [r4, #8]
 80011e0:	e7f2      	b.n	80011c8 <__swsetup_r+0xac>
 80011e2:	2000      	movs	r0, #0
 80011e4:	e7f7      	b.n	80011d6 <__swsetup_r+0xba>
 80011e6:	bf00      	nop
 80011e8:	20000020 	.word	0x20000020
 80011ec:	08002434 	.word	0x08002434
 80011f0:	08002454 	.word	0x08002454
 80011f4:	08002414 	.word	0x08002414

080011f8 <__sflush_r>:
 80011f8:	898a      	ldrh	r2, [r1, #12]
 80011fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fe:	4605      	mov	r5, r0
 8001200:	0710      	lsls	r0, r2, #28
 8001202:	460c      	mov	r4, r1
 8001204:	d458      	bmi.n	80012b8 <__sflush_r+0xc0>
 8001206:	684b      	ldr	r3, [r1, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dc05      	bgt.n	8001218 <__sflush_r+0x20>
 800120c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	dc02      	bgt.n	8001218 <__sflush_r+0x20>
 8001212:	2000      	movs	r0, #0
 8001214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800121a:	2e00      	cmp	r6, #0
 800121c:	d0f9      	beq.n	8001212 <__sflush_r+0x1a>
 800121e:	2300      	movs	r3, #0
 8001220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001224:	682f      	ldr	r7, [r5, #0]
 8001226:	6a21      	ldr	r1, [r4, #32]
 8001228:	602b      	str	r3, [r5, #0]
 800122a:	d032      	beq.n	8001292 <__sflush_r+0x9a>
 800122c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800122e:	89a3      	ldrh	r3, [r4, #12]
 8001230:	075a      	lsls	r2, r3, #29
 8001232:	d505      	bpl.n	8001240 <__sflush_r+0x48>
 8001234:	6863      	ldr	r3, [r4, #4]
 8001236:	1ac0      	subs	r0, r0, r3
 8001238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800123a:	b10b      	cbz	r3, 8001240 <__sflush_r+0x48>
 800123c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800123e:	1ac0      	subs	r0, r0, r3
 8001240:	2300      	movs	r3, #0
 8001242:	4602      	mov	r2, r0
 8001244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001246:	6a21      	ldr	r1, [r4, #32]
 8001248:	4628      	mov	r0, r5
 800124a:	47b0      	blx	r6
 800124c:	1c43      	adds	r3, r0, #1
 800124e:	89a3      	ldrh	r3, [r4, #12]
 8001250:	d106      	bne.n	8001260 <__sflush_r+0x68>
 8001252:	6829      	ldr	r1, [r5, #0]
 8001254:	291d      	cmp	r1, #29
 8001256:	d848      	bhi.n	80012ea <__sflush_r+0xf2>
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <__sflush_r+0x108>)
 800125a:	40ca      	lsrs	r2, r1
 800125c:	07d6      	lsls	r6, r2, #31
 800125e:	d544      	bpl.n	80012ea <__sflush_r+0xf2>
 8001260:	2200      	movs	r2, #0
 8001262:	6062      	str	r2, [r4, #4]
 8001264:	04d9      	lsls	r1, r3, #19
 8001266:	6922      	ldr	r2, [r4, #16]
 8001268:	6022      	str	r2, [r4, #0]
 800126a:	d504      	bpl.n	8001276 <__sflush_r+0x7e>
 800126c:	1c42      	adds	r2, r0, #1
 800126e:	d101      	bne.n	8001274 <__sflush_r+0x7c>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	b903      	cbnz	r3, 8001276 <__sflush_r+0x7e>
 8001274:	6560      	str	r0, [r4, #84]	; 0x54
 8001276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001278:	602f      	str	r7, [r5, #0]
 800127a:	2900      	cmp	r1, #0
 800127c:	d0c9      	beq.n	8001212 <__sflush_r+0x1a>
 800127e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001282:	4299      	cmp	r1, r3
 8001284:	d002      	beq.n	800128c <__sflush_r+0x94>
 8001286:	4628      	mov	r0, r5
 8001288:	f000 f994 	bl	80015b4 <_free_r>
 800128c:	2000      	movs	r0, #0
 800128e:	6360      	str	r0, [r4, #52]	; 0x34
 8001290:	e7c0      	b.n	8001214 <__sflush_r+0x1c>
 8001292:	2301      	movs	r3, #1
 8001294:	4628      	mov	r0, r5
 8001296:	47b0      	blx	r6
 8001298:	1c41      	adds	r1, r0, #1
 800129a:	d1c8      	bne.n	800122e <__sflush_r+0x36>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0c5      	beq.n	800122e <__sflush_r+0x36>
 80012a2:	2b1d      	cmp	r3, #29
 80012a4:	d001      	beq.n	80012aa <__sflush_r+0xb2>
 80012a6:	2b16      	cmp	r3, #22
 80012a8:	d101      	bne.n	80012ae <__sflush_r+0xb6>
 80012aa:	602f      	str	r7, [r5, #0]
 80012ac:	e7b1      	b.n	8001212 <__sflush_r+0x1a>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b4:	81a3      	strh	r3, [r4, #12]
 80012b6:	e7ad      	b.n	8001214 <__sflush_r+0x1c>
 80012b8:	690f      	ldr	r7, [r1, #16]
 80012ba:	2f00      	cmp	r7, #0
 80012bc:	d0a9      	beq.n	8001212 <__sflush_r+0x1a>
 80012be:	0793      	lsls	r3, r2, #30
 80012c0:	680e      	ldr	r6, [r1, #0]
 80012c2:	bf08      	it	eq
 80012c4:	694b      	ldreq	r3, [r1, #20]
 80012c6:	600f      	str	r7, [r1, #0]
 80012c8:	bf18      	it	ne
 80012ca:	2300      	movne	r3, #0
 80012cc:	eba6 0807 	sub.w	r8, r6, r7
 80012d0:	608b      	str	r3, [r1, #8]
 80012d2:	f1b8 0f00 	cmp.w	r8, #0
 80012d6:	dd9c      	ble.n	8001212 <__sflush_r+0x1a>
 80012d8:	4643      	mov	r3, r8
 80012da:	463a      	mov	r2, r7
 80012dc:	6a21      	ldr	r1, [r4, #32]
 80012de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012e0:	4628      	mov	r0, r5
 80012e2:	47b0      	blx	r6
 80012e4:	2800      	cmp	r0, #0
 80012e6:	dc06      	bgt.n	80012f6 <__sflush_r+0xfe>
 80012e8:	89a3      	ldrh	r3, [r4, #12]
 80012ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ee:	81a3      	strh	r3, [r4, #12]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	e78e      	b.n	8001214 <__sflush_r+0x1c>
 80012f6:	4407      	add	r7, r0
 80012f8:	eba8 0800 	sub.w	r8, r8, r0
 80012fc:	e7e9      	b.n	80012d2 <__sflush_r+0xda>
 80012fe:	bf00      	nop
 8001300:	20400001 	.word	0x20400001

08001304 <_fflush_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	690b      	ldr	r3, [r1, #16]
 8001308:	4605      	mov	r5, r0
 800130a:	460c      	mov	r4, r1
 800130c:	b1db      	cbz	r3, 8001346 <_fflush_r+0x42>
 800130e:	b118      	cbz	r0, 8001318 <_fflush_r+0x14>
 8001310:	6983      	ldr	r3, [r0, #24]
 8001312:	b90b      	cbnz	r3, 8001318 <_fflush_r+0x14>
 8001314:	f000 f860 	bl	80013d8 <__sinit>
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <_fflush_r+0x48>)
 800131a:	429c      	cmp	r4, r3
 800131c:	d109      	bne.n	8001332 <_fflush_r+0x2e>
 800131e:	686c      	ldr	r4, [r5, #4]
 8001320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001324:	b17b      	cbz	r3, 8001346 <_fflush_r+0x42>
 8001326:	4621      	mov	r1, r4
 8001328:	4628      	mov	r0, r5
 800132a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800132e:	f7ff bf63 	b.w	80011f8 <__sflush_r>
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_fflush_r+0x4c>)
 8001334:	429c      	cmp	r4, r3
 8001336:	d101      	bne.n	800133c <_fflush_r+0x38>
 8001338:	68ac      	ldr	r4, [r5, #8]
 800133a:	e7f1      	b.n	8001320 <_fflush_r+0x1c>
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <_fflush_r+0x50>)
 800133e:	429c      	cmp	r4, r3
 8001340:	bf08      	it	eq
 8001342:	68ec      	ldreq	r4, [r5, #12]
 8001344:	e7ec      	b.n	8001320 <_fflush_r+0x1c>
 8001346:	2000      	movs	r0, #0
 8001348:	bd38      	pop	{r3, r4, r5, pc}
 800134a:	bf00      	nop
 800134c:	08002434 	.word	0x08002434
 8001350:	08002454 	.word	0x08002454
 8001354:	08002414 	.word	0x08002414

08001358 <std>:
 8001358:	2300      	movs	r3, #0
 800135a:	b510      	push	{r4, lr}
 800135c:	4604      	mov	r4, r0
 800135e:	e9c0 3300 	strd	r3, r3, [r0]
 8001362:	6083      	str	r3, [r0, #8]
 8001364:	8181      	strh	r1, [r0, #12]
 8001366:	6643      	str	r3, [r0, #100]	; 0x64
 8001368:	81c2      	strh	r2, [r0, #14]
 800136a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800136e:	6183      	str	r3, [r0, #24]
 8001370:	4619      	mov	r1, r3
 8001372:	2208      	movs	r2, #8
 8001374:	305c      	adds	r0, #92	; 0x5c
 8001376:	f7ff fdfb 	bl	8000f70 <memset>
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <std+0x38>)
 800137c:	6263      	str	r3, [r4, #36]	; 0x24
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <std+0x3c>)
 8001380:	62a3      	str	r3, [r4, #40]	; 0x28
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <std+0x40>)
 8001384:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <std+0x44>)
 8001388:	6224      	str	r4, [r4, #32]
 800138a:	6323      	str	r3, [r4, #48]	; 0x30
 800138c:	bd10      	pop	{r4, pc}
 800138e:	bf00      	nop
 8001390:	08001cb5 	.word	0x08001cb5
 8001394:	08001cd7 	.word	0x08001cd7
 8001398:	08001d0f 	.word	0x08001d0f
 800139c:	08001d33 	.word	0x08001d33

080013a0 <_cleanup_r>:
 80013a0:	4901      	ldr	r1, [pc, #4]	; (80013a8 <_cleanup_r+0x8>)
 80013a2:	f000 b885 	b.w	80014b0 <_fwalk_reent>
 80013a6:	bf00      	nop
 80013a8:	08001305 	.word	0x08001305

080013ac <__sfmoreglue>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	1e4a      	subs	r2, r1, #1
 80013b0:	2568      	movs	r5, #104	; 0x68
 80013b2:	4355      	muls	r5, r2
 80013b4:	460e      	mov	r6, r1
 80013b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80013ba:	f000 f949 	bl	8001650 <_malloc_r>
 80013be:	4604      	mov	r4, r0
 80013c0:	b140      	cbz	r0, 80013d4 <__sfmoreglue+0x28>
 80013c2:	2100      	movs	r1, #0
 80013c4:	e9c0 1600 	strd	r1, r6, [r0]
 80013c8:	300c      	adds	r0, #12
 80013ca:	60a0      	str	r0, [r4, #8]
 80013cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80013d0:	f7ff fdce 	bl	8000f70 <memset>
 80013d4:	4620      	mov	r0, r4
 80013d6:	bd70      	pop	{r4, r5, r6, pc}

080013d8 <__sinit>:
 80013d8:	6983      	ldr	r3, [r0, #24]
 80013da:	b510      	push	{r4, lr}
 80013dc:	4604      	mov	r4, r0
 80013de:	bb33      	cbnz	r3, 800142e <__sinit+0x56>
 80013e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80013e4:	6503      	str	r3, [r0, #80]	; 0x50
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <__sinit+0x58>)
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <__sinit+0x5c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6282      	str	r2, [r0, #40]	; 0x28
 80013ee:	4298      	cmp	r0, r3
 80013f0:	bf04      	itt	eq
 80013f2:	2301      	moveq	r3, #1
 80013f4:	6183      	streq	r3, [r0, #24]
 80013f6:	f000 f81f 	bl	8001438 <__sfp>
 80013fa:	6060      	str	r0, [r4, #4]
 80013fc:	4620      	mov	r0, r4
 80013fe:	f000 f81b 	bl	8001438 <__sfp>
 8001402:	60a0      	str	r0, [r4, #8]
 8001404:	4620      	mov	r0, r4
 8001406:	f000 f817 	bl	8001438 <__sfp>
 800140a:	2200      	movs	r2, #0
 800140c:	60e0      	str	r0, [r4, #12]
 800140e:	2104      	movs	r1, #4
 8001410:	6860      	ldr	r0, [r4, #4]
 8001412:	f7ff ffa1 	bl	8001358 <std>
 8001416:	2201      	movs	r2, #1
 8001418:	2109      	movs	r1, #9
 800141a:	68a0      	ldr	r0, [r4, #8]
 800141c:	f7ff ff9c 	bl	8001358 <std>
 8001420:	2202      	movs	r2, #2
 8001422:	2112      	movs	r1, #18
 8001424:	68e0      	ldr	r0, [r4, #12]
 8001426:	f7ff ff97 	bl	8001358 <std>
 800142a:	2301      	movs	r3, #1
 800142c:	61a3      	str	r3, [r4, #24]
 800142e:	bd10      	pop	{r4, pc}
 8001430:	08002410 	.word	0x08002410
 8001434:	080013a1 	.word	0x080013a1

08001438 <__sfp>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <__sfp+0x70>)
 800143c:	681e      	ldr	r6, [r3, #0]
 800143e:	69b3      	ldr	r3, [r6, #24]
 8001440:	4607      	mov	r7, r0
 8001442:	b913      	cbnz	r3, 800144a <__sfp+0x12>
 8001444:	4630      	mov	r0, r6
 8001446:	f7ff ffc7 	bl	80013d8 <__sinit>
 800144a:	3648      	adds	r6, #72	; 0x48
 800144c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001450:	3b01      	subs	r3, #1
 8001452:	d503      	bpl.n	800145c <__sfp+0x24>
 8001454:	6833      	ldr	r3, [r6, #0]
 8001456:	b133      	cbz	r3, 8001466 <__sfp+0x2e>
 8001458:	6836      	ldr	r6, [r6, #0]
 800145a:	e7f7      	b.n	800144c <__sfp+0x14>
 800145c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001460:	b16d      	cbz	r5, 800147e <__sfp+0x46>
 8001462:	3468      	adds	r4, #104	; 0x68
 8001464:	e7f4      	b.n	8001450 <__sfp+0x18>
 8001466:	2104      	movs	r1, #4
 8001468:	4638      	mov	r0, r7
 800146a:	f7ff ff9f 	bl	80013ac <__sfmoreglue>
 800146e:	6030      	str	r0, [r6, #0]
 8001470:	2800      	cmp	r0, #0
 8001472:	d1f1      	bne.n	8001458 <__sfp+0x20>
 8001474:	230c      	movs	r3, #12
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4604      	mov	r4, r0
 800147a:	4620      	mov	r0, r4
 800147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <__sfp+0x74>)
 8001480:	6665      	str	r5, [r4, #100]	; 0x64
 8001482:	e9c4 5500 	strd	r5, r5, [r4]
 8001486:	60a5      	str	r5, [r4, #8]
 8001488:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800148c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001490:	2208      	movs	r2, #8
 8001492:	4629      	mov	r1, r5
 8001494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001498:	f7ff fd6a 	bl	8000f70 <memset>
 800149c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80014a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80014a4:	e7e9      	b.n	800147a <__sfp+0x42>
 80014a6:	bf00      	nop
 80014a8:	08002410 	.word	0x08002410
 80014ac:	ffff0001 	.word	0xffff0001

080014b0 <_fwalk_reent>:
 80014b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014b4:	4680      	mov	r8, r0
 80014b6:	4689      	mov	r9, r1
 80014b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80014bc:	2600      	movs	r6, #0
 80014be:	b914      	cbnz	r4, 80014c6 <_fwalk_reent+0x16>
 80014c0:	4630      	mov	r0, r6
 80014c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80014ca:	3f01      	subs	r7, #1
 80014cc:	d501      	bpl.n	80014d2 <_fwalk_reent+0x22>
 80014ce:	6824      	ldr	r4, [r4, #0]
 80014d0:	e7f5      	b.n	80014be <_fwalk_reent+0xe>
 80014d2:	89ab      	ldrh	r3, [r5, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d907      	bls.n	80014e8 <_fwalk_reent+0x38>
 80014d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014dc:	3301      	adds	r3, #1
 80014de:	d003      	beq.n	80014e8 <_fwalk_reent+0x38>
 80014e0:	4629      	mov	r1, r5
 80014e2:	4640      	mov	r0, r8
 80014e4:	47c8      	blx	r9
 80014e6:	4306      	orrs	r6, r0
 80014e8:	3568      	adds	r5, #104	; 0x68
 80014ea:	e7ee      	b.n	80014ca <_fwalk_reent+0x1a>

080014ec <__swhatbuf_r>:
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	460e      	mov	r6, r1
 80014f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014f4:	2900      	cmp	r1, #0
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	4614      	mov	r4, r2
 80014fa:	461d      	mov	r5, r3
 80014fc:	da07      	bge.n	800150e <__swhatbuf_r+0x22>
 80014fe:	2300      	movs	r3, #0
 8001500:	602b      	str	r3, [r5, #0]
 8001502:	89b3      	ldrh	r3, [r6, #12]
 8001504:	061a      	lsls	r2, r3, #24
 8001506:	d410      	bmi.n	800152a <__swhatbuf_r+0x3e>
 8001508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150c:	e00e      	b.n	800152c <__swhatbuf_r+0x40>
 800150e:	466a      	mov	r2, sp
 8001510:	f000 fc36 	bl	8001d80 <_fstat_r>
 8001514:	2800      	cmp	r0, #0
 8001516:	dbf2      	blt.n	80014fe <__swhatbuf_r+0x12>
 8001518:	9a01      	ldr	r2, [sp, #4]
 800151a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800151e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001522:	425a      	negs	r2, r3
 8001524:	415a      	adcs	r2, r3
 8001526:	602a      	str	r2, [r5, #0]
 8001528:	e7ee      	b.n	8001508 <__swhatbuf_r+0x1c>
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	2000      	movs	r0, #0
 800152e:	6023      	str	r3, [r4, #0]
 8001530:	b016      	add	sp, #88	; 0x58
 8001532:	bd70      	pop	{r4, r5, r6, pc}

08001534 <__smakebuf_r>:
 8001534:	898b      	ldrh	r3, [r1, #12]
 8001536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001538:	079d      	lsls	r5, r3, #30
 800153a:	4606      	mov	r6, r0
 800153c:	460c      	mov	r4, r1
 800153e:	d507      	bpl.n	8001550 <__smakebuf_r+0x1c>
 8001540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001544:	6023      	str	r3, [r4, #0]
 8001546:	6123      	str	r3, [r4, #16]
 8001548:	2301      	movs	r3, #1
 800154a:	6163      	str	r3, [r4, #20]
 800154c:	b002      	add	sp, #8
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	ab01      	add	r3, sp, #4
 8001552:	466a      	mov	r2, sp
 8001554:	f7ff ffca 	bl	80014ec <__swhatbuf_r>
 8001558:	9900      	ldr	r1, [sp, #0]
 800155a:	4605      	mov	r5, r0
 800155c:	4630      	mov	r0, r6
 800155e:	f000 f877 	bl	8001650 <_malloc_r>
 8001562:	b948      	cbnz	r0, 8001578 <__smakebuf_r+0x44>
 8001564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001568:	059a      	lsls	r2, r3, #22
 800156a:	d4ef      	bmi.n	800154c <__smakebuf_r+0x18>
 800156c:	f023 0303 	bic.w	r3, r3, #3
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	81a3      	strh	r3, [r4, #12]
 8001576:	e7e3      	b.n	8001540 <__smakebuf_r+0xc>
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <__smakebuf_r+0x7c>)
 800157a:	62b3      	str	r3, [r6, #40]	; 0x28
 800157c:	89a3      	ldrh	r3, [r4, #12]
 800157e:	6020      	str	r0, [r4, #0]
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	81a3      	strh	r3, [r4, #12]
 8001586:	9b00      	ldr	r3, [sp, #0]
 8001588:	6163      	str	r3, [r4, #20]
 800158a:	9b01      	ldr	r3, [sp, #4]
 800158c:	6120      	str	r0, [r4, #16]
 800158e:	b15b      	cbz	r3, 80015a8 <__smakebuf_r+0x74>
 8001590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001594:	4630      	mov	r0, r6
 8001596:	f000 fc05 	bl	8001da4 <_isatty_r>
 800159a:	b128      	cbz	r0, 80015a8 <__smakebuf_r+0x74>
 800159c:	89a3      	ldrh	r3, [r4, #12]
 800159e:	f023 0303 	bic.w	r3, r3, #3
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	81a3      	strh	r3, [r4, #12]
 80015a8:	89a3      	ldrh	r3, [r4, #12]
 80015aa:	431d      	orrs	r5, r3
 80015ac:	81a5      	strh	r5, [r4, #12]
 80015ae:	e7cd      	b.n	800154c <__smakebuf_r+0x18>
 80015b0:	080013a1 	.word	0x080013a1

080015b4 <_free_r>:
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	4605      	mov	r5, r0
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d045      	beq.n	8001648 <_free_r+0x94>
 80015bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015c0:	1f0c      	subs	r4, r1, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bfb8      	it	lt
 80015c6:	18e4      	addlt	r4, r4, r3
 80015c8:	f000 fc0e 	bl	8001de8 <__malloc_lock>
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <_free_r+0x98>)
 80015ce:	6813      	ldr	r3, [r2, #0]
 80015d0:	4610      	mov	r0, r2
 80015d2:	b933      	cbnz	r3, 80015e2 <_free_r+0x2e>
 80015d4:	6063      	str	r3, [r4, #4]
 80015d6:	6014      	str	r4, [r2, #0]
 80015d8:	4628      	mov	r0, r5
 80015da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015de:	f000 bc04 	b.w	8001dea <__malloc_unlock>
 80015e2:	42a3      	cmp	r3, r4
 80015e4:	d90c      	bls.n	8001600 <_free_r+0x4c>
 80015e6:	6821      	ldr	r1, [r4, #0]
 80015e8:	1862      	adds	r2, r4, r1
 80015ea:	4293      	cmp	r3, r2
 80015ec:	bf04      	itt	eq
 80015ee:	681a      	ldreq	r2, [r3, #0]
 80015f0:	685b      	ldreq	r3, [r3, #4]
 80015f2:	6063      	str	r3, [r4, #4]
 80015f4:	bf04      	itt	eq
 80015f6:	1852      	addeq	r2, r2, r1
 80015f8:	6022      	streq	r2, [r4, #0]
 80015fa:	6004      	str	r4, [r0, #0]
 80015fc:	e7ec      	b.n	80015d8 <_free_r+0x24>
 80015fe:	4613      	mov	r3, r2
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	b10a      	cbz	r2, 8001608 <_free_r+0x54>
 8001604:	42a2      	cmp	r2, r4
 8001606:	d9fa      	bls.n	80015fe <_free_r+0x4a>
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	1858      	adds	r0, r3, r1
 800160c:	42a0      	cmp	r0, r4
 800160e:	d10b      	bne.n	8001628 <_free_r+0x74>
 8001610:	6820      	ldr	r0, [r4, #0]
 8001612:	4401      	add	r1, r0
 8001614:	1858      	adds	r0, r3, r1
 8001616:	4282      	cmp	r2, r0
 8001618:	6019      	str	r1, [r3, #0]
 800161a:	d1dd      	bne.n	80015d8 <_free_r+0x24>
 800161c:	6810      	ldr	r0, [r2, #0]
 800161e:	6852      	ldr	r2, [r2, #4]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	4401      	add	r1, r0
 8001624:	6019      	str	r1, [r3, #0]
 8001626:	e7d7      	b.n	80015d8 <_free_r+0x24>
 8001628:	d902      	bls.n	8001630 <_free_r+0x7c>
 800162a:	230c      	movs	r3, #12
 800162c:	602b      	str	r3, [r5, #0]
 800162e:	e7d3      	b.n	80015d8 <_free_r+0x24>
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	1821      	adds	r1, r4, r0
 8001634:	428a      	cmp	r2, r1
 8001636:	bf04      	itt	eq
 8001638:	6811      	ldreq	r1, [r2, #0]
 800163a:	6852      	ldreq	r2, [r2, #4]
 800163c:	6062      	str	r2, [r4, #4]
 800163e:	bf04      	itt	eq
 8001640:	1809      	addeq	r1, r1, r0
 8001642:	6021      	streq	r1, [r4, #0]
 8001644:	605c      	str	r4, [r3, #4]
 8001646:	e7c7      	b.n	80015d8 <_free_r+0x24>
 8001648:	bd38      	pop	{r3, r4, r5, pc}
 800164a:	bf00      	nop
 800164c:	200000ac 	.word	0x200000ac

08001650 <_malloc_r>:
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	1ccd      	adds	r5, r1, #3
 8001654:	f025 0503 	bic.w	r5, r5, #3
 8001658:	3508      	adds	r5, #8
 800165a:	2d0c      	cmp	r5, #12
 800165c:	bf38      	it	cc
 800165e:	250c      	movcc	r5, #12
 8001660:	2d00      	cmp	r5, #0
 8001662:	4606      	mov	r6, r0
 8001664:	db01      	blt.n	800166a <_malloc_r+0x1a>
 8001666:	42a9      	cmp	r1, r5
 8001668:	d903      	bls.n	8001672 <_malloc_r+0x22>
 800166a:	230c      	movs	r3, #12
 800166c:	6033      	str	r3, [r6, #0]
 800166e:	2000      	movs	r0, #0
 8001670:	bd70      	pop	{r4, r5, r6, pc}
 8001672:	f000 fbb9 	bl	8001de8 <__malloc_lock>
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <_malloc_r+0xac>)
 8001678:	6814      	ldr	r4, [r2, #0]
 800167a:	4621      	mov	r1, r4
 800167c:	b991      	cbnz	r1, 80016a4 <_malloc_r+0x54>
 800167e:	4c20      	ldr	r4, [pc, #128]	; (8001700 <_malloc_r+0xb0>)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	b91b      	cbnz	r3, 800168c <_malloc_r+0x3c>
 8001684:	4630      	mov	r0, r6
 8001686:	f000 fb05 	bl	8001c94 <_sbrk_r>
 800168a:	6020      	str	r0, [r4, #0]
 800168c:	4629      	mov	r1, r5
 800168e:	4630      	mov	r0, r6
 8001690:	f000 fb00 	bl	8001c94 <_sbrk_r>
 8001694:	1c43      	adds	r3, r0, #1
 8001696:	d124      	bne.n	80016e2 <_malloc_r+0x92>
 8001698:	230c      	movs	r3, #12
 800169a:	6033      	str	r3, [r6, #0]
 800169c:	4630      	mov	r0, r6
 800169e:	f000 fba4 	bl	8001dea <__malloc_unlock>
 80016a2:	e7e4      	b.n	800166e <_malloc_r+0x1e>
 80016a4:	680b      	ldr	r3, [r1, #0]
 80016a6:	1b5b      	subs	r3, r3, r5
 80016a8:	d418      	bmi.n	80016dc <_malloc_r+0x8c>
 80016aa:	2b0b      	cmp	r3, #11
 80016ac:	d90f      	bls.n	80016ce <_malloc_r+0x7e>
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	50cd      	str	r5, [r1, r3]
 80016b2:	18cc      	adds	r4, r1, r3
 80016b4:	4630      	mov	r0, r6
 80016b6:	f000 fb98 	bl	8001dea <__malloc_unlock>
 80016ba:	f104 000b 	add.w	r0, r4, #11
 80016be:	1d23      	adds	r3, r4, #4
 80016c0:	f020 0007 	bic.w	r0, r0, #7
 80016c4:	1ac3      	subs	r3, r0, r3
 80016c6:	d0d3      	beq.n	8001670 <_malloc_r+0x20>
 80016c8:	425a      	negs	r2, r3
 80016ca:	50e2      	str	r2, [r4, r3]
 80016cc:	e7d0      	b.n	8001670 <_malloc_r+0x20>
 80016ce:	428c      	cmp	r4, r1
 80016d0:	684b      	ldr	r3, [r1, #4]
 80016d2:	bf16      	itet	ne
 80016d4:	6063      	strne	r3, [r4, #4]
 80016d6:	6013      	streq	r3, [r2, #0]
 80016d8:	460c      	movne	r4, r1
 80016da:	e7eb      	b.n	80016b4 <_malloc_r+0x64>
 80016dc:	460c      	mov	r4, r1
 80016de:	6849      	ldr	r1, [r1, #4]
 80016e0:	e7cc      	b.n	800167c <_malloc_r+0x2c>
 80016e2:	1cc4      	adds	r4, r0, #3
 80016e4:	f024 0403 	bic.w	r4, r4, #3
 80016e8:	42a0      	cmp	r0, r4
 80016ea:	d005      	beq.n	80016f8 <_malloc_r+0xa8>
 80016ec:	1a21      	subs	r1, r4, r0
 80016ee:	4630      	mov	r0, r6
 80016f0:	f000 fad0 	bl	8001c94 <_sbrk_r>
 80016f4:	3001      	adds	r0, #1
 80016f6:	d0cf      	beq.n	8001698 <_malloc_r+0x48>
 80016f8:	6025      	str	r5, [r4, #0]
 80016fa:	e7db      	b.n	80016b4 <_malloc_r+0x64>
 80016fc:	200000ac 	.word	0x200000ac
 8001700:	200000b0 	.word	0x200000b0

08001704 <__sfputc_r>:
 8001704:	6893      	ldr	r3, [r2, #8]
 8001706:	3b01      	subs	r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	b410      	push	{r4}
 800170c:	6093      	str	r3, [r2, #8]
 800170e:	da08      	bge.n	8001722 <__sfputc_r+0x1e>
 8001710:	6994      	ldr	r4, [r2, #24]
 8001712:	42a3      	cmp	r3, r4
 8001714:	db01      	blt.n	800171a <__sfputc_r+0x16>
 8001716:	290a      	cmp	r1, #10
 8001718:	d103      	bne.n	8001722 <__sfputc_r+0x1e>
 800171a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800171e:	f7ff bcab 	b.w	8001078 <__swbuf_r>
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	1c58      	adds	r0, r3, #1
 8001726:	6010      	str	r0, [r2, #0]
 8001728:	7019      	strb	r1, [r3, #0]
 800172a:	4608      	mov	r0, r1
 800172c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001730:	4770      	bx	lr

08001732 <__sfputs_r>:
 8001732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001734:	4606      	mov	r6, r0
 8001736:	460f      	mov	r7, r1
 8001738:	4614      	mov	r4, r2
 800173a:	18d5      	adds	r5, r2, r3
 800173c:	42ac      	cmp	r4, r5
 800173e:	d101      	bne.n	8001744 <__sfputs_r+0x12>
 8001740:	2000      	movs	r0, #0
 8001742:	e007      	b.n	8001754 <__sfputs_r+0x22>
 8001744:	463a      	mov	r2, r7
 8001746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800174a:	4630      	mov	r0, r6
 800174c:	f7ff ffda 	bl	8001704 <__sfputc_r>
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d1f3      	bne.n	800173c <__sfputs_r+0xa>
 8001754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001758 <_vfiprintf_r>:
 8001758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800175c:	460c      	mov	r4, r1
 800175e:	b09d      	sub	sp, #116	; 0x74
 8001760:	4617      	mov	r7, r2
 8001762:	461d      	mov	r5, r3
 8001764:	4606      	mov	r6, r0
 8001766:	b118      	cbz	r0, 8001770 <_vfiprintf_r+0x18>
 8001768:	6983      	ldr	r3, [r0, #24]
 800176a:	b90b      	cbnz	r3, 8001770 <_vfiprintf_r+0x18>
 800176c:	f7ff fe34 	bl	80013d8 <__sinit>
 8001770:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <_vfiprintf_r+0x20c>)
 8001772:	429c      	cmp	r4, r3
 8001774:	d158      	bne.n	8001828 <_vfiprintf_r+0xd0>
 8001776:	6874      	ldr	r4, [r6, #4]
 8001778:	89a3      	ldrh	r3, [r4, #12]
 800177a:	0718      	lsls	r0, r3, #28
 800177c:	d55e      	bpl.n	800183c <_vfiprintf_r+0xe4>
 800177e:	6923      	ldr	r3, [r4, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05b      	beq.n	800183c <_vfiprintf_r+0xe4>
 8001784:	2300      	movs	r3, #0
 8001786:	9309      	str	r3, [sp, #36]	; 0x24
 8001788:	2320      	movs	r3, #32
 800178a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800178e:	2330      	movs	r3, #48	; 0x30
 8001790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001794:	9503      	str	r5, [sp, #12]
 8001796:	f04f 0b01 	mov.w	fp, #1
 800179a:	46b8      	mov	r8, r7
 800179c:	4645      	mov	r5, r8
 800179e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80017a2:	b10b      	cbz	r3, 80017a8 <_vfiprintf_r+0x50>
 80017a4:	2b25      	cmp	r3, #37	; 0x25
 80017a6:	d154      	bne.n	8001852 <_vfiprintf_r+0xfa>
 80017a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80017ac:	d00b      	beq.n	80017c6 <_vfiprintf_r+0x6e>
 80017ae:	4653      	mov	r3, sl
 80017b0:	463a      	mov	r2, r7
 80017b2:	4621      	mov	r1, r4
 80017b4:	4630      	mov	r0, r6
 80017b6:	f7ff ffbc 	bl	8001732 <__sfputs_r>
 80017ba:	3001      	adds	r0, #1
 80017bc:	f000 80c2 	beq.w	8001944 <_vfiprintf_r+0x1ec>
 80017c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017c2:	4453      	add	r3, sl
 80017c4:	9309      	str	r3, [sp, #36]	; 0x24
 80017c6:	f898 3000 	ldrb.w	r3, [r8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80ba 	beq.w	8001944 <_vfiprintf_r+0x1ec>
 80017d0:	2300      	movs	r3, #0
 80017d2:	f04f 32ff 	mov.w	r2, #4294967295
 80017d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017da:	9304      	str	r3, [sp, #16]
 80017dc:	9307      	str	r3, [sp, #28]
 80017de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017e2:	931a      	str	r3, [sp, #104]	; 0x68
 80017e4:	46a8      	mov	r8, r5
 80017e6:	2205      	movs	r2, #5
 80017e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80017ec:	485e      	ldr	r0, [pc, #376]	; (8001968 <_vfiprintf_r+0x210>)
 80017ee:	f7fe fd0f 	bl	8000210 <memchr>
 80017f2:	9b04      	ldr	r3, [sp, #16]
 80017f4:	bb78      	cbnz	r0, 8001856 <_vfiprintf_r+0xfe>
 80017f6:	06d9      	lsls	r1, r3, #27
 80017f8:	bf44      	itt	mi
 80017fa:	2220      	movmi	r2, #32
 80017fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001800:	071a      	lsls	r2, r3, #28
 8001802:	bf44      	itt	mi
 8001804:	222b      	movmi	r2, #43	; 0x2b
 8001806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800180a:	782a      	ldrb	r2, [r5, #0]
 800180c:	2a2a      	cmp	r2, #42	; 0x2a
 800180e:	d02a      	beq.n	8001866 <_vfiprintf_r+0x10e>
 8001810:	9a07      	ldr	r2, [sp, #28]
 8001812:	46a8      	mov	r8, r5
 8001814:	2000      	movs	r0, #0
 8001816:	250a      	movs	r5, #10
 8001818:	4641      	mov	r1, r8
 800181a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800181e:	3b30      	subs	r3, #48	; 0x30
 8001820:	2b09      	cmp	r3, #9
 8001822:	d969      	bls.n	80018f8 <_vfiprintf_r+0x1a0>
 8001824:	b360      	cbz	r0, 8001880 <_vfiprintf_r+0x128>
 8001826:	e024      	b.n	8001872 <_vfiprintf_r+0x11a>
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <_vfiprintf_r+0x214>)
 800182a:	429c      	cmp	r4, r3
 800182c:	d101      	bne.n	8001832 <_vfiprintf_r+0xda>
 800182e:	68b4      	ldr	r4, [r6, #8]
 8001830:	e7a2      	b.n	8001778 <_vfiprintf_r+0x20>
 8001832:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <_vfiprintf_r+0x218>)
 8001834:	429c      	cmp	r4, r3
 8001836:	bf08      	it	eq
 8001838:	68f4      	ldreq	r4, [r6, #12]
 800183a:	e79d      	b.n	8001778 <_vfiprintf_r+0x20>
 800183c:	4621      	mov	r1, r4
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff fc6c 	bl	800111c <__swsetup_r>
 8001844:	2800      	cmp	r0, #0
 8001846:	d09d      	beq.n	8001784 <_vfiprintf_r+0x2c>
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	b01d      	add	sp, #116	; 0x74
 800184e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001852:	46a8      	mov	r8, r5
 8001854:	e7a2      	b.n	800179c <_vfiprintf_r+0x44>
 8001856:	4a44      	ldr	r2, [pc, #272]	; (8001968 <_vfiprintf_r+0x210>)
 8001858:	1a80      	subs	r0, r0, r2
 800185a:	fa0b f000 	lsl.w	r0, fp, r0
 800185e:	4318      	orrs	r0, r3
 8001860:	9004      	str	r0, [sp, #16]
 8001862:	4645      	mov	r5, r8
 8001864:	e7be      	b.n	80017e4 <_vfiprintf_r+0x8c>
 8001866:	9a03      	ldr	r2, [sp, #12]
 8001868:	1d11      	adds	r1, r2, #4
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	9103      	str	r1, [sp, #12]
 800186e:	2a00      	cmp	r2, #0
 8001870:	db01      	blt.n	8001876 <_vfiprintf_r+0x11e>
 8001872:	9207      	str	r2, [sp, #28]
 8001874:	e004      	b.n	8001880 <_vfiprintf_r+0x128>
 8001876:	4252      	negs	r2, r2
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	9207      	str	r2, [sp, #28]
 800187e:	9304      	str	r3, [sp, #16]
 8001880:	f898 3000 	ldrb.w	r3, [r8]
 8001884:	2b2e      	cmp	r3, #46	; 0x2e
 8001886:	d10e      	bne.n	80018a6 <_vfiprintf_r+0x14e>
 8001888:	f898 3001 	ldrb.w	r3, [r8, #1]
 800188c:	2b2a      	cmp	r3, #42	; 0x2a
 800188e:	d138      	bne.n	8001902 <_vfiprintf_r+0x1aa>
 8001890:	9b03      	ldr	r3, [sp, #12]
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	9203      	str	r2, [sp, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	bfb8      	it	lt
 800189c:	f04f 33ff 	movlt.w	r3, #4294967295
 80018a0:	f108 0802 	add.w	r8, r8, #2
 80018a4:	9305      	str	r3, [sp, #20]
 80018a6:	4d33      	ldr	r5, [pc, #204]	; (8001974 <_vfiprintf_r+0x21c>)
 80018a8:	f898 1000 	ldrb.w	r1, [r8]
 80018ac:	2203      	movs	r2, #3
 80018ae:	4628      	mov	r0, r5
 80018b0:	f7fe fcae 	bl	8000210 <memchr>
 80018b4:	b140      	cbz	r0, 80018c8 <_vfiprintf_r+0x170>
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	1b40      	subs	r0, r0, r5
 80018ba:	fa03 f000 	lsl.w	r0, r3, r0
 80018be:	9b04      	ldr	r3, [sp, #16]
 80018c0:	4303      	orrs	r3, r0
 80018c2:	f108 0801 	add.w	r8, r8, #1
 80018c6:	9304      	str	r3, [sp, #16]
 80018c8:	f898 1000 	ldrb.w	r1, [r8]
 80018cc:	482a      	ldr	r0, [pc, #168]	; (8001978 <_vfiprintf_r+0x220>)
 80018ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018d2:	2206      	movs	r2, #6
 80018d4:	f108 0701 	add.w	r7, r8, #1
 80018d8:	f7fe fc9a 	bl	8000210 <memchr>
 80018dc:	2800      	cmp	r0, #0
 80018de:	d037      	beq.n	8001950 <_vfiprintf_r+0x1f8>
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <_vfiprintf_r+0x224>)
 80018e2:	bb1b      	cbnz	r3, 800192c <_vfiprintf_r+0x1d4>
 80018e4:	9b03      	ldr	r3, [sp, #12]
 80018e6:	3307      	adds	r3, #7
 80018e8:	f023 0307 	bic.w	r3, r3, #7
 80018ec:	3308      	adds	r3, #8
 80018ee:	9303      	str	r3, [sp, #12]
 80018f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018f2:	444b      	add	r3, r9
 80018f4:	9309      	str	r3, [sp, #36]	; 0x24
 80018f6:	e750      	b.n	800179a <_vfiprintf_r+0x42>
 80018f8:	fb05 3202 	mla	r2, r5, r2, r3
 80018fc:	2001      	movs	r0, #1
 80018fe:	4688      	mov	r8, r1
 8001900:	e78a      	b.n	8001818 <_vfiprintf_r+0xc0>
 8001902:	2300      	movs	r3, #0
 8001904:	f108 0801 	add.w	r8, r8, #1
 8001908:	9305      	str	r3, [sp, #20]
 800190a:	4619      	mov	r1, r3
 800190c:	250a      	movs	r5, #10
 800190e:	4640      	mov	r0, r8
 8001910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001914:	3a30      	subs	r2, #48	; 0x30
 8001916:	2a09      	cmp	r2, #9
 8001918:	d903      	bls.n	8001922 <_vfiprintf_r+0x1ca>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0c3      	beq.n	80018a6 <_vfiprintf_r+0x14e>
 800191e:	9105      	str	r1, [sp, #20]
 8001920:	e7c1      	b.n	80018a6 <_vfiprintf_r+0x14e>
 8001922:	fb05 2101 	mla	r1, r5, r1, r2
 8001926:	2301      	movs	r3, #1
 8001928:	4680      	mov	r8, r0
 800192a:	e7f0      	b.n	800190e <_vfiprintf_r+0x1b6>
 800192c:	ab03      	add	r3, sp, #12
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4622      	mov	r2, r4
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <_vfiprintf_r+0x228>)
 8001934:	a904      	add	r1, sp, #16
 8001936:	4630      	mov	r0, r6
 8001938:	f3af 8000 	nop.w
 800193c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001940:	4681      	mov	r9, r0
 8001942:	d1d5      	bne.n	80018f0 <_vfiprintf_r+0x198>
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	065b      	lsls	r3, r3, #25
 8001948:	f53f af7e 	bmi.w	8001848 <_vfiprintf_r+0xf0>
 800194c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800194e:	e77d      	b.n	800184c <_vfiprintf_r+0xf4>
 8001950:	ab03      	add	r3, sp, #12
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	4622      	mov	r2, r4
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <_vfiprintf_r+0x228>)
 8001958:	a904      	add	r1, sp, #16
 800195a:	4630      	mov	r0, r6
 800195c:	f000 f888 	bl	8001a70 <_printf_i>
 8001960:	e7ec      	b.n	800193c <_vfiprintf_r+0x1e4>
 8001962:	bf00      	nop
 8001964:	08002434 	.word	0x08002434
 8001968:	08002474 	.word	0x08002474
 800196c:	08002454 	.word	0x08002454
 8001970:	08002414 	.word	0x08002414
 8001974:	0800247a 	.word	0x0800247a
 8001978:	0800247e 	.word	0x0800247e
 800197c:	00000000 	.word	0x00000000
 8001980:	08001733 	.word	0x08001733

08001984 <_printf_common>:
 8001984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001988:	4691      	mov	r9, r2
 800198a:	461f      	mov	r7, r3
 800198c:	688a      	ldr	r2, [r1, #8]
 800198e:	690b      	ldr	r3, [r1, #16]
 8001990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001994:	4293      	cmp	r3, r2
 8001996:	bfb8      	it	lt
 8001998:	4613      	movlt	r3, r2
 800199a:	f8c9 3000 	str.w	r3, [r9]
 800199e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019a2:	4606      	mov	r6, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	b112      	cbz	r2, 80019ae <_printf_common+0x2a>
 80019a8:	3301      	adds	r3, #1
 80019aa:	f8c9 3000 	str.w	r3, [r9]
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	0699      	lsls	r1, r3, #26
 80019b2:	bf42      	ittt	mi
 80019b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80019b8:	3302      	addmi	r3, #2
 80019ba:	f8c9 3000 	strmi.w	r3, [r9]
 80019be:	6825      	ldr	r5, [r4, #0]
 80019c0:	f015 0506 	ands.w	r5, r5, #6
 80019c4:	d107      	bne.n	80019d6 <_printf_common+0x52>
 80019c6:	f104 0a19 	add.w	sl, r4, #25
 80019ca:	68e3      	ldr	r3, [r4, #12]
 80019cc:	f8d9 2000 	ldr.w	r2, [r9]
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	42ab      	cmp	r3, r5
 80019d4:	dc28      	bgt.n	8001a28 <_printf_common+0xa4>
 80019d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	3300      	adds	r3, #0
 80019de:	bf18      	it	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	0692      	lsls	r2, r2, #26
 80019e4:	d42d      	bmi.n	8001a42 <_printf_common+0xbe>
 80019e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019ea:	4639      	mov	r1, r7
 80019ec:	4630      	mov	r0, r6
 80019ee:	47c0      	blx	r8
 80019f0:	3001      	adds	r0, #1
 80019f2:	d020      	beq.n	8001a36 <_printf_common+0xb2>
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	68e5      	ldr	r5, [r4, #12]
 80019f8:	f8d9 2000 	ldr.w	r2, [r9]
 80019fc:	f003 0306 	and.w	r3, r3, #6
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	bf08      	it	eq
 8001a04:	1aad      	subeq	r5, r5, r2
 8001a06:	68a3      	ldr	r3, [r4, #8]
 8001a08:	6922      	ldr	r2, [r4, #16]
 8001a0a:	bf0c      	ite	eq
 8001a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a10:	2500      	movne	r5, #0
 8001a12:	4293      	cmp	r3, r2
 8001a14:	bfc4      	itt	gt
 8001a16:	1a9b      	subgt	r3, r3, r2
 8001a18:	18ed      	addgt	r5, r5, r3
 8001a1a:	f04f 0900 	mov.w	r9, #0
 8001a1e:	341a      	adds	r4, #26
 8001a20:	454d      	cmp	r5, r9
 8001a22:	d11a      	bne.n	8001a5a <_printf_common+0xd6>
 8001a24:	2000      	movs	r0, #0
 8001a26:	e008      	b.n	8001a3a <_printf_common+0xb6>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	4652      	mov	r2, sl
 8001a2c:	4639      	mov	r1, r7
 8001a2e:	4630      	mov	r0, r6
 8001a30:	47c0      	blx	r8
 8001a32:	3001      	adds	r0, #1
 8001a34:	d103      	bne.n	8001a3e <_printf_common+0xba>
 8001a36:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a3e:	3501      	adds	r5, #1
 8001a40:	e7c3      	b.n	80019ca <_printf_common+0x46>
 8001a42:	18e1      	adds	r1, r4, r3
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	2030      	movs	r0, #48	; 0x30
 8001a48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a4c:	4422      	add	r2, r4
 8001a4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a56:	3302      	adds	r3, #2
 8001a58:	e7c5      	b.n	80019e6 <_printf_common+0x62>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	4639      	mov	r1, r7
 8001a60:	4630      	mov	r0, r6
 8001a62:	47c0      	blx	r8
 8001a64:	3001      	adds	r0, #1
 8001a66:	d0e6      	beq.n	8001a36 <_printf_common+0xb2>
 8001a68:	f109 0901 	add.w	r9, r9, #1
 8001a6c:	e7d8      	b.n	8001a20 <_printf_common+0x9c>
	...

08001a70 <_printf_i>:
 8001a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001a78:	460c      	mov	r4, r1
 8001a7a:	7e09      	ldrb	r1, [r1, #24]
 8001a7c:	b085      	sub	sp, #20
 8001a7e:	296e      	cmp	r1, #110	; 0x6e
 8001a80:	4617      	mov	r7, r2
 8001a82:	4606      	mov	r6, r0
 8001a84:	4698      	mov	r8, r3
 8001a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a88:	f000 80b3 	beq.w	8001bf2 <_printf_i+0x182>
 8001a8c:	d822      	bhi.n	8001ad4 <_printf_i+0x64>
 8001a8e:	2963      	cmp	r1, #99	; 0x63
 8001a90:	d036      	beq.n	8001b00 <_printf_i+0x90>
 8001a92:	d80a      	bhi.n	8001aaa <_printf_i+0x3a>
 8001a94:	2900      	cmp	r1, #0
 8001a96:	f000 80b9 	beq.w	8001c0c <_printf_i+0x19c>
 8001a9a:	2958      	cmp	r1, #88	; 0x58
 8001a9c:	f000 8083 	beq.w	8001ba6 <_printf_i+0x136>
 8001aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001aa4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001aa8:	e032      	b.n	8001b10 <_printf_i+0xa0>
 8001aaa:	2964      	cmp	r1, #100	; 0x64
 8001aac:	d001      	beq.n	8001ab2 <_printf_i+0x42>
 8001aae:	2969      	cmp	r1, #105	; 0x69
 8001ab0:	d1f6      	bne.n	8001aa0 <_printf_i+0x30>
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	6813      	ldr	r3, [r2, #0]
 8001ab6:	0605      	lsls	r5, r0, #24
 8001ab8:	f103 0104 	add.w	r1, r3, #4
 8001abc:	d52a      	bpl.n	8001b14 <_printf_i+0xa4>
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6011      	str	r1, [r2, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da03      	bge.n	8001ace <_printf_i+0x5e>
 8001ac6:	222d      	movs	r2, #45	; 0x2d
 8001ac8:	425b      	negs	r3, r3
 8001aca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001ace:	486f      	ldr	r0, [pc, #444]	; (8001c8c <_printf_i+0x21c>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	e039      	b.n	8001b48 <_printf_i+0xd8>
 8001ad4:	2973      	cmp	r1, #115	; 0x73
 8001ad6:	f000 809d 	beq.w	8001c14 <_printf_i+0x1a4>
 8001ada:	d808      	bhi.n	8001aee <_printf_i+0x7e>
 8001adc:	296f      	cmp	r1, #111	; 0x6f
 8001ade:	d020      	beq.n	8001b22 <_printf_i+0xb2>
 8001ae0:	2970      	cmp	r1, #112	; 0x70
 8001ae2:	d1dd      	bne.n	8001aa0 <_printf_i+0x30>
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	f043 0320 	orr.w	r3, r3, #32
 8001aea:	6023      	str	r3, [r4, #0]
 8001aec:	e003      	b.n	8001af6 <_printf_i+0x86>
 8001aee:	2975      	cmp	r1, #117	; 0x75
 8001af0:	d017      	beq.n	8001b22 <_printf_i+0xb2>
 8001af2:	2978      	cmp	r1, #120	; 0x78
 8001af4:	d1d4      	bne.n	8001aa0 <_printf_i+0x30>
 8001af6:	2378      	movs	r3, #120	; 0x78
 8001af8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001afc:	4864      	ldr	r0, [pc, #400]	; (8001c90 <_printf_i+0x220>)
 8001afe:	e055      	b.n	8001bac <_printf_i+0x13c>
 8001b00:	6813      	ldr	r3, [r2, #0]
 8001b02:	1d19      	adds	r1, r3, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6011      	str	r1, [r2, #0]
 8001b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b10:	2301      	movs	r3, #1
 8001b12:	e08c      	b.n	8001c2e <_printf_i+0x1be>
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6011      	str	r1, [r2, #0]
 8001b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b1c:	bf18      	it	ne
 8001b1e:	b21b      	sxthne	r3, r3
 8001b20:	e7cf      	b.n	8001ac2 <_printf_i+0x52>
 8001b22:	6813      	ldr	r3, [r2, #0]
 8001b24:	6825      	ldr	r5, [r4, #0]
 8001b26:	1d18      	adds	r0, r3, #4
 8001b28:	6010      	str	r0, [r2, #0]
 8001b2a:	0628      	lsls	r0, r5, #24
 8001b2c:	d501      	bpl.n	8001b32 <_printf_i+0xc2>
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	e002      	b.n	8001b38 <_printf_i+0xc8>
 8001b32:	0668      	lsls	r0, r5, #25
 8001b34:	d5fb      	bpl.n	8001b2e <_printf_i+0xbe>
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	4854      	ldr	r0, [pc, #336]	; (8001c8c <_printf_i+0x21c>)
 8001b3a:	296f      	cmp	r1, #111	; 0x6f
 8001b3c:	bf14      	ite	ne
 8001b3e:	220a      	movne	r2, #10
 8001b40:	2208      	moveq	r2, #8
 8001b42:	2100      	movs	r1, #0
 8001b44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b48:	6865      	ldr	r5, [r4, #4]
 8001b4a:	60a5      	str	r5, [r4, #8]
 8001b4c:	2d00      	cmp	r5, #0
 8001b4e:	f2c0 8095 	blt.w	8001c7c <_printf_i+0x20c>
 8001b52:	6821      	ldr	r1, [r4, #0]
 8001b54:	f021 0104 	bic.w	r1, r1, #4
 8001b58:	6021      	str	r1, [r4, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d13d      	bne.n	8001bda <_printf_i+0x16a>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	f040 808e 	bne.w	8001c80 <_printf_i+0x210>
 8001b64:	4665      	mov	r5, ip
 8001b66:	2a08      	cmp	r2, #8
 8001b68:	d10b      	bne.n	8001b82 <_printf_i+0x112>
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	07db      	lsls	r3, r3, #31
 8001b6e:	d508      	bpl.n	8001b82 <_printf_i+0x112>
 8001b70:	6923      	ldr	r3, [r4, #16]
 8001b72:	6862      	ldr	r2, [r4, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	bfde      	ittt	le
 8001b78:	2330      	movle	r3, #48	; 0x30
 8001b7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b82:	ebac 0305 	sub.w	r3, ip, r5
 8001b86:	6123      	str	r3, [r4, #16]
 8001b88:	f8cd 8000 	str.w	r8, [sp]
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	aa03      	add	r2, sp, #12
 8001b90:	4621      	mov	r1, r4
 8001b92:	4630      	mov	r0, r6
 8001b94:	f7ff fef6 	bl	8001984 <_printf_common>
 8001b98:	3001      	adds	r0, #1
 8001b9a:	d14d      	bne.n	8001c38 <_printf_i+0x1c8>
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	b005      	add	sp, #20
 8001ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ba6:	4839      	ldr	r0, [pc, #228]	; (8001c8c <_printf_i+0x21c>)
 8001ba8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001bac:	6813      	ldr	r3, [r2, #0]
 8001bae:	6821      	ldr	r1, [r4, #0]
 8001bb0:	1d1d      	adds	r5, r3, #4
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6015      	str	r5, [r2, #0]
 8001bb6:	060a      	lsls	r2, r1, #24
 8001bb8:	d50b      	bpl.n	8001bd2 <_printf_i+0x162>
 8001bba:	07ca      	lsls	r2, r1, #31
 8001bbc:	bf44      	itt	mi
 8001bbe:	f041 0120 	orrmi.w	r1, r1, #32
 8001bc2:	6021      	strmi	r1, [r4, #0]
 8001bc4:	b91b      	cbnz	r3, 8001bce <_printf_i+0x15e>
 8001bc6:	6822      	ldr	r2, [r4, #0]
 8001bc8:	f022 0220 	bic.w	r2, r2, #32
 8001bcc:	6022      	str	r2, [r4, #0]
 8001bce:	2210      	movs	r2, #16
 8001bd0:	e7b7      	b.n	8001b42 <_printf_i+0xd2>
 8001bd2:	064d      	lsls	r5, r1, #25
 8001bd4:	bf48      	it	mi
 8001bd6:	b29b      	uxthmi	r3, r3
 8001bd8:	e7ef      	b.n	8001bba <_printf_i+0x14a>
 8001bda:	4665      	mov	r5, ip
 8001bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001be0:	fb02 3311 	mls	r3, r2, r1, r3
 8001be4:	5cc3      	ldrb	r3, [r0, r3]
 8001be6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001bea:	460b      	mov	r3, r1
 8001bec:	2900      	cmp	r1, #0
 8001bee:	d1f5      	bne.n	8001bdc <_printf_i+0x16c>
 8001bf0:	e7b9      	b.n	8001b66 <_printf_i+0xf6>
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	6825      	ldr	r5, [r4, #0]
 8001bf6:	6961      	ldr	r1, [r4, #20]
 8001bf8:	1d18      	adds	r0, r3, #4
 8001bfa:	6010      	str	r0, [r2, #0]
 8001bfc:	0628      	lsls	r0, r5, #24
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	d501      	bpl.n	8001c06 <_printf_i+0x196>
 8001c02:	6019      	str	r1, [r3, #0]
 8001c04:	e002      	b.n	8001c0c <_printf_i+0x19c>
 8001c06:	066a      	lsls	r2, r5, #25
 8001c08:	d5fb      	bpl.n	8001c02 <_printf_i+0x192>
 8001c0a:	8019      	strh	r1, [r3, #0]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6123      	str	r3, [r4, #16]
 8001c10:	4665      	mov	r5, ip
 8001c12:	e7b9      	b.n	8001b88 <_printf_i+0x118>
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	1d19      	adds	r1, r3, #4
 8001c18:	6011      	str	r1, [r2, #0]
 8001c1a:	681d      	ldr	r5, [r3, #0]
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4628      	mov	r0, r5
 8001c22:	f7fe faf5 	bl	8000210 <memchr>
 8001c26:	b108      	cbz	r0, 8001c2c <_printf_i+0x1bc>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	6060      	str	r0, [r4, #4]
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	6123      	str	r3, [r4, #16]
 8001c30:	2300      	movs	r3, #0
 8001c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c36:	e7a7      	b.n	8001b88 <_printf_i+0x118>
 8001c38:	6923      	ldr	r3, [r4, #16]
 8001c3a:	462a      	mov	r2, r5
 8001c3c:	4639      	mov	r1, r7
 8001c3e:	4630      	mov	r0, r6
 8001c40:	47c0      	blx	r8
 8001c42:	3001      	adds	r0, #1
 8001c44:	d0aa      	beq.n	8001b9c <_printf_i+0x12c>
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	079b      	lsls	r3, r3, #30
 8001c4a:	d413      	bmi.n	8001c74 <_printf_i+0x204>
 8001c4c:	68e0      	ldr	r0, [r4, #12]
 8001c4e:	9b03      	ldr	r3, [sp, #12]
 8001c50:	4298      	cmp	r0, r3
 8001c52:	bfb8      	it	lt
 8001c54:	4618      	movlt	r0, r3
 8001c56:	e7a3      	b.n	8001ba0 <_printf_i+0x130>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	4639      	mov	r1, r7
 8001c5e:	4630      	mov	r0, r6
 8001c60:	47c0      	blx	r8
 8001c62:	3001      	adds	r0, #1
 8001c64:	d09a      	beq.n	8001b9c <_printf_i+0x12c>
 8001c66:	3501      	adds	r5, #1
 8001c68:	68e3      	ldr	r3, [r4, #12]
 8001c6a:	9a03      	ldr	r2, [sp, #12]
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	42ab      	cmp	r3, r5
 8001c70:	dcf2      	bgt.n	8001c58 <_printf_i+0x1e8>
 8001c72:	e7eb      	b.n	8001c4c <_printf_i+0x1dc>
 8001c74:	2500      	movs	r5, #0
 8001c76:	f104 0919 	add.w	r9, r4, #25
 8001c7a:	e7f5      	b.n	8001c68 <_printf_i+0x1f8>
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ac      	bne.n	8001bda <_printf_i+0x16a>
 8001c80:	7803      	ldrb	r3, [r0, #0]
 8001c82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c8a:	e76c      	b.n	8001b66 <_printf_i+0xf6>
 8001c8c:	08002485 	.word	0x08002485
 8001c90:	08002496 	.word	0x08002496

08001c94 <_sbrk_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4c06      	ldr	r4, [pc, #24]	; (8001cb0 <_sbrk_r+0x1c>)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	4605      	mov	r5, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	6023      	str	r3, [r4, #0]
 8001ca0:	f000 f9bc 	bl	800201c <_sbrk>
 8001ca4:	1c43      	adds	r3, r0, #1
 8001ca6:	d102      	bne.n	8001cae <_sbrk_r+0x1a>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	b103      	cbz	r3, 8001cae <_sbrk_r+0x1a>
 8001cac:	602b      	str	r3, [r5, #0]
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
 8001cb0:	200001ac 	.word	0x200001ac

08001cb4 <__sread>:
 8001cb4:	b510      	push	{r4, lr}
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cbc:	f000 f896 	bl	8001dec <_read_r>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	bfab      	itete	ge
 8001cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8001cc8:	181b      	addge	r3, r3, r0
 8001cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cce:	bfac      	ite	ge
 8001cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cd2:	81a3      	strhlt	r3, [r4, #12]
 8001cd4:	bd10      	pop	{r4, pc}

08001cd6 <__swrite>:
 8001cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cda:	461f      	mov	r7, r3
 8001cdc:	898b      	ldrh	r3, [r1, #12]
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	4616      	mov	r6, r2
 8001ce6:	d505      	bpl.n	8001cf4 <__swrite+0x1e>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	2200      	movs	r2, #0
 8001cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cf0:	f000 f868 	bl	8001dc4 <_lseek_r>
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cfe:	81a3      	strh	r3, [r4, #12]
 8001d00:	4632      	mov	r2, r6
 8001d02:	463b      	mov	r3, r7
 8001d04:	4628      	mov	r0, r5
 8001d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d0a:	f000 b817 	b.w	8001d3c <_write_r>

08001d0e <__sseek>:
 8001d0e:	b510      	push	{r4, lr}
 8001d10:	460c      	mov	r4, r1
 8001d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d16:	f000 f855 	bl	8001dc4 <_lseek_r>
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	bf15      	itete	ne
 8001d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d2a:	81a3      	strheq	r3, [r4, #12]
 8001d2c:	bf18      	it	ne
 8001d2e:	81a3      	strhne	r3, [r4, #12]
 8001d30:	bd10      	pop	{r4, pc}

08001d32 <__sclose>:
 8001d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d36:	f000 b813 	b.w	8001d60 <_close_r>
	...

08001d3c <_write_r>:
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4c07      	ldr	r4, [pc, #28]	; (8001d5c <_write_r+0x20>)
 8001d40:	4605      	mov	r5, r0
 8001d42:	4608      	mov	r0, r1
 8001d44:	4611      	mov	r1, r2
 8001d46:	2200      	movs	r2, #0
 8001d48:	6022      	str	r2, [r4, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f000 f911 	bl	8001f72 <_write>
 8001d50:	1c43      	adds	r3, r0, #1
 8001d52:	d102      	bne.n	8001d5a <_write_r+0x1e>
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	b103      	cbz	r3, 8001d5a <_write_r+0x1e>
 8001d58:	602b      	str	r3, [r5, #0]
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	200001ac 	.word	0x200001ac

08001d60 <_close_r>:
 8001d60:	b538      	push	{r3, r4, r5, lr}
 8001d62:	4c06      	ldr	r4, [pc, #24]	; (8001d7c <_close_r+0x1c>)
 8001d64:	2300      	movs	r3, #0
 8001d66:	4605      	mov	r5, r0
 8001d68:	4608      	mov	r0, r1
 8001d6a:	6023      	str	r3, [r4, #0]
 8001d6c:	f000 f930 	bl	8001fd0 <_close>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d102      	bne.n	8001d7a <_close_r+0x1a>
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	b103      	cbz	r3, 8001d7a <_close_r+0x1a>
 8001d78:	602b      	str	r3, [r5, #0]
 8001d7a:	bd38      	pop	{r3, r4, r5, pc}
 8001d7c:	200001ac 	.word	0x200001ac

08001d80 <_fstat_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	4c07      	ldr	r4, [pc, #28]	; (8001da0 <_fstat_r+0x20>)
 8001d84:	2300      	movs	r3, #0
 8001d86:	4605      	mov	r5, r0
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	f000 f98a 	bl	80020a6 <_fstat>
 8001d92:	1c43      	adds	r3, r0, #1
 8001d94:	d102      	bne.n	8001d9c <_fstat_r+0x1c>
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	b103      	cbz	r3, 8001d9c <_fstat_r+0x1c>
 8001d9a:	602b      	str	r3, [r5, #0]
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
 8001d9e:	bf00      	nop
 8001da0:	200001ac 	.word	0x200001ac

08001da4 <_isatty_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	4c06      	ldr	r4, [pc, #24]	; (8001dc0 <_isatty_r+0x1c>)
 8001da8:	2300      	movs	r3, #0
 8001daa:	4605      	mov	r5, r0
 8001dac:	4608      	mov	r0, r1
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	f000 fade 	bl	8002370 <_isatty>
 8001db4:	1c43      	adds	r3, r0, #1
 8001db6:	d102      	bne.n	8001dbe <_isatty_r+0x1a>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	b103      	cbz	r3, 8001dbe <_isatty_r+0x1a>
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}
 8001dc0:	200001ac 	.word	0x200001ac

08001dc4 <_lseek_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4c07      	ldr	r4, [pc, #28]	; (8001de4 <_lseek_r+0x20>)
 8001dc8:	4605      	mov	r5, r0
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	6022      	str	r2, [r4, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f000 f8bb 	bl	8001f4e <_lseek>
 8001dd8:	1c43      	adds	r3, r0, #1
 8001dda:	d102      	bne.n	8001de2 <_lseek_r+0x1e>
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	b103      	cbz	r3, 8001de2 <_lseek_r+0x1e>
 8001de0:	602b      	str	r3, [r5, #0]
 8001de2:	bd38      	pop	{r3, r4, r5, pc}
 8001de4:	200001ac 	.word	0x200001ac

08001de8 <__malloc_lock>:
 8001de8:	4770      	bx	lr

08001dea <__malloc_unlock>:
 8001dea:	4770      	bx	lr

08001dec <_read_r>:
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4c07      	ldr	r4, [pc, #28]	; (8001e0c <_read_r+0x20>)
 8001df0:	4605      	mov	r5, r0
 8001df2:	4608      	mov	r0, r1
 8001df4:	4611      	mov	r1, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	6022      	str	r2, [r4, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f000 f850 	bl	8001ea0 <_read>
 8001e00:	1c43      	adds	r3, r0, #1
 8001e02:	d102      	bne.n	8001e0a <_read_r+0x1e>
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	b103      	cbz	r3, 8001e0a <_read_r+0x1e>
 8001e08:	602b      	str	r3, [r5, #0]
 8001e0a:	bd38      	pop	{r3, r4, r5, pc}
 8001e0c:	200001ac 	.word	0x200001ac

08001e10 <findslot>:
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <findslot+0x2c>)
 8001e12:	b510      	push	{r4, lr}
 8001e14:	4604      	mov	r4, r0
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	b118      	cbz	r0, 8001e22 <findslot+0x12>
 8001e1a:	6983      	ldr	r3, [r0, #24]
 8001e1c:	b90b      	cbnz	r3, 8001e22 <findslot+0x12>
 8001e1e:	f7ff fadb 	bl	80013d8 <__sinit>
 8001e22:	2c13      	cmp	r4, #19
 8001e24:	d807      	bhi.n	8001e36 <findslot+0x26>
 8001e26:	4806      	ldr	r0, [pc, #24]	; (8001e40 <findslot+0x30>)
 8001e28:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	d002      	beq.n	8001e36 <findslot+0x26>
 8001e30:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001e34:	bd10      	pop	{r4, pc}
 8001e36:	2000      	movs	r0, #0
 8001e38:	e7fc      	b.n	8001e34 <findslot+0x24>
 8001e3a:	bf00      	nop
 8001e3c:	20000020 	.word	0x20000020
 8001e40:	200000c4 	.word	0x200000c4

08001e44 <checkerror>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	1c43      	adds	r3, r0, #1
 8001e48:	4605      	mov	r5, r0
 8001e4a:	d109      	bne.n	8001e60 <checkerror+0x1c>
 8001e4c:	f000 faac 	bl	80023a8 <__errno>
 8001e50:	2413      	movs	r4, #19
 8001e52:	4606      	mov	r6, r0
 8001e54:	2700      	movs	r7, #0
 8001e56:	4620      	mov	r0, r4
 8001e58:	4639      	mov	r1, r7
 8001e5a:	beab      	bkpt	0x00ab
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	6034      	str	r4, [r6, #0]
 8001e60:	4628      	mov	r0, r5
 8001e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e64 <error>:
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e66:	4605      	mov	r5, r0
 8001e68:	f000 fa9e 	bl	80023a8 <__errno>
 8001e6c:	2413      	movs	r4, #19
 8001e6e:	4606      	mov	r6, r0
 8001e70:	2700      	movs	r7, #0
 8001e72:	4620      	mov	r0, r4
 8001e74:	4639      	mov	r1, r7
 8001e76:	beab      	bkpt	0x00ab
 8001e78:	4604      	mov	r4, r0
 8001e7a:	6034      	str	r4, [r6, #0]
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e80 <_swiread>:
 8001e80:	b530      	push	{r4, r5, lr}
 8001e82:	b085      	sub	sp, #20
 8001e84:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e88:	9203      	str	r2, [sp, #12]
 8001e8a:	2406      	movs	r4, #6
 8001e8c:	ad01      	add	r5, sp, #4
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	beab      	bkpt	0x00ab
 8001e94:	4604      	mov	r4, r0
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ffd4 	bl	8001e44 <checkerror>
 8001e9c:	b005      	add	sp, #20
 8001e9e:	bd30      	pop	{r4, r5, pc}

08001ea0 <_read>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	460e      	mov	r6, r1
 8001ea4:	4615      	mov	r5, r2
 8001ea6:	f7ff ffb3 	bl	8001e10 <findslot>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	b930      	cbnz	r0, 8001ebc <_read+0x1c>
 8001eae:	f000 fa7b 	bl	80023a8 <__errno>
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	6003      	str	r3, [r0, #0]
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	462a      	mov	r2, r5
 8001ebe:	4631      	mov	r1, r6
 8001ec0:	6800      	ldr	r0, [r0, #0]
 8001ec2:	f7ff ffdd 	bl	8001e80 <_swiread>
 8001ec6:	1c43      	adds	r3, r0, #1
 8001ec8:	bf1f      	itttt	ne
 8001eca:	6863      	ldrne	r3, [r4, #4]
 8001ecc:	1a28      	subne	r0, r5, r0
 8001ece:	181b      	addne	r3, r3, r0
 8001ed0:	6063      	strne	r3, [r4, #4]
 8001ed2:	e7f2      	b.n	8001eba <_read+0x1a>

08001ed4 <_swilseek>:
 8001ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	4616      	mov	r6, r2
 8001eda:	f7ff ff99 	bl	8001e10 <findslot>
 8001ede:	4605      	mov	r5, r0
 8001ee0:	b940      	cbnz	r0, 8001ef4 <_swilseek+0x20>
 8001ee2:	f000 fa61 	bl	80023a8 <__errno>
 8001ee6:	2309      	movs	r3, #9
 8001ee8:	6003      	str	r3, [r0, #0]
 8001eea:	f04f 34ff 	mov.w	r4, #4294967295
 8001eee:	4620      	mov	r0, r4
 8001ef0:	b003      	add	sp, #12
 8001ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef4:	2e02      	cmp	r6, #2
 8001ef6:	d903      	bls.n	8001f00 <_swilseek+0x2c>
 8001ef8:	f000 fa56 	bl	80023a8 <__errno>
 8001efc:	2316      	movs	r3, #22
 8001efe:	e7f3      	b.n	8001ee8 <_swilseek+0x14>
 8001f00:	2e01      	cmp	r6, #1
 8001f02:	d112      	bne.n	8001f2a <_swilseek+0x56>
 8001f04:	6843      	ldr	r3, [r0, #4]
 8001f06:	18e4      	adds	r4, r4, r3
 8001f08:	d4f6      	bmi.n	8001ef8 <_swilseek+0x24>
 8001f0a:	682b      	ldr	r3, [r5, #0]
 8001f0c:	260a      	movs	r6, #10
 8001f0e:	e9cd 3400 	strd	r3, r4, [sp]
 8001f12:	466f      	mov	r7, sp
 8001f14:	4630      	mov	r0, r6
 8001f16:	4639      	mov	r1, r7
 8001f18:	beab      	bkpt	0x00ab
 8001f1a:	4606      	mov	r6, r0
 8001f1c:	4630      	mov	r0, r6
 8001f1e:	f7ff ff91 	bl	8001e44 <checkerror>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	dbe1      	blt.n	8001eea <_swilseek+0x16>
 8001f26:	606c      	str	r4, [r5, #4]
 8001f28:	e7e1      	b.n	8001eee <_swilseek+0x1a>
 8001f2a:	2e02      	cmp	r6, #2
 8001f2c:	d1ed      	bne.n	8001f0a <_swilseek+0x36>
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001f36:	260c      	movs	r6, #12
 8001f38:	4630      	mov	r0, r6
 8001f3a:	4639      	mov	r1, r7
 8001f3c:	beab      	bkpt	0x00ab
 8001f3e:	4606      	mov	r6, r0
 8001f40:	4630      	mov	r0, r6
 8001f42:	f7ff ff7f 	bl	8001e44 <checkerror>
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	d0cf      	beq.n	8001eea <_swilseek+0x16>
 8001f4a:	4404      	add	r4, r0
 8001f4c:	e7dd      	b.n	8001f0a <_swilseek+0x36>

08001f4e <_lseek>:
 8001f4e:	f7ff bfc1 	b.w	8001ed4 <_swilseek>

08001f52 <_swiwrite>:
 8001f52:	b530      	push	{r4, r5, lr}
 8001f54:	b085      	sub	sp, #20
 8001f56:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f5a:	9203      	str	r2, [sp, #12]
 8001f5c:	2405      	movs	r4, #5
 8001f5e:	ad01      	add	r5, sp, #4
 8001f60:	4620      	mov	r0, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	beab      	bkpt	0x00ab
 8001f66:	4604      	mov	r4, r0
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f7ff ff6b 	bl	8001e44 <checkerror>
 8001f6e:	b005      	add	sp, #20
 8001f70:	bd30      	pop	{r4, r5, pc}

08001f72 <_write>:
 8001f72:	b570      	push	{r4, r5, r6, lr}
 8001f74:	460e      	mov	r6, r1
 8001f76:	4615      	mov	r5, r2
 8001f78:	f7ff ff4a 	bl	8001e10 <findslot>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	b930      	cbnz	r0, 8001f8e <_write+0x1c>
 8001f80:	f000 fa12 	bl	80023a8 <__errno>
 8001f84:	2309      	movs	r3, #9
 8001f86:	6003      	str	r3, [r0, #0]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
 8001f8e:	462a      	mov	r2, r5
 8001f90:	4631      	mov	r1, r6
 8001f92:	6800      	ldr	r0, [r0, #0]
 8001f94:	f7ff ffdd 	bl	8001f52 <_swiwrite>
 8001f98:	1e02      	subs	r2, r0, #0
 8001f9a:	dbf5      	blt.n	8001f88 <_write+0x16>
 8001f9c:	6863      	ldr	r3, [r4, #4]
 8001f9e:	1aa8      	subs	r0, r5, r2
 8001fa0:	4403      	add	r3, r0
 8001fa2:	42aa      	cmp	r2, r5
 8001fa4:	6063      	str	r3, [r4, #4]
 8001fa6:	d1f1      	bne.n	8001f8c <_write+0x1a>
 8001fa8:	2000      	movs	r0, #0
 8001faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001fae:	f7ff bf59 	b.w	8001e64 <error>

08001fb2 <_swiclose>:
 8001fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fb4:	ad02      	add	r5, sp, #8
 8001fb6:	2402      	movs	r4, #2
 8001fb8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	beab      	bkpt	0x00ab
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff3d 	bl	8001e44 <checkerror>
 8001fca:	b003      	add	sp, #12
 8001fcc:	bd30      	pop	{r4, r5, pc}
	...

08001fd0 <_close>:
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4605      	mov	r5, r0
 8001fd4:	f7ff ff1c 	bl	8001e10 <findslot>
 8001fd8:	4604      	mov	r4, r0
 8001fda:	b930      	cbnz	r0, 8001fea <_close+0x1a>
 8001fdc:	f000 f9e4 	bl	80023a8 <__errno>
 8001fe0:	2309      	movs	r3, #9
 8001fe2:	6003      	str	r3, [r0, #0]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	bd38      	pop	{r3, r4, r5, pc}
 8001fea:	3d01      	subs	r5, #1
 8001fec:	2d01      	cmp	r5, #1
 8001fee:	d809      	bhi.n	8002004 <_close+0x34>
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <_close+0x48>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d104      	bne.n	8002004 <_close+0x34>
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	6003      	str	r3, [r0, #0]
 8002000:	2000      	movs	r0, #0
 8002002:	e7f1      	b.n	8001fe8 <_close+0x18>
 8002004:	6820      	ldr	r0, [r4, #0]
 8002006:	f7ff ffd4 	bl	8001fb2 <_swiclose>
 800200a:	2800      	cmp	r0, #0
 800200c:	d1ec      	bne.n	8001fe8 <_close+0x18>
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	6023      	str	r3, [r4, #0]
 8002014:	e7e8      	b.n	8001fe8 <_close+0x18>
 8002016:	bf00      	nop
 8002018:	200000c4 	.word	0x200000c4

0800201c <_sbrk>:
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <_sbrk+0x38>)
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	b510      	push	{r4, lr}
 8002022:	4602      	mov	r2, r0
 8002024:	b909      	cbnz	r1, 800202a <_sbrk+0xe>
 8002026:	490c      	ldr	r1, [pc, #48]	; (8002058 <_sbrk+0x3c>)
 8002028:	6019      	str	r1, [r3, #0]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	4669      	mov	r1, sp
 800202e:	4402      	add	r2, r0
 8002030:	428a      	cmp	r2, r1
 8002032:	d806      	bhi.n	8002042 <_sbrk+0x26>
 8002034:	4909      	ldr	r1, [pc, #36]	; (800205c <_sbrk+0x40>)
 8002036:	4c0a      	ldr	r4, [pc, #40]	; (8002060 <_sbrk+0x44>)
 8002038:	6809      	ldr	r1, [r1, #0]
 800203a:	42a1      	cmp	r1, r4
 800203c:	d008      	beq.n	8002050 <_sbrk+0x34>
 800203e:	428a      	cmp	r2, r1
 8002040:	d906      	bls.n	8002050 <_sbrk+0x34>
 8002042:	f000 f9b1 	bl	80023a8 <__errno>
 8002046:	230c      	movs	r3, #12
 8002048:	6003      	str	r3, [r0, #0]
 800204a:	f04f 30ff 	mov.w	r0, #4294967295
 800204e:	bd10      	pop	{r4, pc}
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e7fc      	b.n	800204e <_sbrk+0x32>
 8002054:	200000b4 	.word	0x200000b4
 8002058:	200001b0 	.word	0x200001b0
 800205c:	20000084 	.word	0x20000084
 8002060:	cafedead 	.word	0xcafedead

08002064 <_swistat>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	460c      	mov	r4, r1
 8002068:	f7ff fed2 	bl	8001e10 <findslot>
 800206c:	4606      	mov	r6, r0
 800206e:	b930      	cbnz	r0, 800207e <_swistat+0x1a>
 8002070:	f000 f99a 	bl	80023a8 <__errno>
 8002074:	2309      	movs	r3, #9
 8002076:	6003      	str	r3, [r0, #0]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002084:	6063      	str	r3, [r4, #4]
 8002086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208a:	6463      	str	r3, [r4, #68]	; 0x44
 800208c:	250c      	movs	r5, #12
 800208e:	4628      	mov	r0, r5
 8002090:	4631      	mov	r1, r6
 8002092:	beab      	bkpt	0x00ab
 8002094:	4605      	mov	r5, r0
 8002096:	4628      	mov	r0, r5
 8002098:	f7ff fed4 	bl	8001e44 <checkerror>
 800209c:	1c43      	adds	r3, r0, #1
 800209e:	bf1c      	itt	ne
 80020a0:	6120      	strne	r0, [r4, #16]
 80020a2:	2000      	movne	r0, #0
 80020a4:	e7ea      	b.n	800207c <_swistat+0x18>

080020a6 <_fstat>:
 80020a6:	460b      	mov	r3, r1
 80020a8:	b510      	push	{r4, lr}
 80020aa:	2100      	movs	r1, #0
 80020ac:	4604      	mov	r4, r0
 80020ae:	2258      	movs	r2, #88	; 0x58
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff5d 	bl	8000f70 <memset>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4620      	mov	r0, r4
 80020ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020be:	f7ff bfd1 	b.w	8002064 <_swistat>

080020c2 <_stat>:
 80020c2:	b538      	push	{r3, r4, r5, lr}
 80020c4:	460d      	mov	r5, r1
 80020c6:	4604      	mov	r4, r0
 80020c8:	2258      	movs	r2, #88	; 0x58
 80020ca:	2100      	movs	r1, #0
 80020cc:	4628      	mov	r0, r5
 80020ce:	f7fe ff4f 	bl	8000f70 <memset>
 80020d2:	4620      	mov	r0, r4
 80020d4:	2100      	movs	r1, #0
 80020d6:	f000 f811 	bl	80020fc <_swiopen>
 80020da:	1c43      	adds	r3, r0, #1
 80020dc:	4604      	mov	r4, r0
 80020de:	d00b      	beq.n	80020f8 <_stat+0x36>
 80020e0:	686b      	ldr	r3, [r5, #4]
 80020e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80020e6:	606b      	str	r3, [r5, #4]
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7ff ffbb 	bl	8002064 <_swistat>
 80020ee:	4605      	mov	r5, r0
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff ff6d 	bl	8001fd0 <_close>
 80020f6:	462c      	mov	r4, r5
 80020f8:	4620      	mov	r0, r4
 80020fa:	bd38      	pop	{r3, r4, r5, pc}

080020fc <_swiopen>:
 80020fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <_swiopen+0xb4>)
 8002102:	b096      	sub	sp, #88	; 0x58
 8002104:	4682      	mov	sl, r0
 8002106:	460e      	mov	r6, r1
 8002108:	2500      	movs	r5, #0
 800210a:	4698      	mov	r8, r3
 800210c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002110:	1c61      	adds	r1, r4, #1
 8002112:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002116:	d036      	beq.n	8002186 <_swiopen+0x8a>
 8002118:	3501      	adds	r5, #1
 800211a:	2d14      	cmp	r5, #20
 800211c:	d1f6      	bne.n	800210c <_swiopen+0x10>
 800211e:	f000 f943 	bl	80023a8 <__errno>
 8002122:	2318      	movs	r3, #24
 8002124:	6003      	str	r3, [r0, #0]
 8002126:	f04f 34ff 	mov.w	r4, #4294967295
 800212a:	e03c      	b.n	80021a6 <_swiopen+0xaa>
 800212c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002130:	f240 6301 	movw	r3, #1537	; 0x601
 8002134:	07b2      	lsls	r2, r6, #30
 8002136:	bf48      	it	mi
 8002138:	f044 0402 	orrmi.w	r4, r4, #2
 800213c:	421e      	tst	r6, r3
 800213e:	bf18      	it	ne
 8002140:	f044 0404 	orrne.w	r4, r4, #4
 8002144:	0733      	lsls	r3, r6, #28
 8002146:	bf48      	it	mi
 8002148:	f024 0404 	bicmi.w	r4, r4, #4
 800214c:	4650      	mov	r0, sl
 800214e:	bf48      	it	mi
 8002150:	f044 0408 	orrmi.w	r4, r4, #8
 8002154:	f8cd a000 	str.w	sl, [sp]
 8002158:	f7fe f8aa 	bl	80002b0 <strlen>
 800215c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002160:	2401      	movs	r4, #1
 8002162:	4620      	mov	r0, r4
 8002164:	4649      	mov	r1, r9
 8002166:	beab      	bkpt	0x00ab
 8002168:	4604      	mov	r4, r0
 800216a:	2c00      	cmp	r4, #0
 800216c:	db06      	blt.n	800217c <_swiopen+0x80>
 800216e:	4447      	add	r7, r8
 8002170:	2300      	movs	r3, #0
 8002172:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	462c      	mov	r4, r5
 800217a:	e014      	b.n	80021a6 <_swiopen+0xaa>
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff fe71 	bl	8001e64 <error>
 8002182:	4604      	mov	r4, r0
 8002184:	e00f      	b.n	80021a6 <_swiopen+0xaa>
 8002186:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800218a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800218e:	46e9      	mov	r9, sp
 8002190:	d1cc      	bne.n	800212c <_swiopen+0x30>
 8002192:	4649      	mov	r1, r9
 8002194:	4650      	mov	r0, sl
 8002196:	f7ff ff94 	bl	80020c2 <_stat>
 800219a:	3001      	adds	r0, #1
 800219c:	d0c6      	beq.n	800212c <_swiopen+0x30>
 800219e:	f000 f903 	bl	80023a8 <__errno>
 80021a2:	2311      	movs	r3, #17
 80021a4:	6003      	str	r3, [r0, #0]
 80021a6:	4620      	mov	r0, r4
 80021a8:	b016      	add	sp, #88	; 0x58
 80021aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ae:	bf00      	nop
 80021b0:	200000c4 	.word	0x200000c4

080021b4 <_get_semihosting_exts>:
 80021b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80021b8:	4607      	mov	r7, r0
 80021ba:	4688      	mov	r8, r1
 80021bc:	4829      	ldr	r0, [pc, #164]	; (8002264 <_get_semihosting_exts+0xb0>)
 80021be:	2100      	movs	r1, #0
 80021c0:	4615      	mov	r5, r2
 80021c2:	f7ff ff9b 	bl	80020fc <_swiopen>
 80021c6:	462a      	mov	r2, r5
 80021c8:	4604      	mov	r4, r0
 80021ca:	2100      	movs	r1, #0
 80021cc:	4638      	mov	r0, r7
 80021ce:	f7fe fecf 	bl	8000f70 <memset>
 80021d2:	1c63      	adds	r3, r4, #1
 80021d4:	d015      	beq.n	8002202 <_get_semihosting_exts+0x4e>
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff fe1a 	bl	8001e10 <findslot>
 80021dc:	260c      	movs	r6, #12
 80021de:	4681      	mov	r9, r0
 80021e0:	4630      	mov	r0, r6
 80021e2:	4649      	mov	r1, r9
 80021e4:	beab      	bkpt	0x00ab
 80021e6:	4606      	mov	r6, r0
 80021e8:	4630      	mov	r0, r6
 80021ea:	f7ff fe2b 	bl	8001e44 <checkerror>
 80021ee:	2803      	cmp	r0, #3
 80021f0:	dd02      	ble.n	80021f8 <_get_semihosting_exts+0x44>
 80021f2:	3803      	subs	r0, #3
 80021f4:	42a8      	cmp	r0, r5
 80021f6:	dc08      	bgt.n	800220a <_get_semihosting_exts+0x56>
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff fee9 	bl	8001fd0 <_close>
 80021fe:	f04f 34ff 	mov.w	r4, #4294967295
 8002202:	4620      	mov	r0, r4
 8002204:	b003      	add	sp, #12
 8002206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800220a:	2204      	movs	r2, #4
 800220c:	eb0d 0102 	add.w	r1, sp, r2
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fe45 	bl	8001ea0 <_read>
 8002216:	2803      	cmp	r0, #3
 8002218:	ddee      	ble.n	80021f8 <_get_semihosting_exts+0x44>
 800221a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800221e:	2b53      	cmp	r3, #83	; 0x53
 8002220:	d1ea      	bne.n	80021f8 <_get_semihosting_exts+0x44>
 8002222:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002226:	2b48      	cmp	r3, #72	; 0x48
 8002228:	d1e6      	bne.n	80021f8 <_get_semihosting_exts+0x44>
 800222a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800222e:	2b46      	cmp	r3, #70	; 0x46
 8002230:	d1e2      	bne.n	80021f8 <_get_semihosting_exts+0x44>
 8002232:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002236:	2b42      	cmp	r3, #66	; 0x42
 8002238:	d1de      	bne.n	80021f8 <_get_semihosting_exts+0x44>
 800223a:	2201      	movs	r2, #1
 800223c:	4641      	mov	r1, r8
 800223e:	4620      	mov	r0, r4
 8002240:	f7ff fe48 	bl	8001ed4 <_swilseek>
 8002244:	2800      	cmp	r0, #0
 8002246:	dbd7      	blt.n	80021f8 <_get_semihosting_exts+0x44>
 8002248:	462a      	mov	r2, r5
 800224a:	4639      	mov	r1, r7
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff fe27 	bl	8001ea0 <_read>
 8002252:	4605      	mov	r5, r0
 8002254:	4620      	mov	r0, r4
 8002256:	f7ff febb 	bl	8001fd0 <_close>
 800225a:	4628      	mov	r0, r5
 800225c:	f7ff fdf2 	bl	8001e44 <checkerror>
 8002260:	4604      	mov	r4, r0
 8002262:	e7ce      	b.n	8002202 <_get_semihosting_exts+0x4e>
 8002264:	080024a7 	.word	0x080024a7

08002268 <initialise_semihosting_exts>:
 8002268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800226a:	4d0a      	ldr	r5, [pc, #40]	; (8002294 <initialise_semihosting_exts+0x2c>)
 800226c:	4c0a      	ldr	r4, [pc, #40]	; (8002298 <initialise_semihosting_exts+0x30>)
 800226e:	2100      	movs	r1, #0
 8002270:	2201      	movs	r2, #1
 8002272:	a801      	add	r0, sp, #4
 8002274:	6029      	str	r1, [r5, #0]
 8002276:	6022      	str	r2, [r4, #0]
 8002278:	f7ff ff9c 	bl	80021b4 <_get_semihosting_exts>
 800227c:	2800      	cmp	r0, #0
 800227e:	dd07      	ble.n	8002290 <initialise_semihosting_exts+0x28>
 8002280:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002284:	f003 0201 	and.w	r2, r3, #1
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	602a      	str	r2, [r5, #0]
 800228e:	6023      	str	r3, [r4, #0]
 8002290:	b003      	add	sp, #12
 8002292:	bd30      	pop	{r4, r5, pc}
 8002294:	20000088 	.word	0x20000088
 8002298:	2000008c 	.word	0x2000008c

0800229c <_has_ext_stdout_stderr>:
 800229c:	b510      	push	{r4, lr}
 800229e:	4c04      	ldr	r4, [pc, #16]	; (80022b0 <_has_ext_stdout_stderr+0x14>)
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	2a00      	cmp	r2, #0
 80022a4:	da01      	bge.n	80022aa <_has_ext_stdout_stderr+0xe>
 80022a6:	f7ff ffdf 	bl	8002268 <initialise_semihosting_exts>
 80022aa:	6820      	ldr	r0, [r4, #0]
 80022ac:	bd10      	pop	{r4, pc}
 80022ae:	bf00      	nop
 80022b0:	2000008c 	.word	0x2000008c

080022b4 <initialise_monitor_handles>:
 80022b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b8:	b085      	sub	sp, #20
 80022ba:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800236c <initialise_monitor_handles+0xb8>
 80022be:	f8cd 9004 	str.w	r9, [sp, #4]
 80022c2:	2303      	movs	r3, #3
 80022c4:	2400      	movs	r4, #0
 80022c6:	9303      	str	r3, [sp, #12]
 80022c8:	f10d 0804 	add.w	r8, sp, #4
 80022cc:	9402      	str	r4, [sp, #8]
 80022ce:	2501      	movs	r5, #1
 80022d0:	4628      	mov	r0, r5
 80022d2:	4641      	mov	r1, r8
 80022d4:	beab      	bkpt	0x00ab
 80022d6:	4605      	mov	r5, r0
 80022d8:	4e20      	ldr	r6, [pc, #128]	; (800235c <initialise_monitor_handles+0xa8>)
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <initialise_monitor_handles+0xac>)
 80022dc:	6035      	str	r5, [r6, #0]
 80022de:	4623      	mov	r3, r4
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	4614      	mov	r4, r2
 80022e6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80022ea:	3301      	adds	r3, #1
 80022ec:	2b14      	cmp	r3, #20
 80022ee:	d1fa      	bne.n	80022e6 <initialise_monitor_handles+0x32>
 80022f0:	f7ff ffd4 	bl	800229c <_has_ext_stdout_stderr>
 80022f4:	4d1b      	ldr	r5, [pc, #108]	; (8002364 <initialise_monitor_handles+0xb0>)
 80022f6:	b1d0      	cbz	r0, 800232e <initialise_monitor_handles+0x7a>
 80022f8:	f04f 0a03 	mov.w	sl, #3
 80022fc:	2304      	movs	r3, #4
 80022fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8002302:	2701      	movs	r7, #1
 8002304:	f8cd a00c 	str.w	sl, [sp, #12]
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	4638      	mov	r0, r7
 800230c:	4641      	mov	r1, r8
 800230e:	beab      	bkpt	0x00ab
 8002310:	4683      	mov	fp, r0
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <initialise_monitor_handles+0xb4>)
 8002314:	f8cd 9004 	str.w	r9, [sp, #4]
 8002318:	f8c3 b000 	str.w	fp, [r3]
 800231c:	2308      	movs	r3, #8
 800231e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002322:	9302      	str	r3, [sp, #8]
 8002324:	4638      	mov	r0, r7
 8002326:	4641      	mov	r1, r8
 8002328:	beab      	bkpt	0x00ab
 800232a:	4607      	mov	r7, r0
 800232c:	602f      	str	r7, [r5, #0]
 800232e:	682b      	ldr	r3, [r5, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	bf02      	ittt	eq
 8002334:	4b0c      	ldreq	r3, [pc, #48]	; (8002368 <initialise_monitor_handles+0xb4>)
 8002336:	681b      	ldreq	r3, [r3, #0]
 8002338:	602b      	streq	r3, [r5, #0]
 800233a:	6833      	ldr	r3, [r6, #0]
 800233c:	6023      	str	r3, [r4, #0]
 800233e:	2600      	movs	r6, #0
 8002340:	6066      	str	r6, [r4, #4]
 8002342:	f7ff ffab 	bl	800229c <_has_ext_stdout_stderr>
 8002346:	b130      	cbz	r0, 8002356 <initialise_monitor_handles+0xa2>
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <initialise_monitor_handles+0xb4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002356:	b005      	add	sp, #20
 8002358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800235c:	200000bc 	.word	0x200000bc
 8002360:	200000c4 	.word	0x200000c4
 8002364:	200000b8 	.word	0x200000b8
 8002368:	200000c0 	.word	0x200000c0
 800236c:	080024bd 	.word	0x080024bd

08002370 <_isatty>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	f7ff fd4d 	bl	8001e10 <findslot>
 8002376:	2509      	movs	r5, #9
 8002378:	4604      	mov	r4, r0
 800237a:	b920      	cbnz	r0, 8002386 <_isatty+0x16>
 800237c:	f000 f814 	bl	80023a8 <__errno>
 8002380:	6005      	str	r5, [r0, #0]
 8002382:	4620      	mov	r0, r4
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	4628      	mov	r0, r5
 8002388:	4621      	mov	r1, r4
 800238a:	beab      	bkpt	0x00ab
 800238c:	4604      	mov	r4, r0
 800238e:	2c01      	cmp	r4, #1
 8002390:	d0f7      	beq.n	8002382 <_isatty+0x12>
 8002392:	f000 f809 	bl	80023a8 <__errno>
 8002396:	2400      	movs	r4, #0
 8002398:	4606      	mov	r6, r0
 800239a:	2513      	movs	r5, #19
 800239c:	4628      	mov	r0, r5
 800239e:	4621      	mov	r1, r4
 80023a0:	beab      	bkpt	0x00ab
 80023a2:	4605      	mov	r5, r0
 80023a4:	6035      	str	r5, [r6, #0]
 80023a6:	e7ec      	b.n	8002382 <_isatty+0x12>

080023a8 <__errno>:
 80023a8:	4b01      	ldr	r3, [pc, #4]	; (80023b0 <__errno+0x8>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000020 	.word	0x20000020

080023b4 <_init>:
 80023b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023b6:	bf00      	nop
 80023b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ba:	bc08      	pop	{r3}
 80023bc:	469e      	mov	lr, r3
 80023be:	4770      	bx	lr

080023c0 <_fini>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr
