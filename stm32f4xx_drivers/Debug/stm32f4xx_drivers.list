
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800238c  0800238c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800238c  0800238c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800238c  0800238c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08002404  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002404  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c71  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000528  00000000  00000000  00021d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a0  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000223e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000022e4  00000000  00000000  00022548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013d1  00000000  00000000  0002482c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000984b  00000000  00000000  00025bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001104  00000000  00000000  0002f4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800228c 	.word	0x0800228c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800228c 	.word	0x0800228c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <delay>:
#define ANALOG_PIN4					4
#define LED_Pin 					9


void delay(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000/2 ; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <delay+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	0003d08f 	.word	0x0003d08f

080002ec <SPI2_GPIO_Init>:
//PB14 --> MISO
//PB13 --> SCLK
//PB12 --> NSS
// ALT function mode: 5
void SPI2_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx=GPIOB;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <SPI2_GPIO_Init+0x58>)
 80002f4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 80002f6:	2302      	movs	r3, #2
 80002f8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFuncMode= 5;
 80002fa:	2305      	movs	r3, #5
 80002fc:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 80002fe:	2300      	movs	r3, #0
 8000300:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PU;
 8000302:	2301      	movs	r3, #1
 8000304:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000306:	2302      	movs	r3, #2
 8000308:	72bb      	strb	r3, [r7, #10]

	//sclk pin
	//TO DO: use different pins
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 800030a:	230d      	movs	r3, #13
 800030c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fbbf 	bl	8000a94 <GPIO_Init>
	//TO DO: use different pins
	//MOSI pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_15;
 8000316:	230f      	movs	r3, #15
 8000318:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fbb9 	bl	8000a94 <GPIO_Init>
	//MISO pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_14;
 8000322:	230e      	movs	r3, #14
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fbb3 	bl	8000a94 <GPIO_Init>
	//NSS pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_12;
 800032e:	230c      	movs	r3, #12
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fbad 	bl	8000a94 <GPIO_Init>



}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020400 	.word	0x40020400

08000348 <SPI2_Init>:

//init SPI2 peripheral
void SPI2_Init(void){
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx=SPI2;
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <SPI2_Init+0x38>)
 8000350:	603b      	str	r3, [r7, #0]
	SPI2handle.SPI_Config.SPI_Busconfig=SPI_BUS_CONFIG_FD;
 8000352:	2301      	movs	r3, #1
 8000354:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPI_Config.SPI_Devicemode=SPI_DEVICE_MASTER;
 8000356:	2301      	movs	r3, #1
 8000358:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_Speed=SPI_SCLK_SPEED_DIV8;//generates 2 Mhz
 800035a:	2302      	movs	r3, #2
 800035c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_Config.SPI_DFF=SPI_DFF_8BITS;
 800035e:	2300      	movs	r3, #0
 8000360:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPI_Config.SPI_CPOL=SPI_CPOL_LOW;
 8000362:	2300      	movs	r3, #0
 8000364:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_CPHA=SPI_CPPHA_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPI_Config.SPI_SSM=SPI_SSM_DI;//disable SW slave management. Will use HW for this exercise
 800036a:	2300      	movs	r3, #0
 800036c:	727b      	strb	r3, [r7, #9]
	SPI_Init(&SPI2handle);
 800036e:	463b      	mov	r3, r7
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f98f 	bl	8000694 <SPI_Init>
}
 8000376:	bf00      	nop
 8000378:	3720      	adds	r7, #32
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40003800 	.word	0x40003800

08000384 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//button configuration
	GpioBtn.pGPIOx =GPIOC;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <GPIO_ButtonInit+0x2c>)
 800038c:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 800038e:	230d      	movs	r3, #13
 8000390:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IN;
 8000392:	2300      	movs	r3, #0
 8000394:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000396:	2302      	movs	r3, #2
 8000398:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800039a:	2300      	movs	r3, #0
 800039c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fb77 	bl	8000a94 <GPIO_Init>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40020800 	.word	0x40020800

080003b4 <SPI_Verifyresponse>:


uint8_t SPI_Verifyresponse(uint8_t response)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	if(response==0xF5)
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	2bf5      	cmp	r3, #245	; 0xf5
 80003c2:	d101      	bne.n	80003c8 <SPI_Verifyresponse+0x14>
	{
		return 1;
 80003c4:	2301      	movs	r3, #1
 80003c6:	e000      	b.n	80003ca <SPI_Verifyresponse+0x16>
	}

	return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
	...

080003d8 <main>:
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0


	uint8_t dummy_write = 0xFF;
 80003de:	23ff      	movs	r3, #255	; 0xff
 80003e0:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read;
	uint8_t	ackbyte;
	uint8_t analog_read;
	uint8_t args[2];

	initialise_monitor_handles();//semihosting for using printing in eclipse console
 80003e2:	f001 fed3 	bl	800218c <initialise_monitor_handles>

	printf("application is running.\n");
 80003e6:	485a      	ldr	r0, [pc, #360]	; (8000550 <main+0x178>)
 80003e8:	f000 fdaa 	bl	8000f40 <puts>

	GPIO_ButtonInit();
 80003ec:	f7ff ffca 	bl	8000384 <GPIO_ButtonInit>
	SPI2_GPIO_Init();
 80003f0:	f7ff ff7c 	bl	80002ec <SPI2_GPIO_Init>
	SPI2_Init();
 80003f4:	f7ff ffa8 	bl	8000348 <SPI2_Init>
	 * NSS output enable (SSM=0,SSOE = 1): this configuration is only used when the
	 * MCU is set as master. The NSS pin is managed by the hardware. The NSS signal
	 * is driven low as soon as the SPI is enabled in master mode (SPE=1), and is kept
	 * low until the SPI is disabled (SPE =0).
	 */
	SPI_SSIConfig(SPI2, DISABLE);
 80003f8:	2100      	movs	r1, #0
 80003fa:	4856      	ldr	r0, [pc, #344]	; (8000554 <main+0x17c>)
 80003fc:	f000 f9c1 	bl	8000782 <SPI_SSIConfig>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	4854      	ldr	r0, [pc, #336]	; (8000554 <main+0x17c>)
 8000404:	f000 f9d9 	bl	80007ba <SPI_SSOEConfig>

	while(1)
	{
		//send spi when reading LOW from button
		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 8000408:	bf00      	nop
 800040a:	210d      	movs	r1, #13
 800040c:	4852      	ldr	r0, [pc, #328]	; (8000558 <main+0x180>)
 800040e:	f000 fce1 	bl	8000dd4 <GPIO_ReadFromInputPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b01      	cmp	r3, #1
 8000416:	d0f8      	beq.n	800040a <main+0x32>
		delay();//debounce prevention
 8000418:	f7ff ff52 	bl	80002c0 <delay>

		//enable SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800041c:	2101      	movs	r1, #1
 800041e:	484d      	ldr	r0, [pc, #308]	; (8000554 <main+0x17c>)
 8000420:	f000 f993 	bl	800074a <SPI_PeripheralControl>


		//1.)send LED control command
		uint8_t commandcode= COMMAND_LED_CTRL;
 8000424:	2350      	movs	r3, #80	; 0x50
 8000426:	71fb      	strb	r3, [r7, #7]
		SPI_SendData(SPI2, &commandcode, 1);
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	4849      	ldr	r0, [pc, #292]	; (8000554 <main+0x17c>)
 8000430:	f000 f9f3 	bl	800081a <SPI_SendData>
		//dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000434:	f107 030e 	add.w	r3, r7, #14
 8000438:	2201      	movs	r2, #1
 800043a:	4619      	mov	r1, r3
 800043c:	4845      	ldr	r0, [pc, #276]	; (8000554 <main+0x17c>)
 800043e:	f000 fa22 	bl	8000886 <SPI_ReceiveData>

		//Receive ack byte
		//SPI communication will not occur on its own unless data is being sent from master.
		//therefore we need to send a dummy byte to push the data from the slave to master
		SPI_SendData(SPI2, &dummy_write, 1);
 8000442:	f107 030f 	add.w	r3, r7, #15
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	4842      	ldr	r0, [pc, #264]	; (8000554 <main+0x17c>)
 800044c:	f000 f9e5 	bl	800081a <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000450:	f107 030d 	add.w	r3, r7, #13
 8000454:	2201      	movs	r2, #1
 8000456:	4619      	mov	r1, r3
 8000458:	483e      	ldr	r0, [pc, #248]	; (8000554 <main+0x17c>)
 800045a:	f000 fa14 	bl	8000886 <SPI_ReceiveData>

		//verify ack and then send arguments for led ccontrol
		if (SPI_Verifyresponse(&ackbyte))
 800045e:	f107 030d 	add.w	r3, r7, #13
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ffa5 	bl	80003b4 <SPI_Verifyresponse>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d00a      	beq.n	8000486 <main+0xae>
		{
			args[0]=LED_Pin;
 8000470:	2309      	movs	r3, #9
 8000472:	723b      	strb	r3, [r7, #8]
			args[1]=LED_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	727b      	strb	r3, [r7, #9]
			SPI_SendData(SPI2, args, 2);
 8000478:	f107 0308 	add.w	r3, r7, #8
 800047c:	2202      	movs	r2, #2
 800047e:	4619      	mov	r1, r3
 8000480:	4834      	ldr	r0, [pc, #208]	; (8000554 <main+0x17c>)
 8000482:	f000 f9ca 	bl	800081a <SPI_SendData>
		}


		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 8000486:	bf00      	nop
 8000488:	210d      	movs	r1, #13
 800048a:	4833      	ldr	r0, [pc, #204]	; (8000558 <main+0x180>)
 800048c:	f000 fca2 	bl	8000dd4 <GPIO_ReadFromInputPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b01      	cmp	r3, #1
 8000494:	d0f8      	beq.n	8000488 <main+0xb0>
		delay();
 8000496:	f7ff ff13 	bl	80002c0 <delay>


		//2.) send sensor read command
		commandcode= COMMAND_SENSOR_READ;
 800049a:	2351      	movs	r3, #81	; 0x51
 800049c:	71fb      	strb	r3, [r7, #7]
		SPI_SendData(SPI2, &commandcode, 1);
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	482b      	ldr	r0, [pc, #172]	; (8000554 <main+0x17c>)
 80004a6:	f000 f9b8 	bl	800081a <SPI_SendData>
		//dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004aa:	f107 030e 	add.w	r3, r7, #14
 80004ae:	2201      	movs	r2, #1
 80004b0:	4619      	mov	r1, r3
 80004b2:	4828      	ldr	r0, [pc, #160]	; (8000554 <main+0x17c>)
 80004b4:	f000 f9e7 	bl	8000886 <SPI_ReceiveData>

		//Receive ack byte
		SPI_SendData(SPI2, &dummy_write, 1);
 80004b8:	f107 030f 	add.w	r3, r7, #15
 80004bc:	2201      	movs	r2, #1
 80004be:	4619      	mov	r1, r3
 80004c0:	4824      	ldr	r0, [pc, #144]	; (8000554 <main+0x17c>)
 80004c2:	f000 f9aa 	bl	800081a <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80004c6:	f107 030d 	add.w	r3, r7, #13
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	4821      	ldr	r0, [pc, #132]	; (8000554 <main+0x17c>)
 80004d0:	f000 f9d9 	bl	8000886 <SPI_ReceiveData>

		//verify ack and then send arguments for sensor read
		if (SPI_Verifyresponse(&ackbyte))
 80004d4:	f107 030d 	add.w	r3, r7, #13
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff6a 	bl	80003b4 <SPI_Verifyresponse>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d024      	beq.n	8000530 <main+0x158>
		{
			args[0]=ANALOG_PIN0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	723b      	strb	r3, [r7, #8]
			SPI_SendData(SPI2, args, 1);
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	4818      	ldr	r0, [pc, #96]	; (8000554 <main+0x17c>)
 80004f4:	f000 f991 	bl	800081a <SPI_SendData>

			//clear RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004f8:	f107 030e 	add.w	r3, r7, #14
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	4814      	ldr	r0, [pc, #80]	; (8000554 <main+0x17c>)
 8000502:	f000 f9c0 	bl	8000886 <SPI_ReceiveData>

			//delay to let adc process
			delay();
 8000506:	f7ff fedb 	bl	80002c0 <delay>

			//receive analog data
			SPI_SendData(SPI2, &dummy_write, 1);
 800050a:	f107 030f 	add.w	r3, r7, #15
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <main+0x17c>)
 8000514:	f000 f981 	bl	800081a <SPI_SendData>
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x17c>)
 8000522:	f000 f9b0 	bl	8000886 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d.\n",analog_read);
 8000526:	7b3b      	ldrb	r3, [r7, #12]
 8000528:	4619      	mov	r1, r3
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0x184>)
 800052c:	f000 fc94 	bl	8000e58 <iprintf>

		}

		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 8000530:	bf00      	nop
 8000532:	210d      	movs	r1, #13
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x180>)
 8000536:	f000 fc4d 	bl	8000dd4 <GPIO_ReadFromInputPin>
 800053a:	4603      	mov	r3, r0
 800053c:	2b01      	cmp	r3, #1
 800053e:	d0f8      	beq.n	8000532 <main+0x15a>
				delay();
 8000540:	f7ff febe 	bl	80002c0 <delay>





		SPI_PeripheralControl(SPI2,DISABLE);
 8000544:	2100      	movs	r1, #0
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x17c>)
 8000548:	f000 f8ff 	bl	800074a <SPI_PeripheralControl>
	{
 800054c:	e75c      	b.n	8000408 <main+0x30>
 800054e:	bf00      	nop
 8000550:	080022a4 	.word	0x080022a4
 8000554:	40003800 	.word	0x40003800
 8000558:	40020800 	.word	0x40020800
 800055c:	080022bc 	.word	0x080022bc

08000560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000562:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490e      	ldr	r1, [pc, #56]	; (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0b      	ldr	r4, [pc, #44]	; (80005ac <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800058a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800058e:	f000 fc37 	bl	8000e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff ff21 	bl	80003d8 <main>

08000596 <LoopForever>:

LoopForever:
    b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   r0, =_estack
 8000598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005a4:	08002394 	.word	0x08002394
  ldr r2, =_sbss
 80005a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005ac:	20000148 	.word	0x20000148

080005b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC_IRQHandler>
	...

080005b4 <SPI_PeriClockControl>:
* ReturnVal:	none
* Notes:		none
*/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d12b      	bne.n	800061e <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a2d      	ldr	r2, [pc, #180]	; (8000680 <SPI_PeriClockControl+0xcc>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d106      	bne.n	80005dc <SPI_PeriClockControl+0x28>
		{
			SPI1_PERICLK_EN();
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <SPI_PeriClockControl+0xd0>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d2:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <SPI_PeriClockControl+0xd0>)
 80005d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d8:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI4_PERICLK_DI();
		}

	}
}
 80005da:	e04b      	b.n	8000674 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <SPI_PeriClockControl+0xd4>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d106      	bne.n	80005f2 <SPI_PeriClockControl+0x3e>
			SPI2_PERICLK_EN();
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <SPI_PeriClockControl+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <SPI_PeriClockControl+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005f0:	e040      	b.n	8000674 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a25      	ldr	r2, [pc, #148]	; (800068c <SPI_PeriClockControl+0xd8>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <SPI_PeriClockControl+0x54>
			SPI3_PERICLK_EN();
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SPI_PeriClockControl+0xd0>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SPI_PeriClockControl+0xd0>)
 8000600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000606:	e035      	b.n	8000674 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SPI_PeriClockControl+0xdc>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d131      	bne.n	8000674 <SPI_PeriClockControl+0xc0>
			SPI4_PERICLK_EN();
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <SPI_PeriClockControl+0xd0>)
 8000612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <SPI_PeriClockControl+0xd0>)
 8000616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800061a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800061c:	e02a      	b.n	8000674 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <SPI_PeriClockControl+0xcc>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <SPI_PeriClockControl+0x80>
			SPI1_PERICLK_DI();
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <SPI_PeriClockControl+0xd0>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <SPI_PeriClockControl+0xd0>)
 800062c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000630:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000632:	e01f      	b.n	8000674 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <SPI_PeriClockControl+0xd4>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <SPI_PeriClockControl+0x96>
			SPI2_PERICLK_DI();
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <SPI_PeriClockControl+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a10      	ldr	r2, [pc, #64]	; (8000684 <SPI_PeriClockControl+0xd0>)
 8000642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000648:	e014      	b.n	8000674 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <SPI_PeriClockControl+0xd8>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <SPI_PeriClockControl+0xac>
			SPI3_PERICLK_DI();
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <SPI_PeriClockControl+0xd0>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <SPI_PeriClockControl+0xd0>)
 8000658:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800065e:	e009      	b.n	8000674 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <SPI_PeriClockControl+0xdc>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d105      	bne.n	8000674 <SPI_PeriClockControl+0xc0>
			SPI4_PERICLK_DI();
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SPI_PeriClockControl+0xd0>)
 800066a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SPI_PeriClockControl+0xd0>)
 800066e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000672:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40013000 	.word	0x40013000
 8000684:	40023800 	.word	0x40023800
 8000688:	40003800 	.word	0x40003800
 800068c:	40003c00 	.word	0x40003c00
 8000690:	40013400 	.word	0x40013400

08000694 <SPI_Init>:
* Parameter1:	handle of the desired SPI peripheral
* ReturnVal:	none
* Notes:		none
*/
void SPI_Init(SPI_Handle_t *SPIHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	SPI_PeriClockControl(SPIHandle->pSPIx, ENABLE);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2101      	movs	r1, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff86 	bl	80005b4 <SPI_PeriClockControl>


	uint32_t tempreg=0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
	//1. device mode
	tempreg |= SPIHandle->SPI_Config.SPI_Devicemode<<SPI_CR1_MSTR;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
	//2. Busconfig
	if(SPIHandle->SPI_Config.SPI_Busconfig==SPI_BUS_CONFIG_FD)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d104      	bne.n	80006cc <SPI_Init+0x38>
	{
		//clear bidi mode/
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e014      	b.n	80006f6 <SPI_Init+0x62>

	}
	else if(SPIHandle->SPI_Config.SPI_Busconfig==SPI_BUS_CONFIG_HD)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	795b      	ldrb	r3, [r3, #5]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d104      	bne.n	80006de <SPI_Init+0x4a>
	{
		//enable bidi mode
		tempreg |= (1<<SPI_CR1_BIDIMODE);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	e00b      	b.n	80006f6 <SPI_Init+0x62>

	}
	else if(SPIHandle->SPI_Config.SPI_Busconfig==SPI_BUS_CONFIG__SIMPLEX_RXONLY)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	795b      	ldrb	r3, [r3, #5]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d107      	bne.n	80006f6 <SPI_Init+0x62>
	{
		//clear bidimode + rx only
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006ec:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<SPI_CR1_RXONLY);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006f4:	60fb      	str	r3, [r7, #12]
	}
	//3. SPI serial clock speed
	tempreg |= SPIHandle->SPI_Config.SPI_Speed <<SPI_CR1_BR;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7a9b      	ldrb	r3, [r3, #10]
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	461a      	mov	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4313      	orrs	r3, r2
 8000702:	60fb      	str	r3, [r7, #12]
	//4. DFF
	tempreg |= SPIHandle->SPI_Config.SPI_DFF <<SPI_CR1_DFF;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	799b      	ldrb	r3, [r3, #6]
 8000708:	02db      	lsls	r3, r3, #11
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4313      	orrs	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
	//5. CPOL
	tempreg |= SPIHandle->SPI_Config.SPI_CPOL <<SPI_CR1_CPOL;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7a1b      	ldrb	r3, [r3, #8]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	461a      	mov	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4313      	orrs	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
	//6. CPHA
	tempreg |= SPIHandle->SPI_Config.SPI_CPHA <<SPI_CR1_CPHA;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	461a      	mov	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	4313      	orrs	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
	//7. SSM
	tempreg |= SPIHandle->SPI_Config.SPI_SSM <<SPI_CR1_SSM;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7a5b      	ldrb	r3, [r3, #9]
 8000730:	025b      	lsls	r3, r3, #9
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4313      	orrs	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]

	//write value in tempreg to the CR1 register
	SPIHandle->pSPIx->CR1 = tempreg;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <SPI_PeripheralControl>:
* Parameter2:	Enable or disable value
* ReturnVal:	none
* Notes:		none
*/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	460b      	mov	r3, r1
 8000754:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d106      	bne.n	800076a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000768:	e005      	b.n	8000776 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <SPI_SSIConfig>:

//enable/disable the SSI bit to connect NSS bit to internal voltage source.
//not enabling SSI bit can lead to MODF error
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d106      	bne.n	80007a2 <SPI_SSIConfig+0x20>
		{
			pSPIx->CR1 |= (1<<SPI_CR1_SSI);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
 80007a0:	e005      	b.n	80007ae <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <SPI_SSOEConfig>:

//enable disable SSOE bit for controlling nss pin
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d106      	bne.n	80007da <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f043 0204 	orr.w	r2, r3, #4
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	605a      	str	r2, [r3, #4]
	else
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}

}
 80007d8:	e005      	b.n	80007e6 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f023 0204 	bic.w	r2, r3, #4
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	605a      	str	r2, [r3, #4]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <SPI_GetFlagStatus>:


/*******************Blocking Data controls************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t Flagname)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & Flagname)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	4013      	ands	r3, r2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SPI_GetFlagStatus+0x1a>
	{
		return 1;
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <SPI_GetFlagStatus+0x1c>
	}
	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <SPI_SendData>:

/* SPI send data (blocking) */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b084      	sub	sp, #16
 800081e:	af00      	add	r7, sp, #0
 8000820:	60f8      	str	r0, [r7, #12]
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
	while(len>0)
 8000826:	e027      	b.n	8000878 <SPI_SendData+0x5e>
	{


		//wait until TX buffer is empty (TXEis empty via status register)
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)==0);
 8000828:	bf00      	nop
 800082a:	2102      	movs	r1, #2
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff ffe0 	bl	80007f2 <SPI_GetFlagStatus>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0f8      	beq.n	800082a <SPI_SendData+0x10>

		if(pSPIx->CR1 & (1<< SPI_CR1_DFF ))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00e      	beq.n	8000862 <SPI_SendData+0x48>
		{
			// 16 bit dff type cast into 16 bit pointer then dereference
			// I definitely would like to use a less confusing implementation
			//load DR with 2 bytes of data to send and increment the buffer address
			// to point to the next group of data to send
			pSPIx->DR= *((uint16_t  *)pTxBuffer) ;
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	60da      	str	r2, [r3, #12]
			len--;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3b01      	subs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
			len--;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
			(uint16_t  *)pTxBuffer++;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	3301      	adds	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	e00a      	b.n	8000878 <SPI_SendData+0x5e>
		else
		{
			// 8 bit dff
			//load DR with 1 byte of data to be sent
			//and increment the buffer address for next byte of data
			pSPIx->DR= *pTxBuffer ;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	60da      	str	r2, [r3, #12]
			len--;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3301      	adds	r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
	while(len>0)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1d4      	bne.n	8000828 <SPI_SendData+0xe>

	}



}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SPI_ReceiveData>:


/* SPI receive data (blocking) */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b084      	sub	sp, #16
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
	while(len>0)
 8000892:	e027      	b.n	80008e4 <SPI_ReceiveData+0x5e>
	{


		//wait until RX buffer is not empty (RXNE via status register for SPI)
		while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG==0));
 8000894:	bf00      	nop
 8000896:	2100      	movs	r1, #0
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff ffaa 	bl	80007f2 <SPI_GetFlagStatus>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f8      	bne.n	8000896 <SPI_ReceiveData+0x10>
		//check the DFF bit in CR1
		if(pSPIx->CR1 & (1<< SPI_CR1_DFF ))
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00e      	beq.n	80008ce <SPI_ReceiveData+0x48>
		{	//16 bit DFF
			//load 2 bytes of data from DR to RX buffer address
			//and increment the buffer address to point to the next group
			// of data to read
			*((uint16_t  *)pRxBuffer)= pSPIx->DR ;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	801a      	strh	r2, [r3, #0]
			len--;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3b01      	subs	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
			len--;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
			(uint16_t  *)pRxBuffer++;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	e00a      	b.n	80008e4 <SPI_ReceiveData+0x5e>
		else
		{
			// 8 bit dff
			//load RXbuffer with one byte of data from DR
			//and increment the buffer address for next byte of data
		   *pRxBuffer =pSPIx->DR ;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	701a      	strb	r2, [r3, #0]
			len--;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
	while(len>0)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1d4      	bne.n	8000894 <SPI_ReceiveData+0xe>
		}

	}


}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <GPIO_PeriClockControl>:
* ReturnVal:	none
* Notes:		none
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d157      	bne.n	80009b6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a59      	ldr	r2, [pc, #356]	; (8000a70 <GPIO_PeriClockControl+0x17c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PERICLK_EN();
 800090e:	4b59      	ldr	r3, [pc, #356]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a58      	ldr	r2, [pc, #352]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PERICLK_DI();
		}

	}
}
 800091a:	e0a3      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a56      	ldr	r2, [pc, #344]	; (8000a78 <GPIO_PeriClockControl+0x184>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <GPIO_PeriClockControl+0x3e>
			GPIOB_PERICLK_EN();
 8000924:	4b53      	ldr	r3, [pc, #332]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a52      	ldr	r2, [pc, #328]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000930:	e098      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <GPIO_PeriClockControl+0x188>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <GPIO_PeriClockControl+0x54>
			GPIOC_PERICLK_EN();
 800093a:	4b4e      	ldr	r3, [pc, #312]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a4d      	ldr	r2, [pc, #308]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000946:	e08d      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a4d      	ldr	r2, [pc, #308]	; (8000a80 <GPIO_PeriClockControl+0x18c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d106      	bne.n	800095e <GPIO_PeriClockControl+0x6a>
			GPIOD_PERICLK_EN();
 8000950:	4b48      	ldr	r3, [pc, #288]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a47      	ldr	r2, [pc, #284]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000956:	f043 0308 	orr.w	r3, r3, #8
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095c:	e082      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a48      	ldr	r2, [pc, #288]	; (8000a84 <GPIO_PeriClockControl+0x190>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <GPIO_PeriClockControl+0x80>
			GPIOE_PERICLK_EN();
 8000966:	4b43      	ldr	r3, [pc, #268]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000972:	e077      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a44      	ldr	r2, [pc, #272]	; (8000a88 <GPIO_PeriClockControl+0x194>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <GPIO_PeriClockControl+0x96>
			GPIOF_PERICLK_EN();
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a3c      	ldr	r2, [pc, #240]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000982:	f043 0320 	orr.w	r3, r3, #32
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000988:	e06c      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a3f      	ldr	r2, [pc, #252]	; (8000a8c <GPIO_PeriClockControl+0x198>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <GPIO_PeriClockControl+0xac>
			GPIOG_PERICLK_EN();
 8000992:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a37      	ldr	r2, [pc, #220]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099e:	e061      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a3b      	ldr	r2, [pc, #236]	; (8000a90 <GPIO_PeriClockControl+0x19c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d15d      	bne.n	8000a64 <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_EN();
 80009a8:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a31      	ldr	r2, [pc, #196]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b4:	e056      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <GPIO_PeriClockControl+0x17c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <GPIO_PeriClockControl+0xd8>
			GPIOA_PERICLK_DI();
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a2c      	ldr	r2, [pc, #176]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009c4:	f023 0301 	bic.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ca:	e04b      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a2a      	ldr	r2, [pc, #168]	; (8000a78 <GPIO_PeriClockControl+0x184>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d106      	bne.n	80009e2 <GPIO_PeriClockControl+0xee>
			GPIOB_PERICLK_DI();
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009da:	f023 0302 	bic.w	r3, r3, #2
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e0:	e040      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <GPIO_PeriClockControl+0x188>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <GPIO_PeriClockControl+0x104>
			GPIOC_PERICLK_DI();
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 80009f0:	f023 0304 	bic.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f6:	e035      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <GPIO_PeriClockControl+0x18c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d106      	bne.n	8000a0e <GPIO_PeriClockControl+0x11a>
			GPIOD_PERICLK_DI();
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a06:	f023 0308 	bic.w	r3, r3, #8
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a0c:	e02a      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <GPIO_PeriClockControl+0x190>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <GPIO_PeriClockControl+0x130>
			GPIOE_PERICLK_DI();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a1c:	f023 0310 	bic.w	r3, r3, #16
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a22:	e01f      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <GPIO_PeriClockControl+0x194>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <GPIO_PeriClockControl+0x146>
			GPIOF_PERICLK_DI();
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a32:	f023 0320 	bic.w	r3, r3, #32
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a38:	e014      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <GPIO_PeriClockControl+0x198>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <GPIO_PeriClockControl+0x15c>
			GPIOG_PERICLK_DI();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4e:	e009      	b.n	8000a64 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <GPIO_PeriClockControl+0x19c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d105      	bne.n	8000a64 <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_DI();
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <GPIO_PeriClockControl+0x180>)
 8000a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40021400 	.word	0x40021400
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40021c00 	.word	0x40021c00

08000a94 <GPIO_Init>:
* Parameter1:	Handle of GPIO port
* ReturnVal:	none
* Notes:		none
*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{	uint32_t temp=0;
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]

	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff24 	bl	80008f4 <GPIO_PeriClockControl>

	//see if its not an interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	795b      	ldrb	r3, [r3, #5]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d820      	bhi.n	8000af6 <GPIO_Init+0x62>
	{
		//configure pin mode
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	791b      	ldrb	r3, [r3, #4]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear bit fields before setting
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp; //set bits
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e0c6      	b.n	8000c84 <GPIO_Init+0x1f0>

	}
	//else configure for  interrupt mode
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d117      	bne.n	8000b2e <GPIO_Init+0x9a>
		{
			//1. configure Falling trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <GPIO_Init+0x18c>)
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	7912      	ldrb	r2, [r2, #4]
 8000b06:	4611      	mov	r1, r2
 8000b08:	2201      	movs	r2, #1
 8000b0a:	408a      	lsls	r2, r1
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4a44      	ldr	r2, [pc, #272]	; (8000c20 <GPIO_Init+0x18c>)
 8000b10:	430b      	orrs	r3, r1
 8000b12:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b14:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <GPIO_Init+0x18c>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7912      	ldrb	r2, [r2, #4]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	2201      	movs	r2, #1
 8000b20:	408a      	lsls	r2, r1
 8000b22:	43d2      	mvns	r2, r2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4a3e      	ldr	r2, [pc, #248]	; (8000c20 <GPIO_Init+0x18c>)
 8000b28:	400b      	ands	r3, r1
 8000b2a:	6093      	str	r3, [r2, #8]
 8000b2c:	e035      	b.n	8000b9a <GPIO_Init+0x106>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	795b      	ldrb	r3, [r3, #5]
 8000b32:	2b05      	cmp	r3, #5
 8000b34:	d117      	bne.n	8000b66 <GPIO_Init+0xd2>
		{
			//1. configure Rising trigger selection register
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b36:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <GPIO_Init+0x18c>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	7912      	ldrb	r2, [r2, #4]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	2201      	movs	r2, #1
 8000b42:	408a      	lsls	r2, r1
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a36      	ldr	r2, [pc, #216]	; (8000c20 <GPIO_Init+0x18c>)
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <GPIO_Init+0x18c>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	7912      	ldrb	r2, [r2, #4]
 8000b54:	4611      	mov	r1, r2
 8000b56:	2201      	movs	r2, #1
 8000b58:	408a      	lsls	r2, r1
 8000b5a:	43d2      	mvns	r2, r2
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <GPIO_Init+0x18c>)
 8000b60:	400b      	ands	r3, r1
 8000b62:	60d3      	str	r3, [r2, #12]
 8000b64:	e019      	b.n	8000b9a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	795b      	ldrb	r3, [r3, #5]
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d115      	bne.n	8000b9a <GPIO_Init+0x106>
		{
			//1. configure Falling and Rising trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <GPIO_Init+0x18c>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	7912      	ldrb	r2, [r2, #4]
 8000b76:	4611      	mov	r1, r2
 8000b78:	2201      	movs	r2, #1
 8000b7a:	408a      	lsls	r2, r1
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <GPIO_Init+0x18c>)
 8000b80:	430b      	orrs	r3, r1
 8000b82:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <GPIO_Init+0x18c>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	7912      	ldrb	r2, [r2, #4]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	2201      	movs	r2, #1
 8000b90:	408a      	lsls	r2, r1
 8000b92:	4611      	mov	r1, r2
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <GPIO_Init+0x18c>)
 8000b96:	430b      	orrs	r3, r1
 8000b98:	6093      	str	r3, [r2, #8]
		}
		//2. configure GPIO port selection in SYSCFG_EXTIC
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to get which exti control register
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4; //to determine section within control register determined above
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	75fb      	strb	r3, [r7, #23]

		if(pGPIOHandle->pGPIOx == GPIOA){portcode=0;}
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <GPIO_Init+0x190>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d102      	bne.n	8000bc0 <GPIO_Init+0x12c>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	75fb      	strb	r3, [r7, #23]
 8000bbe:	e046      	b.n	8000c4e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOB){portcode=1;}
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <GPIO_Init+0x194>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d102      	bne.n	8000bd0 <GPIO_Init+0x13c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	75fb      	strb	r3, [r7, #23]
 8000bce:	e03e      	b.n	8000c4e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOC){portcode=2;}
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <GPIO_Init+0x198>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d102      	bne.n	8000be0 <GPIO_Init+0x14c>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	75fb      	strb	r3, [r7, #23]
 8000bde:	e036      	b.n	8000c4e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOD){portcode=3;}
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <GPIO_Init+0x19c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d102      	bne.n	8000bf0 <GPIO_Init+0x15c>
 8000bea:	2303      	movs	r3, #3
 8000bec:	75fb      	strb	r3, [r7, #23]
 8000bee:	e02e      	b.n	8000c4e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOE){portcode=4;}
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <GPIO_Init+0x1a0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d102      	bne.n	8000c00 <GPIO_Init+0x16c>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	75fb      	strb	r3, [r7, #23]
 8000bfe:	e026      	b.n	8000c4e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOF){portcode=5;}
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <GPIO_Init+0x1a4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d102      	bne.n	8000c10 <GPIO_Init+0x17c>
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	75fb      	strb	r3, [r7, #23]
 8000c0e:	e01e      	b.n	8000c4e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOG){portcode=6;}
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <GPIO_Init+0x1a8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d112      	bne.n	8000c40 <GPIO_Init+0x1ac>
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	75fb      	strb	r3, [r7, #23]
 8000c1e:	e016      	b.n	8000c4e <GPIO_Init+0x1ba>
 8000c20:	40013c00 	.word	0x40013c00
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40021400 	.word	0x40021400
 8000c3c:	40021800 	.word	0x40021800
		else if(pGPIOHandle->pGPIOx == GPIOH){portcode=7;}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a5f      	ldr	r2, [pc, #380]	; (8000dc4 <GPIO_Init+0x330>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <GPIO_Init+0x1ba>
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	75fb      	strb	r3, [r7, #23]

		SYSCFG_PERICLK_EN();
 8000c4e:	4b5e      	ldr	r3, [pc, #376]	; (8000dc8 <GPIO_Init+0x334>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <GPIO_Init+0x334>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000c5a:	7dfa      	ldrb	r2, [r7, #23]
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	fa02 f103 	lsl.w	r1, r2, r3
 8000c64:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <GPIO_Init+0x338>)
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. enable EXTI interrupt delivery via IMR
		EXTI->IMR |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c6e:	4b58      	ldr	r3, [pc, #352]	; (8000dd0 <GPIO_Init+0x33c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	7912      	ldrb	r2, [r2, #4]
 8000c76:	4611      	mov	r1, r2
 8000c78:	2201      	movs	r2, #1
 8000c7a:	408a      	lsls	r2, r1
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4a54      	ldr	r2, [pc, #336]	; (8000dd0 <GPIO_Init+0x33c>)
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6013      	str	r3, [r2, #0]
	}
	//configure speed
	temp=0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	799b      	ldrb	r3, [r3, #6]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	791b      	ldrb	r3, [r3, #4]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	791b      	ldrb	r3, [r3, #4]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6899      	ldr	r1, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	609a      	str	r2, [r3, #8]
	//configure pullup/pulldown
	temp=0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	79db      	ldrb	r3, [r3, #7]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	791b      	ldrb	r3, [r3, #4]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2103      	movs	r1, #3
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68d9      	ldr	r1, [r3, #12]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	60da      	str	r2, [r3, #12]
	//configure output type
	temp=0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7a1b      	ldrb	r3, [r3, #8]
 8000d14:	461a      	mov	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	791b      	ldrb	r3, [r3, #4]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	408b      	lsls	r3, r1
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4619      	mov	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	400a      	ands	r2, r1
 8000d3a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6859      	ldr	r1, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	605a      	str	r2, [r3, #4]

	temp=0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	795b      	ldrb	r3, [r3, #5]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d131      	bne.n	8000dbc <GPIO_Init+0x328>
	{
		//Need to revisit this to understand
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	791b      	ldrb	r3, [r3, #4]
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	737b      	strb	r3, [r7, #13]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	733b      	strb	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[temp1]&= ~(0xF<<(4*temp2));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	7b7a      	ldrb	r2, [r7, #13]
 8000d70:	3208      	adds	r2, #8
 8000d72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7b7a      	ldrb	r2, [r7, #13]
 8000d8a:	4001      	ands	r1, r0
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode<<(4*temp2));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	7b7a      	ldrb	r2, [r7, #13]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7a5b      	ldrb	r3, [r3, #9]
 8000da2:	461a      	mov	r2, r3
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	7b7a      	ldrb	r2, [r7, #13]
 8000db4:	4301      	orrs	r1, r0
 8000db6:	3208      	adds	r2, #8
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}




}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021c00 	.word	0x40021c00
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	40013c00 	.word	0x40013c00

08000dd4 <GPIO_ReadFromInputPin>:
* Parameter2:	GPIO pin in range of 0 to 16
* ReturnVal:	0 or 1
* Notes:		none
*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
	return value;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <__libc_init_array>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	4e0d      	ldr	r6, [pc, #52]	; (8000e38 <__libc_init_array+0x38>)
 8000e04:	4c0d      	ldr	r4, [pc, #52]	; (8000e3c <__libc_init_array+0x3c>)
 8000e06:	1ba4      	subs	r4, r4, r6
 8000e08:	10a4      	asrs	r4, r4, #2
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	d109      	bne.n	8000e24 <__libc_init_array+0x24>
 8000e10:	4e0b      	ldr	r6, [pc, #44]	; (8000e40 <__libc_init_array+0x40>)
 8000e12:	4c0c      	ldr	r4, [pc, #48]	; (8000e44 <__libc_init_array+0x44>)
 8000e14:	f001 fa3a 	bl	800228c <_init>
 8000e18:	1ba4      	subs	r4, r4, r6
 8000e1a:	10a4      	asrs	r4, r4, #2
 8000e1c:	2500      	movs	r5, #0
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	d105      	bne.n	8000e2e <__libc_init_array+0x2e>
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e28:	4798      	blx	r3
 8000e2a:	3501      	adds	r5, #1
 8000e2c:	e7ee      	b.n	8000e0c <__libc_init_array+0xc>
 8000e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e32:	4798      	blx	r3
 8000e34:	3501      	adds	r5, #1
 8000e36:	e7f2      	b.n	8000e1e <__libc_init_array+0x1e>
 8000e38:	0800238c 	.word	0x0800238c
 8000e3c:	0800238c 	.word	0x0800238c
 8000e40:	0800238c 	.word	0x0800238c
 8000e44:	08002390 	.word	0x08002390

08000e48 <memset>:
 8000e48:	4402      	add	r2, r0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d100      	bne.n	8000e52 <memset+0xa>
 8000e50:	4770      	bx	lr
 8000e52:	f803 1b01 	strb.w	r1, [r3], #1
 8000e56:	e7f9      	b.n	8000e4c <memset+0x4>

08000e58 <iprintf>:
 8000e58:	b40f      	push	{r0, r1, r2, r3}
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <iprintf+0x2c>)
 8000e5c:	b513      	push	{r0, r1, r4, lr}
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	b124      	cbz	r4, 8000e6c <iprintf+0x14>
 8000e62:	69a3      	ldr	r3, [r4, #24]
 8000e64:	b913      	cbnz	r3, 8000e6c <iprintf+0x14>
 8000e66:	4620      	mov	r0, r4
 8000e68:	f000 fa22 	bl	80012b0 <__sinit>
 8000e6c:	ab05      	add	r3, sp, #20
 8000e6e:	9a04      	ldr	r2, [sp, #16]
 8000e70:	68a1      	ldr	r1, [r4, #8]
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	4620      	mov	r0, r4
 8000e76:	f000 fbdb 	bl	8001630 <_vfiprintf_r>
 8000e7a:	b002      	add	sp, #8
 8000e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e80:	b004      	add	sp, #16
 8000e82:	4770      	bx	lr
 8000e84:	20000000 	.word	0x20000000

08000e88 <_puts_r>:
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	460e      	mov	r6, r1
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	b118      	cbz	r0, 8000e98 <_puts_r+0x10>
 8000e90:	6983      	ldr	r3, [r0, #24]
 8000e92:	b90b      	cbnz	r3, 8000e98 <_puts_r+0x10>
 8000e94:	f000 fa0c 	bl	80012b0 <__sinit>
 8000e98:	69ab      	ldr	r3, [r5, #24]
 8000e9a:	68ac      	ldr	r4, [r5, #8]
 8000e9c:	b913      	cbnz	r3, 8000ea4 <_puts_r+0x1c>
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	f000 fa06 	bl	80012b0 <__sinit>
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <_puts_r+0xac>)
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	d117      	bne.n	8000eda <_puts_r+0x52>
 8000eaa:	686c      	ldr	r4, [r5, #4]
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	071b      	lsls	r3, r3, #28
 8000eb0:	d51d      	bpl.n	8000eee <_puts_r+0x66>
 8000eb2:	6923      	ldr	r3, [r4, #16]
 8000eb4:	b1db      	cbz	r3, 8000eee <_puts_r+0x66>
 8000eb6:	3e01      	subs	r6, #1
 8000eb8:	68a3      	ldr	r3, [r4, #8]
 8000eba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	60a3      	str	r3, [r4, #8]
 8000ec2:	b9e9      	cbnz	r1, 8000f00 <_puts_r+0x78>
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	da2e      	bge.n	8000f26 <_puts_r+0x9e>
 8000ec8:	4622      	mov	r2, r4
 8000eca:	210a      	movs	r1, #10
 8000ecc:	4628      	mov	r0, r5
 8000ece:	f000 f83f 	bl	8000f50 <__swbuf_r>
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	d011      	beq.n	8000efa <_puts_r+0x72>
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	e011      	b.n	8000efe <_puts_r+0x76>
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <_puts_r+0xb0>)
 8000edc:	429c      	cmp	r4, r3
 8000ede:	d101      	bne.n	8000ee4 <_puts_r+0x5c>
 8000ee0:	68ac      	ldr	r4, [r5, #8]
 8000ee2:	e7e3      	b.n	8000eac <_puts_r+0x24>
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_puts_r+0xb4>)
 8000ee6:	429c      	cmp	r4, r3
 8000ee8:	bf08      	it	eq
 8000eea:	68ec      	ldreq	r4, [r5, #12]
 8000eec:	e7de      	b.n	8000eac <_puts_r+0x24>
 8000eee:	4621      	mov	r1, r4
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f000 f87f 	bl	8000ff4 <__swsetup_r>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d0dd      	beq.n	8000eb6 <_puts_r+0x2e>
 8000efa:	f04f 30ff 	mov.w	r0, #4294967295
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da04      	bge.n	8000f0e <_puts_r+0x86>
 8000f04:	69a2      	ldr	r2, [r4, #24]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dc06      	bgt.n	8000f18 <_puts_r+0x90>
 8000f0a:	290a      	cmp	r1, #10
 8000f0c:	d004      	beq.n	8000f18 <_puts_r+0x90>
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	6022      	str	r2, [r4, #0]
 8000f14:	7019      	strb	r1, [r3, #0]
 8000f16:	e7cf      	b.n	8000eb8 <_puts_r+0x30>
 8000f18:	4622      	mov	r2, r4
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	f000 f818 	bl	8000f50 <__swbuf_r>
 8000f20:	3001      	adds	r0, #1
 8000f22:	d1c9      	bne.n	8000eb8 <_puts_r+0x30>
 8000f24:	e7e9      	b.n	8000efa <_puts_r+0x72>
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	200a      	movs	r0, #10
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	6022      	str	r2, [r4, #0]
 8000f2e:	7018      	strb	r0, [r3, #0]
 8000f30:	e7e5      	b.n	8000efe <_puts_r+0x76>
 8000f32:	bf00      	nop
 8000f34:	080022fc 	.word	0x080022fc
 8000f38:	0800231c 	.word	0x0800231c
 8000f3c:	080022dc 	.word	0x080022dc

08000f40 <puts>:
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <puts+0xc>)
 8000f42:	4601      	mov	r1, r0
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	f7ff bf9f 	b.w	8000e88 <_puts_r>
 8000f4a:	bf00      	nop
 8000f4c:	20000000 	.word	0x20000000

08000f50 <__swbuf_r>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	460e      	mov	r6, r1
 8000f54:	4614      	mov	r4, r2
 8000f56:	4605      	mov	r5, r0
 8000f58:	b118      	cbz	r0, 8000f62 <__swbuf_r+0x12>
 8000f5a:	6983      	ldr	r3, [r0, #24]
 8000f5c:	b90b      	cbnz	r3, 8000f62 <__swbuf_r+0x12>
 8000f5e:	f000 f9a7 	bl	80012b0 <__sinit>
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <__swbuf_r+0x98>)
 8000f64:	429c      	cmp	r4, r3
 8000f66:	d12a      	bne.n	8000fbe <__swbuf_r+0x6e>
 8000f68:	686c      	ldr	r4, [r5, #4]
 8000f6a:	69a3      	ldr	r3, [r4, #24]
 8000f6c:	60a3      	str	r3, [r4, #8]
 8000f6e:	89a3      	ldrh	r3, [r4, #12]
 8000f70:	071a      	lsls	r2, r3, #28
 8000f72:	d52e      	bpl.n	8000fd2 <__swbuf_r+0x82>
 8000f74:	6923      	ldr	r3, [r4, #16]
 8000f76:	b363      	cbz	r3, 8000fd2 <__swbuf_r+0x82>
 8000f78:	6923      	ldr	r3, [r4, #16]
 8000f7a:	6820      	ldr	r0, [r4, #0]
 8000f7c:	1ac0      	subs	r0, r0, r3
 8000f7e:	6963      	ldr	r3, [r4, #20]
 8000f80:	b2f6      	uxtb	r6, r6
 8000f82:	4283      	cmp	r3, r0
 8000f84:	4637      	mov	r7, r6
 8000f86:	dc04      	bgt.n	8000f92 <__swbuf_r+0x42>
 8000f88:	4621      	mov	r1, r4
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f000 f926 	bl	80011dc <_fflush_r>
 8000f90:	bb28      	cbnz	r0, 8000fde <__swbuf_r+0x8e>
 8000f92:	68a3      	ldr	r3, [r4, #8]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60a3      	str	r3, [r4, #8]
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	6022      	str	r2, [r4, #0]
 8000f9e:	701e      	strb	r6, [r3, #0]
 8000fa0:	6963      	ldr	r3, [r4, #20]
 8000fa2:	3001      	adds	r0, #1
 8000fa4:	4283      	cmp	r3, r0
 8000fa6:	d004      	beq.n	8000fb2 <__swbuf_r+0x62>
 8000fa8:	89a3      	ldrh	r3, [r4, #12]
 8000faa:	07db      	lsls	r3, r3, #31
 8000fac:	d519      	bpl.n	8000fe2 <__swbuf_r+0x92>
 8000fae:	2e0a      	cmp	r6, #10
 8000fb0:	d117      	bne.n	8000fe2 <__swbuf_r+0x92>
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f000 f911 	bl	80011dc <_fflush_r>
 8000fba:	b190      	cbz	r0, 8000fe2 <__swbuf_r+0x92>
 8000fbc:	e00f      	b.n	8000fde <__swbuf_r+0x8e>
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <__swbuf_r+0x9c>)
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	d101      	bne.n	8000fc8 <__swbuf_r+0x78>
 8000fc4:	68ac      	ldr	r4, [r5, #8]
 8000fc6:	e7d0      	b.n	8000f6a <__swbuf_r+0x1a>
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <__swbuf_r+0xa0>)
 8000fca:	429c      	cmp	r4, r3
 8000fcc:	bf08      	it	eq
 8000fce:	68ec      	ldreq	r4, [r5, #12]
 8000fd0:	e7cb      	b.n	8000f6a <__swbuf_r+0x1a>
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f000 f80d 	bl	8000ff4 <__swsetup_r>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d0cc      	beq.n	8000f78 <__swbuf_r+0x28>
 8000fde:	f04f 37ff 	mov.w	r7, #4294967295
 8000fe2:	4638      	mov	r0, r7
 8000fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	080022fc 	.word	0x080022fc
 8000fec:	0800231c 	.word	0x0800231c
 8000ff0:	080022dc 	.word	0x080022dc

08000ff4 <__swsetup_r>:
 8000ff4:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <__swsetup_r+0xcc>)
 8000ff6:	b570      	push	{r4, r5, r6, lr}
 8000ff8:	681d      	ldr	r5, [r3, #0]
 8000ffa:	4606      	mov	r6, r0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	b125      	cbz	r5, 800100a <__swsetup_r+0x16>
 8001000:	69ab      	ldr	r3, [r5, #24]
 8001002:	b913      	cbnz	r3, 800100a <__swsetup_r+0x16>
 8001004:	4628      	mov	r0, r5
 8001006:	f000 f953 	bl	80012b0 <__sinit>
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <__swsetup_r+0xd0>)
 800100c:	429c      	cmp	r4, r3
 800100e:	d10f      	bne.n	8001030 <__swsetup_r+0x3c>
 8001010:	686c      	ldr	r4, [r5, #4]
 8001012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001016:	b29a      	uxth	r2, r3
 8001018:	0715      	lsls	r5, r2, #28
 800101a:	d42c      	bmi.n	8001076 <__swsetup_r+0x82>
 800101c:	06d0      	lsls	r0, r2, #27
 800101e:	d411      	bmi.n	8001044 <__swsetup_r+0x50>
 8001020:	2209      	movs	r2, #9
 8001022:	6032      	str	r2, [r6, #0]
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	e03e      	b.n	80010ae <__swsetup_r+0xba>
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <__swsetup_r+0xd4>)
 8001032:	429c      	cmp	r4, r3
 8001034:	d101      	bne.n	800103a <__swsetup_r+0x46>
 8001036:	68ac      	ldr	r4, [r5, #8]
 8001038:	e7eb      	b.n	8001012 <__swsetup_r+0x1e>
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <__swsetup_r+0xd8>)
 800103c:	429c      	cmp	r4, r3
 800103e:	bf08      	it	eq
 8001040:	68ec      	ldreq	r4, [r5, #12]
 8001042:	e7e6      	b.n	8001012 <__swsetup_r+0x1e>
 8001044:	0751      	lsls	r1, r2, #29
 8001046:	d512      	bpl.n	800106e <__swsetup_r+0x7a>
 8001048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800104a:	b141      	cbz	r1, 800105e <__swsetup_r+0x6a>
 800104c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001050:	4299      	cmp	r1, r3
 8001052:	d002      	beq.n	800105a <__swsetup_r+0x66>
 8001054:	4630      	mov	r0, r6
 8001056:	f000 fa19 	bl	800148c <_free_r>
 800105a:	2300      	movs	r3, #0
 800105c:	6363      	str	r3, [r4, #52]	; 0x34
 800105e:	89a3      	ldrh	r3, [r4, #12]
 8001060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001064:	81a3      	strh	r3, [r4, #12]
 8001066:	2300      	movs	r3, #0
 8001068:	6063      	str	r3, [r4, #4]
 800106a:	6923      	ldr	r3, [r4, #16]
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	89a3      	ldrh	r3, [r4, #12]
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	81a3      	strh	r3, [r4, #12]
 8001076:	6923      	ldr	r3, [r4, #16]
 8001078:	b94b      	cbnz	r3, 800108e <__swsetup_r+0x9a>
 800107a:	89a3      	ldrh	r3, [r4, #12]
 800107c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001084:	d003      	beq.n	800108e <__swsetup_r+0x9a>
 8001086:	4621      	mov	r1, r4
 8001088:	4630      	mov	r0, r6
 800108a:	f000 f9bf 	bl	800140c <__smakebuf_r>
 800108e:	89a2      	ldrh	r2, [r4, #12]
 8001090:	f012 0301 	ands.w	r3, r2, #1
 8001094:	d00c      	beq.n	80010b0 <__swsetup_r+0xbc>
 8001096:	2300      	movs	r3, #0
 8001098:	60a3      	str	r3, [r4, #8]
 800109a:	6963      	ldr	r3, [r4, #20]
 800109c:	425b      	negs	r3, r3
 800109e:	61a3      	str	r3, [r4, #24]
 80010a0:	6923      	ldr	r3, [r4, #16]
 80010a2:	b953      	cbnz	r3, 80010ba <__swsetup_r+0xc6>
 80010a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80010ac:	d1ba      	bne.n	8001024 <__swsetup_r+0x30>
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
 80010b0:	0792      	lsls	r2, r2, #30
 80010b2:	bf58      	it	pl
 80010b4:	6963      	ldrpl	r3, [r4, #20]
 80010b6:	60a3      	str	r3, [r4, #8]
 80010b8:	e7f2      	b.n	80010a0 <__swsetup_r+0xac>
 80010ba:	2000      	movs	r0, #0
 80010bc:	e7f7      	b.n	80010ae <__swsetup_r+0xba>
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000
 80010c4:	080022fc 	.word	0x080022fc
 80010c8:	0800231c 	.word	0x0800231c
 80010cc:	080022dc 	.word	0x080022dc

080010d0 <__sflush_r>:
 80010d0:	898a      	ldrh	r2, [r1, #12]
 80010d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010d6:	4605      	mov	r5, r0
 80010d8:	0710      	lsls	r0, r2, #28
 80010da:	460c      	mov	r4, r1
 80010dc:	d458      	bmi.n	8001190 <__sflush_r+0xc0>
 80010de:	684b      	ldr	r3, [r1, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	dc05      	bgt.n	80010f0 <__sflush_r+0x20>
 80010e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dc02      	bgt.n	80010f0 <__sflush_r+0x20>
 80010ea:	2000      	movs	r0, #0
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d0f9      	beq.n	80010ea <__sflush_r+0x1a>
 80010f6:	2300      	movs	r3, #0
 80010f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010fc:	682f      	ldr	r7, [r5, #0]
 80010fe:	6a21      	ldr	r1, [r4, #32]
 8001100:	602b      	str	r3, [r5, #0]
 8001102:	d032      	beq.n	800116a <__sflush_r+0x9a>
 8001104:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001106:	89a3      	ldrh	r3, [r4, #12]
 8001108:	075a      	lsls	r2, r3, #29
 800110a:	d505      	bpl.n	8001118 <__sflush_r+0x48>
 800110c:	6863      	ldr	r3, [r4, #4]
 800110e:	1ac0      	subs	r0, r0, r3
 8001110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001112:	b10b      	cbz	r3, 8001118 <__sflush_r+0x48>
 8001114:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001116:	1ac0      	subs	r0, r0, r3
 8001118:	2300      	movs	r3, #0
 800111a:	4602      	mov	r2, r0
 800111c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800111e:	6a21      	ldr	r1, [r4, #32]
 8001120:	4628      	mov	r0, r5
 8001122:	47b0      	blx	r6
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	89a3      	ldrh	r3, [r4, #12]
 8001128:	d106      	bne.n	8001138 <__sflush_r+0x68>
 800112a:	6829      	ldr	r1, [r5, #0]
 800112c:	291d      	cmp	r1, #29
 800112e:	d848      	bhi.n	80011c2 <__sflush_r+0xf2>
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <__sflush_r+0x108>)
 8001132:	40ca      	lsrs	r2, r1
 8001134:	07d6      	lsls	r6, r2, #31
 8001136:	d544      	bpl.n	80011c2 <__sflush_r+0xf2>
 8001138:	2200      	movs	r2, #0
 800113a:	6062      	str	r2, [r4, #4]
 800113c:	04d9      	lsls	r1, r3, #19
 800113e:	6922      	ldr	r2, [r4, #16]
 8001140:	6022      	str	r2, [r4, #0]
 8001142:	d504      	bpl.n	800114e <__sflush_r+0x7e>
 8001144:	1c42      	adds	r2, r0, #1
 8001146:	d101      	bne.n	800114c <__sflush_r+0x7c>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	b903      	cbnz	r3, 800114e <__sflush_r+0x7e>
 800114c:	6560      	str	r0, [r4, #84]	; 0x54
 800114e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001150:	602f      	str	r7, [r5, #0]
 8001152:	2900      	cmp	r1, #0
 8001154:	d0c9      	beq.n	80010ea <__sflush_r+0x1a>
 8001156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800115a:	4299      	cmp	r1, r3
 800115c:	d002      	beq.n	8001164 <__sflush_r+0x94>
 800115e:	4628      	mov	r0, r5
 8001160:	f000 f994 	bl	800148c <_free_r>
 8001164:	2000      	movs	r0, #0
 8001166:	6360      	str	r0, [r4, #52]	; 0x34
 8001168:	e7c0      	b.n	80010ec <__sflush_r+0x1c>
 800116a:	2301      	movs	r3, #1
 800116c:	4628      	mov	r0, r5
 800116e:	47b0      	blx	r6
 8001170:	1c41      	adds	r1, r0, #1
 8001172:	d1c8      	bne.n	8001106 <__sflush_r+0x36>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0c5      	beq.n	8001106 <__sflush_r+0x36>
 800117a:	2b1d      	cmp	r3, #29
 800117c:	d001      	beq.n	8001182 <__sflush_r+0xb2>
 800117e:	2b16      	cmp	r3, #22
 8001180:	d101      	bne.n	8001186 <__sflush_r+0xb6>
 8001182:	602f      	str	r7, [r5, #0]
 8001184:	e7b1      	b.n	80010ea <__sflush_r+0x1a>
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118c:	81a3      	strh	r3, [r4, #12]
 800118e:	e7ad      	b.n	80010ec <__sflush_r+0x1c>
 8001190:	690f      	ldr	r7, [r1, #16]
 8001192:	2f00      	cmp	r7, #0
 8001194:	d0a9      	beq.n	80010ea <__sflush_r+0x1a>
 8001196:	0793      	lsls	r3, r2, #30
 8001198:	680e      	ldr	r6, [r1, #0]
 800119a:	bf08      	it	eq
 800119c:	694b      	ldreq	r3, [r1, #20]
 800119e:	600f      	str	r7, [r1, #0]
 80011a0:	bf18      	it	ne
 80011a2:	2300      	movne	r3, #0
 80011a4:	eba6 0807 	sub.w	r8, r6, r7
 80011a8:	608b      	str	r3, [r1, #8]
 80011aa:	f1b8 0f00 	cmp.w	r8, #0
 80011ae:	dd9c      	ble.n	80010ea <__sflush_r+0x1a>
 80011b0:	4643      	mov	r3, r8
 80011b2:	463a      	mov	r2, r7
 80011b4:	6a21      	ldr	r1, [r4, #32]
 80011b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011b8:	4628      	mov	r0, r5
 80011ba:	47b0      	blx	r6
 80011bc:	2800      	cmp	r0, #0
 80011be:	dc06      	bgt.n	80011ce <__sflush_r+0xfe>
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c6:	81a3      	strh	r3, [r4, #12]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	e78e      	b.n	80010ec <__sflush_r+0x1c>
 80011ce:	4407      	add	r7, r0
 80011d0:	eba8 0800 	sub.w	r8, r8, r0
 80011d4:	e7e9      	b.n	80011aa <__sflush_r+0xda>
 80011d6:	bf00      	nop
 80011d8:	20400001 	.word	0x20400001

080011dc <_fflush_r>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	690b      	ldr	r3, [r1, #16]
 80011e0:	4605      	mov	r5, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	b1db      	cbz	r3, 800121e <_fflush_r+0x42>
 80011e6:	b118      	cbz	r0, 80011f0 <_fflush_r+0x14>
 80011e8:	6983      	ldr	r3, [r0, #24]
 80011ea:	b90b      	cbnz	r3, 80011f0 <_fflush_r+0x14>
 80011ec:	f000 f860 	bl	80012b0 <__sinit>
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <_fflush_r+0x48>)
 80011f2:	429c      	cmp	r4, r3
 80011f4:	d109      	bne.n	800120a <_fflush_r+0x2e>
 80011f6:	686c      	ldr	r4, [r5, #4]
 80011f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011fc:	b17b      	cbz	r3, 800121e <_fflush_r+0x42>
 80011fe:	4621      	mov	r1, r4
 8001200:	4628      	mov	r0, r5
 8001202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001206:	f7ff bf63 	b.w	80010d0 <__sflush_r>
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_fflush_r+0x4c>)
 800120c:	429c      	cmp	r4, r3
 800120e:	d101      	bne.n	8001214 <_fflush_r+0x38>
 8001210:	68ac      	ldr	r4, [r5, #8]
 8001212:	e7f1      	b.n	80011f8 <_fflush_r+0x1c>
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <_fflush_r+0x50>)
 8001216:	429c      	cmp	r4, r3
 8001218:	bf08      	it	eq
 800121a:	68ec      	ldreq	r4, [r5, #12]
 800121c:	e7ec      	b.n	80011f8 <_fflush_r+0x1c>
 800121e:	2000      	movs	r0, #0
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	bf00      	nop
 8001224:	080022fc 	.word	0x080022fc
 8001228:	0800231c 	.word	0x0800231c
 800122c:	080022dc 	.word	0x080022dc

08001230 <std>:
 8001230:	2300      	movs	r3, #0
 8001232:	b510      	push	{r4, lr}
 8001234:	4604      	mov	r4, r0
 8001236:	e9c0 3300 	strd	r3, r3, [r0]
 800123a:	6083      	str	r3, [r0, #8]
 800123c:	8181      	strh	r1, [r0, #12]
 800123e:	6643      	str	r3, [r0, #100]	; 0x64
 8001240:	81c2      	strh	r2, [r0, #14]
 8001242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001246:	6183      	str	r3, [r0, #24]
 8001248:	4619      	mov	r1, r3
 800124a:	2208      	movs	r2, #8
 800124c:	305c      	adds	r0, #92	; 0x5c
 800124e:	f7ff fdfb 	bl	8000e48 <memset>
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <std+0x38>)
 8001254:	6263      	str	r3, [r4, #36]	; 0x24
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <std+0x3c>)
 8001258:	62a3      	str	r3, [r4, #40]	; 0x28
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <std+0x40>)
 800125c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <std+0x44>)
 8001260:	6224      	str	r4, [r4, #32]
 8001262:	6323      	str	r3, [r4, #48]	; 0x30
 8001264:	bd10      	pop	{r4, pc}
 8001266:	bf00      	nop
 8001268:	08001b8d 	.word	0x08001b8d
 800126c:	08001baf 	.word	0x08001baf
 8001270:	08001be7 	.word	0x08001be7
 8001274:	08001c0b 	.word	0x08001c0b

08001278 <_cleanup_r>:
 8001278:	4901      	ldr	r1, [pc, #4]	; (8001280 <_cleanup_r+0x8>)
 800127a:	f000 b885 	b.w	8001388 <_fwalk_reent>
 800127e:	bf00      	nop
 8001280:	080011dd 	.word	0x080011dd

08001284 <__sfmoreglue>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	1e4a      	subs	r2, r1, #1
 8001288:	2568      	movs	r5, #104	; 0x68
 800128a:	4355      	muls	r5, r2
 800128c:	460e      	mov	r6, r1
 800128e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001292:	f000 f949 	bl	8001528 <_malloc_r>
 8001296:	4604      	mov	r4, r0
 8001298:	b140      	cbz	r0, 80012ac <__sfmoreglue+0x28>
 800129a:	2100      	movs	r1, #0
 800129c:	e9c0 1600 	strd	r1, r6, [r0]
 80012a0:	300c      	adds	r0, #12
 80012a2:	60a0      	str	r0, [r4, #8]
 80012a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80012a8:	f7ff fdce 	bl	8000e48 <memset>
 80012ac:	4620      	mov	r0, r4
 80012ae:	bd70      	pop	{r4, r5, r6, pc}

080012b0 <__sinit>:
 80012b0:	6983      	ldr	r3, [r0, #24]
 80012b2:	b510      	push	{r4, lr}
 80012b4:	4604      	mov	r4, r0
 80012b6:	bb33      	cbnz	r3, 8001306 <__sinit+0x56>
 80012b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80012bc:	6503      	str	r3, [r0, #80]	; 0x50
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <__sinit+0x58>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <__sinit+0x5c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6282      	str	r2, [r0, #40]	; 0x28
 80012c6:	4298      	cmp	r0, r3
 80012c8:	bf04      	itt	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	6183      	streq	r3, [r0, #24]
 80012ce:	f000 f81f 	bl	8001310 <__sfp>
 80012d2:	6060      	str	r0, [r4, #4]
 80012d4:	4620      	mov	r0, r4
 80012d6:	f000 f81b 	bl	8001310 <__sfp>
 80012da:	60a0      	str	r0, [r4, #8]
 80012dc:	4620      	mov	r0, r4
 80012de:	f000 f817 	bl	8001310 <__sfp>
 80012e2:	2200      	movs	r2, #0
 80012e4:	60e0      	str	r0, [r4, #12]
 80012e6:	2104      	movs	r1, #4
 80012e8:	6860      	ldr	r0, [r4, #4]
 80012ea:	f7ff ffa1 	bl	8001230 <std>
 80012ee:	2201      	movs	r2, #1
 80012f0:	2109      	movs	r1, #9
 80012f2:	68a0      	ldr	r0, [r4, #8]
 80012f4:	f7ff ff9c 	bl	8001230 <std>
 80012f8:	2202      	movs	r2, #2
 80012fa:	2112      	movs	r1, #18
 80012fc:	68e0      	ldr	r0, [r4, #12]
 80012fe:	f7ff ff97 	bl	8001230 <std>
 8001302:	2301      	movs	r3, #1
 8001304:	61a3      	str	r3, [r4, #24]
 8001306:	bd10      	pop	{r4, pc}
 8001308:	080022d8 	.word	0x080022d8
 800130c:	08001279 	.word	0x08001279

08001310 <__sfp>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <__sfp+0x70>)
 8001314:	681e      	ldr	r6, [r3, #0]
 8001316:	69b3      	ldr	r3, [r6, #24]
 8001318:	4607      	mov	r7, r0
 800131a:	b913      	cbnz	r3, 8001322 <__sfp+0x12>
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff ffc7 	bl	80012b0 <__sinit>
 8001322:	3648      	adds	r6, #72	; 0x48
 8001324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001328:	3b01      	subs	r3, #1
 800132a:	d503      	bpl.n	8001334 <__sfp+0x24>
 800132c:	6833      	ldr	r3, [r6, #0]
 800132e:	b133      	cbz	r3, 800133e <__sfp+0x2e>
 8001330:	6836      	ldr	r6, [r6, #0]
 8001332:	e7f7      	b.n	8001324 <__sfp+0x14>
 8001334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001338:	b16d      	cbz	r5, 8001356 <__sfp+0x46>
 800133a:	3468      	adds	r4, #104	; 0x68
 800133c:	e7f4      	b.n	8001328 <__sfp+0x18>
 800133e:	2104      	movs	r1, #4
 8001340:	4638      	mov	r0, r7
 8001342:	f7ff ff9f 	bl	8001284 <__sfmoreglue>
 8001346:	6030      	str	r0, [r6, #0]
 8001348:	2800      	cmp	r0, #0
 800134a:	d1f1      	bne.n	8001330 <__sfp+0x20>
 800134c:	230c      	movs	r3, #12
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4604      	mov	r4, r0
 8001352:	4620      	mov	r0, r4
 8001354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <__sfp+0x74>)
 8001358:	6665      	str	r5, [r4, #100]	; 0x64
 800135a:	e9c4 5500 	strd	r5, r5, [r4]
 800135e:	60a5      	str	r5, [r4, #8]
 8001360:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001364:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001368:	2208      	movs	r2, #8
 800136a:	4629      	mov	r1, r5
 800136c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001370:	f7ff fd6a 	bl	8000e48 <memset>
 8001374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800137c:	e7e9      	b.n	8001352 <__sfp+0x42>
 800137e:	bf00      	nop
 8001380:	080022d8 	.word	0x080022d8
 8001384:	ffff0001 	.word	0xffff0001

08001388 <_fwalk_reent>:
 8001388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800138c:	4680      	mov	r8, r0
 800138e:	4689      	mov	r9, r1
 8001390:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001394:	2600      	movs	r6, #0
 8001396:	b914      	cbnz	r4, 800139e <_fwalk_reent+0x16>
 8001398:	4630      	mov	r0, r6
 800139a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800139e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80013a2:	3f01      	subs	r7, #1
 80013a4:	d501      	bpl.n	80013aa <_fwalk_reent+0x22>
 80013a6:	6824      	ldr	r4, [r4, #0]
 80013a8:	e7f5      	b.n	8001396 <_fwalk_reent+0xe>
 80013aa:	89ab      	ldrh	r3, [r5, #12]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d907      	bls.n	80013c0 <_fwalk_reent+0x38>
 80013b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013b4:	3301      	adds	r3, #1
 80013b6:	d003      	beq.n	80013c0 <_fwalk_reent+0x38>
 80013b8:	4629      	mov	r1, r5
 80013ba:	4640      	mov	r0, r8
 80013bc:	47c8      	blx	r9
 80013be:	4306      	orrs	r6, r0
 80013c0:	3568      	adds	r5, #104	; 0x68
 80013c2:	e7ee      	b.n	80013a2 <_fwalk_reent+0x1a>

080013c4 <__swhatbuf_r>:
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	460e      	mov	r6, r1
 80013c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013cc:	2900      	cmp	r1, #0
 80013ce:	b096      	sub	sp, #88	; 0x58
 80013d0:	4614      	mov	r4, r2
 80013d2:	461d      	mov	r5, r3
 80013d4:	da07      	bge.n	80013e6 <__swhatbuf_r+0x22>
 80013d6:	2300      	movs	r3, #0
 80013d8:	602b      	str	r3, [r5, #0]
 80013da:	89b3      	ldrh	r3, [r6, #12]
 80013dc:	061a      	lsls	r2, r3, #24
 80013de:	d410      	bmi.n	8001402 <__swhatbuf_r+0x3e>
 80013e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e4:	e00e      	b.n	8001404 <__swhatbuf_r+0x40>
 80013e6:	466a      	mov	r2, sp
 80013e8:	f000 fc36 	bl	8001c58 <_fstat_r>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	dbf2      	blt.n	80013d6 <__swhatbuf_r+0x12>
 80013f0:	9a01      	ldr	r2, [sp, #4]
 80013f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013fa:	425a      	negs	r2, r3
 80013fc:	415a      	adcs	r2, r3
 80013fe:	602a      	str	r2, [r5, #0]
 8001400:	e7ee      	b.n	80013e0 <__swhatbuf_r+0x1c>
 8001402:	2340      	movs	r3, #64	; 0x40
 8001404:	2000      	movs	r0, #0
 8001406:	6023      	str	r3, [r4, #0]
 8001408:	b016      	add	sp, #88	; 0x58
 800140a:	bd70      	pop	{r4, r5, r6, pc}

0800140c <__smakebuf_r>:
 800140c:	898b      	ldrh	r3, [r1, #12]
 800140e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001410:	079d      	lsls	r5, r3, #30
 8001412:	4606      	mov	r6, r0
 8001414:	460c      	mov	r4, r1
 8001416:	d507      	bpl.n	8001428 <__smakebuf_r+0x1c>
 8001418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	6123      	str	r3, [r4, #16]
 8001420:	2301      	movs	r3, #1
 8001422:	6163      	str	r3, [r4, #20]
 8001424:	b002      	add	sp, #8
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	ab01      	add	r3, sp, #4
 800142a:	466a      	mov	r2, sp
 800142c:	f7ff ffca 	bl	80013c4 <__swhatbuf_r>
 8001430:	9900      	ldr	r1, [sp, #0]
 8001432:	4605      	mov	r5, r0
 8001434:	4630      	mov	r0, r6
 8001436:	f000 f877 	bl	8001528 <_malloc_r>
 800143a:	b948      	cbnz	r0, 8001450 <__smakebuf_r+0x44>
 800143c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001440:	059a      	lsls	r2, r3, #22
 8001442:	d4ef      	bmi.n	8001424 <__smakebuf_r+0x18>
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	81a3      	strh	r3, [r4, #12]
 800144e:	e7e3      	b.n	8001418 <__smakebuf_r+0xc>
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <__smakebuf_r+0x7c>)
 8001452:	62b3      	str	r3, [r6, #40]	; 0x28
 8001454:	89a3      	ldrh	r3, [r4, #12]
 8001456:	6020      	str	r0, [r4, #0]
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	81a3      	strh	r3, [r4, #12]
 800145e:	9b00      	ldr	r3, [sp, #0]
 8001460:	6163      	str	r3, [r4, #20]
 8001462:	9b01      	ldr	r3, [sp, #4]
 8001464:	6120      	str	r0, [r4, #16]
 8001466:	b15b      	cbz	r3, 8001480 <__smakebuf_r+0x74>
 8001468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800146c:	4630      	mov	r0, r6
 800146e:	f000 fc05 	bl	8001c7c <_isatty_r>
 8001472:	b128      	cbz	r0, 8001480 <__smakebuf_r+0x74>
 8001474:	89a3      	ldrh	r3, [r4, #12]
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	431d      	orrs	r5, r3
 8001484:	81a5      	strh	r5, [r4, #12]
 8001486:	e7cd      	b.n	8001424 <__smakebuf_r+0x18>
 8001488:	08001279 	.word	0x08001279

0800148c <_free_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	4605      	mov	r5, r0
 8001490:	2900      	cmp	r1, #0
 8001492:	d045      	beq.n	8001520 <_free_r+0x94>
 8001494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001498:	1f0c      	subs	r4, r1, #4
 800149a:	2b00      	cmp	r3, #0
 800149c:	bfb8      	it	lt
 800149e:	18e4      	addlt	r4, r4, r3
 80014a0:	f000 fc0e 	bl	8001cc0 <__malloc_lock>
 80014a4:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <_free_r+0x98>)
 80014a6:	6813      	ldr	r3, [r2, #0]
 80014a8:	4610      	mov	r0, r2
 80014aa:	b933      	cbnz	r3, 80014ba <_free_r+0x2e>
 80014ac:	6063      	str	r3, [r4, #4]
 80014ae:	6014      	str	r4, [r2, #0]
 80014b0:	4628      	mov	r0, r5
 80014b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014b6:	f000 bc04 	b.w	8001cc2 <__malloc_unlock>
 80014ba:	42a3      	cmp	r3, r4
 80014bc:	d90c      	bls.n	80014d8 <_free_r+0x4c>
 80014be:	6821      	ldr	r1, [r4, #0]
 80014c0:	1862      	adds	r2, r4, r1
 80014c2:	4293      	cmp	r3, r2
 80014c4:	bf04      	itt	eq
 80014c6:	681a      	ldreq	r2, [r3, #0]
 80014c8:	685b      	ldreq	r3, [r3, #4]
 80014ca:	6063      	str	r3, [r4, #4]
 80014cc:	bf04      	itt	eq
 80014ce:	1852      	addeq	r2, r2, r1
 80014d0:	6022      	streq	r2, [r4, #0]
 80014d2:	6004      	str	r4, [r0, #0]
 80014d4:	e7ec      	b.n	80014b0 <_free_r+0x24>
 80014d6:	4613      	mov	r3, r2
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	b10a      	cbz	r2, 80014e0 <_free_r+0x54>
 80014dc:	42a2      	cmp	r2, r4
 80014de:	d9fa      	bls.n	80014d6 <_free_r+0x4a>
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	1858      	adds	r0, r3, r1
 80014e4:	42a0      	cmp	r0, r4
 80014e6:	d10b      	bne.n	8001500 <_free_r+0x74>
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	4401      	add	r1, r0
 80014ec:	1858      	adds	r0, r3, r1
 80014ee:	4282      	cmp	r2, r0
 80014f0:	6019      	str	r1, [r3, #0]
 80014f2:	d1dd      	bne.n	80014b0 <_free_r+0x24>
 80014f4:	6810      	ldr	r0, [r2, #0]
 80014f6:	6852      	ldr	r2, [r2, #4]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	4401      	add	r1, r0
 80014fc:	6019      	str	r1, [r3, #0]
 80014fe:	e7d7      	b.n	80014b0 <_free_r+0x24>
 8001500:	d902      	bls.n	8001508 <_free_r+0x7c>
 8001502:	230c      	movs	r3, #12
 8001504:	602b      	str	r3, [r5, #0]
 8001506:	e7d3      	b.n	80014b0 <_free_r+0x24>
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	1821      	adds	r1, r4, r0
 800150c:	428a      	cmp	r2, r1
 800150e:	bf04      	itt	eq
 8001510:	6811      	ldreq	r1, [r2, #0]
 8001512:	6852      	ldreq	r2, [r2, #4]
 8001514:	6062      	str	r2, [r4, #4]
 8001516:	bf04      	itt	eq
 8001518:	1809      	addeq	r1, r1, r0
 800151a:	6021      	streq	r1, [r4, #0]
 800151c:	605c      	str	r4, [r3, #4]
 800151e:	e7c7      	b.n	80014b0 <_free_r+0x24>
 8001520:	bd38      	pop	{r3, r4, r5, pc}
 8001522:	bf00      	nop
 8001524:	2000008c 	.word	0x2000008c

08001528 <_malloc_r>:
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	1ccd      	adds	r5, r1, #3
 800152c:	f025 0503 	bic.w	r5, r5, #3
 8001530:	3508      	adds	r5, #8
 8001532:	2d0c      	cmp	r5, #12
 8001534:	bf38      	it	cc
 8001536:	250c      	movcc	r5, #12
 8001538:	2d00      	cmp	r5, #0
 800153a:	4606      	mov	r6, r0
 800153c:	db01      	blt.n	8001542 <_malloc_r+0x1a>
 800153e:	42a9      	cmp	r1, r5
 8001540:	d903      	bls.n	800154a <_malloc_r+0x22>
 8001542:	230c      	movs	r3, #12
 8001544:	6033      	str	r3, [r6, #0]
 8001546:	2000      	movs	r0, #0
 8001548:	bd70      	pop	{r4, r5, r6, pc}
 800154a:	f000 fbb9 	bl	8001cc0 <__malloc_lock>
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <_malloc_r+0xac>)
 8001550:	6814      	ldr	r4, [r2, #0]
 8001552:	4621      	mov	r1, r4
 8001554:	b991      	cbnz	r1, 800157c <_malloc_r+0x54>
 8001556:	4c20      	ldr	r4, [pc, #128]	; (80015d8 <_malloc_r+0xb0>)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	b91b      	cbnz	r3, 8001564 <_malloc_r+0x3c>
 800155c:	4630      	mov	r0, r6
 800155e:	f000 fb05 	bl	8001b6c <_sbrk_r>
 8001562:	6020      	str	r0, [r4, #0]
 8001564:	4629      	mov	r1, r5
 8001566:	4630      	mov	r0, r6
 8001568:	f000 fb00 	bl	8001b6c <_sbrk_r>
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	d124      	bne.n	80015ba <_malloc_r+0x92>
 8001570:	230c      	movs	r3, #12
 8001572:	6033      	str	r3, [r6, #0]
 8001574:	4630      	mov	r0, r6
 8001576:	f000 fba4 	bl	8001cc2 <__malloc_unlock>
 800157a:	e7e4      	b.n	8001546 <_malloc_r+0x1e>
 800157c:	680b      	ldr	r3, [r1, #0]
 800157e:	1b5b      	subs	r3, r3, r5
 8001580:	d418      	bmi.n	80015b4 <_malloc_r+0x8c>
 8001582:	2b0b      	cmp	r3, #11
 8001584:	d90f      	bls.n	80015a6 <_malloc_r+0x7e>
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	50cd      	str	r5, [r1, r3]
 800158a:	18cc      	adds	r4, r1, r3
 800158c:	4630      	mov	r0, r6
 800158e:	f000 fb98 	bl	8001cc2 <__malloc_unlock>
 8001592:	f104 000b 	add.w	r0, r4, #11
 8001596:	1d23      	adds	r3, r4, #4
 8001598:	f020 0007 	bic.w	r0, r0, #7
 800159c:	1ac3      	subs	r3, r0, r3
 800159e:	d0d3      	beq.n	8001548 <_malloc_r+0x20>
 80015a0:	425a      	negs	r2, r3
 80015a2:	50e2      	str	r2, [r4, r3]
 80015a4:	e7d0      	b.n	8001548 <_malloc_r+0x20>
 80015a6:	428c      	cmp	r4, r1
 80015a8:	684b      	ldr	r3, [r1, #4]
 80015aa:	bf16      	itet	ne
 80015ac:	6063      	strne	r3, [r4, #4]
 80015ae:	6013      	streq	r3, [r2, #0]
 80015b0:	460c      	movne	r4, r1
 80015b2:	e7eb      	b.n	800158c <_malloc_r+0x64>
 80015b4:	460c      	mov	r4, r1
 80015b6:	6849      	ldr	r1, [r1, #4]
 80015b8:	e7cc      	b.n	8001554 <_malloc_r+0x2c>
 80015ba:	1cc4      	adds	r4, r0, #3
 80015bc:	f024 0403 	bic.w	r4, r4, #3
 80015c0:	42a0      	cmp	r0, r4
 80015c2:	d005      	beq.n	80015d0 <_malloc_r+0xa8>
 80015c4:	1a21      	subs	r1, r4, r0
 80015c6:	4630      	mov	r0, r6
 80015c8:	f000 fad0 	bl	8001b6c <_sbrk_r>
 80015cc:	3001      	adds	r0, #1
 80015ce:	d0cf      	beq.n	8001570 <_malloc_r+0x48>
 80015d0:	6025      	str	r5, [r4, #0]
 80015d2:	e7db      	b.n	800158c <_malloc_r+0x64>
 80015d4:	2000008c 	.word	0x2000008c
 80015d8:	20000090 	.word	0x20000090

080015dc <__sfputc_r>:
 80015dc:	6893      	ldr	r3, [r2, #8]
 80015de:	3b01      	subs	r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	b410      	push	{r4}
 80015e4:	6093      	str	r3, [r2, #8]
 80015e6:	da08      	bge.n	80015fa <__sfputc_r+0x1e>
 80015e8:	6994      	ldr	r4, [r2, #24]
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	db01      	blt.n	80015f2 <__sfputc_r+0x16>
 80015ee:	290a      	cmp	r1, #10
 80015f0:	d103      	bne.n	80015fa <__sfputc_r+0x1e>
 80015f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015f6:	f7ff bcab 	b.w	8000f50 <__swbuf_r>
 80015fa:	6813      	ldr	r3, [r2, #0]
 80015fc:	1c58      	adds	r0, r3, #1
 80015fe:	6010      	str	r0, [r2, #0]
 8001600:	7019      	strb	r1, [r3, #0]
 8001602:	4608      	mov	r0, r1
 8001604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001608:	4770      	bx	lr

0800160a <__sfputs_r>:
 800160a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160c:	4606      	mov	r6, r0
 800160e:	460f      	mov	r7, r1
 8001610:	4614      	mov	r4, r2
 8001612:	18d5      	adds	r5, r2, r3
 8001614:	42ac      	cmp	r4, r5
 8001616:	d101      	bne.n	800161c <__sfputs_r+0x12>
 8001618:	2000      	movs	r0, #0
 800161a:	e007      	b.n	800162c <__sfputs_r+0x22>
 800161c:	463a      	mov	r2, r7
 800161e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001622:	4630      	mov	r0, r6
 8001624:	f7ff ffda 	bl	80015dc <__sfputc_r>
 8001628:	1c43      	adds	r3, r0, #1
 800162a:	d1f3      	bne.n	8001614 <__sfputs_r+0xa>
 800162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001630 <_vfiprintf_r>:
 8001630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001634:	460c      	mov	r4, r1
 8001636:	b09d      	sub	sp, #116	; 0x74
 8001638:	4617      	mov	r7, r2
 800163a:	461d      	mov	r5, r3
 800163c:	4606      	mov	r6, r0
 800163e:	b118      	cbz	r0, 8001648 <_vfiprintf_r+0x18>
 8001640:	6983      	ldr	r3, [r0, #24]
 8001642:	b90b      	cbnz	r3, 8001648 <_vfiprintf_r+0x18>
 8001644:	f7ff fe34 	bl	80012b0 <__sinit>
 8001648:	4b7c      	ldr	r3, [pc, #496]	; (800183c <_vfiprintf_r+0x20c>)
 800164a:	429c      	cmp	r4, r3
 800164c:	d158      	bne.n	8001700 <_vfiprintf_r+0xd0>
 800164e:	6874      	ldr	r4, [r6, #4]
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	0718      	lsls	r0, r3, #28
 8001654:	d55e      	bpl.n	8001714 <_vfiprintf_r+0xe4>
 8001656:	6923      	ldr	r3, [r4, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d05b      	beq.n	8001714 <_vfiprintf_r+0xe4>
 800165c:	2300      	movs	r3, #0
 800165e:	9309      	str	r3, [sp, #36]	; 0x24
 8001660:	2320      	movs	r3, #32
 8001662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001666:	2330      	movs	r3, #48	; 0x30
 8001668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800166c:	9503      	str	r5, [sp, #12]
 800166e:	f04f 0b01 	mov.w	fp, #1
 8001672:	46b8      	mov	r8, r7
 8001674:	4645      	mov	r5, r8
 8001676:	f815 3b01 	ldrb.w	r3, [r5], #1
 800167a:	b10b      	cbz	r3, 8001680 <_vfiprintf_r+0x50>
 800167c:	2b25      	cmp	r3, #37	; 0x25
 800167e:	d154      	bne.n	800172a <_vfiprintf_r+0xfa>
 8001680:	ebb8 0a07 	subs.w	sl, r8, r7
 8001684:	d00b      	beq.n	800169e <_vfiprintf_r+0x6e>
 8001686:	4653      	mov	r3, sl
 8001688:	463a      	mov	r2, r7
 800168a:	4621      	mov	r1, r4
 800168c:	4630      	mov	r0, r6
 800168e:	f7ff ffbc 	bl	800160a <__sfputs_r>
 8001692:	3001      	adds	r0, #1
 8001694:	f000 80c2 	beq.w	800181c <_vfiprintf_r+0x1ec>
 8001698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169a:	4453      	add	r3, sl
 800169c:	9309      	str	r3, [sp, #36]	; 0x24
 800169e:	f898 3000 	ldrb.w	r3, [r8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80ba 	beq.w	800181c <_vfiprintf_r+0x1ec>
 80016a8:	2300      	movs	r3, #0
 80016aa:	f04f 32ff 	mov.w	r2, #4294967295
 80016ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	9307      	str	r3, [sp, #28]
 80016b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016ba:	931a      	str	r3, [sp, #104]	; 0x68
 80016bc:	46a8      	mov	r8, r5
 80016be:	2205      	movs	r2, #5
 80016c0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80016c4:	485e      	ldr	r0, [pc, #376]	; (8001840 <_vfiprintf_r+0x210>)
 80016c6:	f7fe fda3 	bl	8000210 <memchr>
 80016ca:	9b04      	ldr	r3, [sp, #16]
 80016cc:	bb78      	cbnz	r0, 800172e <_vfiprintf_r+0xfe>
 80016ce:	06d9      	lsls	r1, r3, #27
 80016d0:	bf44      	itt	mi
 80016d2:	2220      	movmi	r2, #32
 80016d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80016d8:	071a      	lsls	r2, r3, #28
 80016da:	bf44      	itt	mi
 80016dc:	222b      	movmi	r2, #43	; 0x2b
 80016de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80016e2:	782a      	ldrb	r2, [r5, #0]
 80016e4:	2a2a      	cmp	r2, #42	; 0x2a
 80016e6:	d02a      	beq.n	800173e <_vfiprintf_r+0x10e>
 80016e8:	9a07      	ldr	r2, [sp, #28]
 80016ea:	46a8      	mov	r8, r5
 80016ec:	2000      	movs	r0, #0
 80016ee:	250a      	movs	r5, #10
 80016f0:	4641      	mov	r1, r8
 80016f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016f6:	3b30      	subs	r3, #48	; 0x30
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d969      	bls.n	80017d0 <_vfiprintf_r+0x1a0>
 80016fc:	b360      	cbz	r0, 8001758 <_vfiprintf_r+0x128>
 80016fe:	e024      	b.n	800174a <_vfiprintf_r+0x11a>
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <_vfiprintf_r+0x214>)
 8001702:	429c      	cmp	r4, r3
 8001704:	d101      	bne.n	800170a <_vfiprintf_r+0xda>
 8001706:	68b4      	ldr	r4, [r6, #8]
 8001708:	e7a2      	b.n	8001650 <_vfiprintf_r+0x20>
 800170a:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <_vfiprintf_r+0x218>)
 800170c:	429c      	cmp	r4, r3
 800170e:	bf08      	it	eq
 8001710:	68f4      	ldreq	r4, [r6, #12]
 8001712:	e79d      	b.n	8001650 <_vfiprintf_r+0x20>
 8001714:	4621      	mov	r1, r4
 8001716:	4630      	mov	r0, r6
 8001718:	f7ff fc6c 	bl	8000ff4 <__swsetup_r>
 800171c:	2800      	cmp	r0, #0
 800171e:	d09d      	beq.n	800165c <_vfiprintf_r+0x2c>
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	b01d      	add	sp, #116	; 0x74
 8001726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800172a:	46a8      	mov	r8, r5
 800172c:	e7a2      	b.n	8001674 <_vfiprintf_r+0x44>
 800172e:	4a44      	ldr	r2, [pc, #272]	; (8001840 <_vfiprintf_r+0x210>)
 8001730:	1a80      	subs	r0, r0, r2
 8001732:	fa0b f000 	lsl.w	r0, fp, r0
 8001736:	4318      	orrs	r0, r3
 8001738:	9004      	str	r0, [sp, #16]
 800173a:	4645      	mov	r5, r8
 800173c:	e7be      	b.n	80016bc <_vfiprintf_r+0x8c>
 800173e:	9a03      	ldr	r2, [sp, #12]
 8001740:	1d11      	adds	r1, r2, #4
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	9103      	str	r1, [sp, #12]
 8001746:	2a00      	cmp	r2, #0
 8001748:	db01      	blt.n	800174e <_vfiprintf_r+0x11e>
 800174a:	9207      	str	r2, [sp, #28]
 800174c:	e004      	b.n	8001758 <_vfiprintf_r+0x128>
 800174e:	4252      	negs	r2, r2
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	9207      	str	r2, [sp, #28]
 8001756:	9304      	str	r3, [sp, #16]
 8001758:	f898 3000 	ldrb.w	r3, [r8]
 800175c:	2b2e      	cmp	r3, #46	; 0x2e
 800175e:	d10e      	bne.n	800177e <_vfiprintf_r+0x14e>
 8001760:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001764:	2b2a      	cmp	r3, #42	; 0x2a
 8001766:	d138      	bne.n	80017da <_vfiprintf_r+0x1aa>
 8001768:	9b03      	ldr	r3, [sp, #12]
 800176a:	1d1a      	adds	r2, r3, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	9203      	str	r2, [sp, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	bfb8      	it	lt
 8001774:	f04f 33ff 	movlt.w	r3, #4294967295
 8001778:	f108 0802 	add.w	r8, r8, #2
 800177c:	9305      	str	r3, [sp, #20]
 800177e:	4d33      	ldr	r5, [pc, #204]	; (800184c <_vfiprintf_r+0x21c>)
 8001780:	f898 1000 	ldrb.w	r1, [r8]
 8001784:	2203      	movs	r2, #3
 8001786:	4628      	mov	r0, r5
 8001788:	f7fe fd42 	bl	8000210 <memchr>
 800178c:	b140      	cbz	r0, 80017a0 <_vfiprintf_r+0x170>
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	1b40      	subs	r0, r0, r5
 8001792:	fa03 f000 	lsl.w	r0, r3, r0
 8001796:	9b04      	ldr	r3, [sp, #16]
 8001798:	4303      	orrs	r3, r0
 800179a:	f108 0801 	add.w	r8, r8, #1
 800179e:	9304      	str	r3, [sp, #16]
 80017a0:	f898 1000 	ldrb.w	r1, [r8]
 80017a4:	482a      	ldr	r0, [pc, #168]	; (8001850 <_vfiprintf_r+0x220>)
 80017a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017aa:	2206      	movs	r2, #6
 80017ac:	f108 0701 	add.w	r7, r8, #1
 80017b0:	f7fe fd2e 	bl	8000210 <memchr>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d037      	beq.n	8001828 <_vfiprintf_r+0x1f8>
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <_vfiprintf_r+0x224>)
 80017ba:	bb1b      	cbnz	r3, 8001804 <_vfiprintf_r+0x1d4>
 80017bc:	9b03      	ldr	r3, [sp, #12]
 80017be:	3307      	adds	r3, #7
 80017c0:	f023 0307 	bic.w	r3, r3, #7
 80017c4:	3308      	adds	r3, #8
 80017c6:	9303      	str	r3, [sp, #12]
 80017c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017ca:	444b      	add	r3, r9
 80017cc:	9309      	str	r3, [sp, #36]	; 0x24
 80017ce:	e750      	b.n	8001672 <_vfiprintf_r+0x42>
 80017d0:	fb05 3202 	mla	r2, r5, r2, r3
 80017d4:	2001      	movs	r0, #1
 80017d6:	4688      	mov	r8, r1
 80017d8:	e78a      	b.n	80016f0 <_vfiprintf_r+0xc0>
 80017da:	2300      	movs	r3, #0
 80017dc:	f108 0801 	add.w	r8, r8, #1
 80017e0:	9305      	str	r3, [sp, #20]
 80017e2:	4619      	mov	r1, r3
 80017e4:	250a      	movs	r5, #10
 80017e6:	4640      	mov	r0, r8
 80017e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017ec:	3a30      	subs	r2, #48	; 0x30
 80017ee:	2a09      	cmp	r2, #9
 80017f0:	d903      	bls.n	80017fa <_vfiprintf_r+0x1ca>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0c3      	beq.n	800177e <_vfiprintf_r+0x14e>
 80017f6:	9105      	str	r1, [sp, #20]
 80017f8:	e7c1      	b.n	800177e <_vfiprintf_r+0x14e>
 80017fa:	fb05 2101 	mla	r1, r5, r1, r2
 80017fe:	2301      	movs	r3, #1
 8001800:	4680      	mov	r8, r0
 8001802:	e7f0      	b.n	80017e6 <_vfiprintf_r+0x1b6>
 8001804:	ab03      	add	r3, sp, #12
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4622      	mov	r2, r4
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_vfiprintf_r+0x228>)
 800180c:	a904      	add	r1, sp, #16
 800180e:	4630      	mov	r0, r6
 8001810:	f3af 8000 	nop.w
 8001814:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001818:	4681      	mov	r9, r0
 800181a:	d1d5      	bne.n	80017c8 <_vfiprintf_r+0x198>
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	065b      	lsls	r3, r3, #25
 8001820:	f53f af7e 	bmi.w	8001720 <_vfiprintf_r+0xf0>
 8001824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001826:	e77d      	b.n	8001724 <_vfiprintf_r+0xf4>
 8001828:	ab03      	add	r3, sp, #12
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4622      	mov	r2, r4
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <_vfiprintf_r+0x228>)
 8001830:	a904      	add	r1, sp, #16
 8001832:	4630      	mov	r0, r6
 8001834:	f000 f888 	bl	8001948 <_printf_i>
 8001838:	e7ec      	b.n	8001814 <_vfiprintf_r+0x1e4>
 800183a:	bf00      	nop
 800183c:	080022fc 	.word	0x080022fc
 8001840:	0800233c 	.word	0x0800233c
 8001844:	0800231c 	.word	0x0800231c
 8001848:	080022dc 	.word	0x080022dc
 800184c:	08002342 	.word	0x08002342
 8001850:	08002346 	.word	0x08002346
 8001854:	00000000 	.word	0x00000000
 8001858:	0800160b 	.word	0x0800160b

0800185c <_printf_common>:
 800185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001860:	4691      	mov	r9, r2
 8001862:	461f      	mov	r7, r3
 8001864:	688a      	ldr	r2, [r1, #8]
 8001866:	690b      	ldr	r3, [r1, #16]
 8001868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800186c:	4293      	cmp	r3, r2
 800186e:	bfb8      	it	lt
 8001870:	4613      	movlt	r3, r2
 8001872:	f8c9 3000 	str.w	r3, [r9]
 8001876:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800187a:	4606      	mov	r6, r0
 800187c:	460c      	mov	r4, r1
 800187e:	b112      	cbz	r2, 8001886 <_printf_common+0x2a>
 8001880:	3301      	adds	r3, #1
 8001882:	f8c9 3000 	str.w	r3, [r9]
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	0699      	lsls	r1, r3, #26
 800188a:	bf42      	ittt	mi
 800188c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001890:	3302      	addmi	r3, #2
 8001892:	f8c9 3000 	strmi.w	r3, [r9]
 8001896:	6825      	ldr	r5, [r4, #0]
 8001898:	f015 0506 	ands.w	r5, r5, #6
 800189c:	d107      	bne.n	80018ae <_printf_common+0x52>
 800189e:	f104 0a19 	add.w	sl, r4, #25
 80018a2:	68e3      	ldr	r3, [r4, #12]
 80018a4:	f8d9 2000 	ldr.w	r2, [r9]
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	42ab      	cmp	r3, r5
 80018ac:	dc28      	bgt.n	8001900 <_printf_common+0xa4>
 80018ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80018b2:	6822      	ldr	r2, [r4, #0]
 80018b4:	3300      	adds	r3, #0
 80018b6:	bf18      	it	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	0692      	lsls	r2, r2, #26
 80018bc:	d42d      	bmi.n	800191a <_printf_common+0xbe>
 80018be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018c2:	4639      	mov	r1, r7
 80018c4:	4630      	mov	r0, r6
 80018c6:	47c0      	blx	r8
 80018c8:	3001      	adds	r0, #1
 80018ca:	d020      	beq.n	800190e <_printf_common+0xb2>
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	68e5      	ldr	r5, [r4, #12]
 80018d0:	f8d9 2000 	ldr.w	r2, [r9]
 80018d4:	f003 0306 	and.w	r3, r3, #6
 80018d8:	2b04      	cmp	r3, #4
 80018da:	bf08      	it	eq
 80018dc:	1aad      	subeq	r5, r5, r2
 80018de:	68a3      	ldr	r3, [r4, #8]
 80018e0:	6922      	ldr	r2, [r4, #16]
 80018e2:	bf0c      	ite	eq
 80018e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018e8:	2500      	movne	r5, #0
 80018ea:	4293      	cmp	r3, r2
 80018ec:	bfc4      	itt	gt
 80018ee:	1a9b      	subgt	r3, r3, r2
 80018f0:	18ed      	addgt	r5, r5, r3
 80018f2:	f04f 0900 	mov.w	r9, #0
 80018f6:	341a      	adds	r4, #26
 80018f8:	454d      	cmp	r5, r9
 80018fa:	d11a      	bne.n	8001932 <_printf_common+0xd6>
 80018fc:	2000      	movs	r0, #0
 80018fe:	e008      	b.n	8001912 <_printf_common+0xb6>
 8001900:	2301      	movs	r3, #1
 8001902:	4652      	mov	r2, sl
 8001904:	4639      	mov	r1, r7
 8001906:	4630      	mov	r0, r6
 8001908:	47c0      	blx	r8
 800190a:	3001      	adds	r0, #1
 800190c:	d103      	bne.n	8001916 <_printf_common+0xba>
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001916:	3501      	adds	r5, #1
 8001918:	e7c3      	b.n	80018a2 <_printf_common+0x46>
 800191a:	18e1      	adds	r1, r4, r3
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	2030      	movs	r0, #48	; 0x30
 8001920:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001924:	4422      	add	r2, r4
 8001926:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800192a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800192e:	3302      	adds	r3, #2
 8001930:	e7c5      	b.n	80018be <_printf_common+0x62>
 8001932:	2301      	movs	r3, #1
 8001934:	4622      	mov	r2, r4
 8001936:	4639      	mov	r1, r7
 8001938:	4630      	mov	r0, r6
 800193a:	47c0      	blx	r8
 800193c:	3001      	adds	r0, #1
 800193e:	d0e6      	beq.n	800190e <_printf_common+0xb2>
 8001940:	f109 0901 	add.w	r9, r9, #1
 8001944:	e7d8      	b.n	80018f8 <_printf_common+0x9c>
	...

08001948 <_printf_i>:
 8001948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800194c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001950:	460c      	mov	r4, r1
 8001952:	7e09      	ldrb	r1, [r1, #24]
 8001954:	b085      	sub	sp, #20
 8001956:	296e      	cmp	r1, #110	; 0x6e
 8001958:	4617      	mov	r7, r2
 800195a:	4606      	mov	r6, r0
 800195c:	4698      	mov	r8, r3
 800195e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001960:	f000 80b3 	beq.w	8001aca <_printf_i+0x182>
 8001964:	d822      	bhi.n	80019ac <_printf_i+0x64>
 8001966:	2963      	cmp	r1, #99	; 0x63
 8001968:	d036      	beq.n	80019d8 <_printf_i+0x90>
 800196a:	d80a      	bhi.n	8001982 <_printf_i+0x3a>
 800196c:	2900      	cmp	r1, #0
 800196e:	f000 80b9 	beq.w	8001ae4 <_printf_i+0x19c>
 8001972:	2958      	cmp	r1, #88	; 0x58
 8001974:	f000 8083 	beq.w	8001a7e <_printf_i+0x136>
 8001978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800197c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001980:	e032      	b.n	80019e8 <_printf_i+0xa0>
 8001982:	2964      	cmp	r1, #100	; 0x64
 8001984:	d001      	beq.n	800198a <_printf_i+0x42>
 8001986:	2969      	cmp	r1, #105	; 0x69
 8001988:	d1f6      	bne.n	8001978 <_printf_i+0x30>
 800198a:	6820      	ldr	r0, [r4, #0]
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	0605      	lsls	r5, r0, #24
 8001990:	f103 0104 	add.w	r1, r3, #4
 8001994:	d52a      	bpl.n	80019ec <_printf_i+0xa4>
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6011      	str	r1, [r2, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da03      	bge.n	80019a6 <_printf_i+0x5e>
 800199e:	222d      	movs	r2, #45	; 0x2d
 80019a0:	425b      	negs	r3, r3
 80019a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80019a6:	486f      	ldr	r0, [pc, #444]	; (8001b64 <_printf_i+0x21c>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	e039      	b.n	8001a20 <_printf_i+0xd8>
 80019ac:	2973      	cmp	r1, #115	; 0x73
 80019ae:	f000 809d 	beq.w	8001aec <_printf_i+0x1a4>
 80019b2:	d808      	bhi.n	80019c6 <_printf_i+0x7e>
 80019b4:	296f      	cmp	r1, #111	; 0x6f
 80019b6:	d020      	beq.n	80019fa <_printf_i+0xb2>
 80019b8:	2970      	cmp	r1, #112	; 0x70
 80019ba:	d1dd      	bne.n	8001978 <_printf_i+0x30>
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	f043 0320 	orr.w	r3, r3, #32
 80019c2:	6023      	str	r3, [r4, #0]
 80019c4:	e003      	b.n	80019ce <_printf_i+0x86>
 80019c6:	2975      	cmp	r1, #117	; 0x75
 80019c8:	d017      	beq.n	80019fa <_printf_i+0xb2>
 80019ca:	2978      	cmp	r1, #120	; 0x78
 80019cc:	d1d4      	bne.n	8001978 <_printf_i+0x30>
 80019ce:	2378      	movs	r3, #120	; 0x78
 80019d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019d4:	4864      	ldr	r0, [pc, #400]	; (8001b68 <_printf_i+0x220>)
 80019d6:	e055      	b.n	8001a84 <_printf_i+0x13c>
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	1d19      	adds	r1, r3, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6011      	str	r1, [r2, #0]
 80019e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019e8:	2301      	movs	r3, #1
 80019ea:	e08c      	b.n	8001b06 <_printf_i+0x1be>
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6011      	str	r1, [r2, #0]
 80019f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80019f4:	bf18      	it	ne
 80019f6:	b21b      	sxthne	r3, r3
 80019f8:	e7cf      	b.n	800199a <_printf_i+0x52>
 80019fa:	6813      	ldr	r3, [r2, #0]
 80019fc:	6825      	ldr	r5, [r4, #0]
 80019fe:	1d18      	adds	r0, r3, #4
 8001a00:	6010      	str	r0, [r2, #0]
 8001a02:	0628      	lsls	r0, r5, #24
 8001a04:	d501      	bpl.n	8001a0a <_printf_i+0xc2>
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e002      	b.n	8001a10 <_printf_i+0xc8>
 8001a0a:	0668      	lsls	r0, r5, #25
 8001a0c:	d5fb      	bpl.n	8001a06 <_printf_i+0xbe>
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	4854      	ldr	r0, [pc, #336]	; (8001b64 <_printf_i+0x21c>)
 8001a12:	296f      	cmp	r1, #111	; 0x6f
 8001a14:	bf14      	ite	ne
 8001a16:	220a      	movne	r2, #10
 8001a18:	2208      	moveq	r2, #8
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a20:	6865      	ldr	r5, [r4, #4]
 8001a22:	60a5      	str	r5, [r4, #8]
 8001a24:	2d00      	cmp	r5, #0
 8001a26:	f2c0 8095 	blt.w	8001b54 <_printf_i+0x20c>
 8001a2a:	6821      	ldr	r1, [r4, #0]
 8001a2c:	f021 0104 	bic.w	r1, r1, #4
 8001a30:	6021      	str	r1, [r4, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d13d      	bne.n	8001ab2 <_printf_i+0x16a>
 8001a36:	2d00      	cmp	r5, #0
 8001a38:	f040 808e 	bne.w	8001b58 <_printf_i+0x210>
 8001a3c:	4665      	mov	r5, ip
 8001a3e:	2a08      	cmp	r2, #8
 8001a40:	d10b      	bne.n	8001a5a <_printf_i+0x112>
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	07db      	lsls	r3, r3, #31
 8001a46:	d508      	bpl.n	8001a5a <_printf_i+0x112>
 8001a48:	6923      	ldr	r3, [r4, #16]
 8001a4a:	6862      	ldr	r2, [r4, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	bfde      	ittt	le
 8001a50:	2330      	movle	r3, #48	; 0x30
 8001a52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a5a:	ebac 0305 	sub.w	r3, ip, r5
 8001a5e:	6123      	str	r3, [r4, #16]
 8001a60:	f8cd 8000 	str.w	r8, [sp]
 8001a64:	463b      	mov	r3, r7
 8001a66:	aa03      	add	r2, sp, #12
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	f7ff fef6 	bl	800185c <_printf_common>
 8001a70:	3001      	adds	r0, #1
 8001a72:	d14d      	bne.n	8001b10 <_printf_i+0x1c8>
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	b005      	add	sp, #20
 8001a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a7e:	4839      	ldr	r0, [pc, #228]	; (8001b64 <_printf_i+0x21c>)
 8001a80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	6821      	ldr	r1, [r4, #0]
 8001a88:	1d1d      	adds	r5, r3, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6015      	str	r5, [r2, #0]
 8001a8e:	060a      	lsls	r2, r1, #24
 8001a90:	d50b      	bpl.n	8001aaa <_printf_i+0x162>
 8001a92:	07ca      	lsls	r2, r1, #31
 8001a94:	bf44      	itt	mi
 8001a96:	f041 0120 	orrmi.w	r1, r1, #32
 8001a9a:	6021      	strmi	r1, [r4, #0]
 8001a9c:	b91b      	cbnz	r3, 8001aa6 <_printf_i+0x15e>
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	f022 0220 	bic.w	r2, r2, #32
 8001aa4:	6022      	str	r2, [r4, #0]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	e7b7      	b.n	8001a1a <_printf_i+0xd2>
 8001aaa:	064d      	lsls	r5, r1, #25
 8001aac:	bf48      	it	mi
 8001aae:	b29b      	uxthmi	r3, r3
 8001ab0:	e7ef      	b.n	8001a92 <_printf_i+0x14a>
 8001ab2:	4665      	mov	r5, ip
 8001ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ab8:	fb02 3311 	mls	r3, r2, r1, r3
 8001abc:	5cc3      	ldrb	r3, [r0, r3]
 8001abe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	2900      	cmp	r1, #0
 8001ac6:	d1f5      	bne.n	8001ab4 <_printf_i+0x16c>
 8001ac8:	e7b9      	b.n	8001a3e <_printf_i+0xf6>
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	6825      	ldr	r5, [r4, #0]
 8001ace:	6961      	ldr	r1, [r4, #20]
 8001ad0:	1d18      	adds	r0, r3, #4
 8001ad2:	6010      	str	r0, [r2, #0]
 8001ad4:	0628      	lsls	r0, r5, #24
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	d501      	bpl.n	8001ade <_printf_i+0x196>
 8001ada:	6019      	str	r1, [r3, #0]
 8001adc:	e002      	b.n	8001ae4 <_printf_i+0x19c>
 8001ade:	066a      	lsls	r2, r5, #25
 8001ae0:	d5fb      	bpl.n	8001ada <_printf_i+0x192>
 8001ae2:	8019      	strh	r1, [r3, #0]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6123      	str	r3, [r4, #16]
 8001ae8:	4665      	mov	r5, ip
 8001aea:	e7b9      	b.n	8001a60 <_printf_i+0x118>
 8001aec:	6813      	ldr	r3, [r2, #0]
 8001aee:	1d19      	adds	r1, r3, #4
 8001af0:	6011      	str	r1, [r2, #0]
 8001af2:	681d      	ldr	r5, [r3, #0]
 8001af4:	6862      	ldr	r2, [r4, #4]
 8001af6:	2100      	movs	r1, #0
 8001af8:	4628      	mov	r0, r5
 8001afa:	f7fe fb89 	bl	8000210 <memchr>
 8001afe:	b108      	cbz	r0, 8001b04 <_printf_i+0x1bc>
 8001b00:	1b40      	subs	r0, r0, r5
 8001b02:	6060      	str	r0, [r4, #4]
 8001b04:	6863      	ldr	r3, [r4, #4]
 8001b06:	6123      	str	r3, [r4, #16]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b0e:	e7a7      	b.n	8001a60 <_printf_i+0x118>
 8001b10:	6923      	ldr	r3, [r4, #16]
 8001b12:	462a      	mov	r2, r5
 8001b14:	4639      	mov	r1, r7
 8001b16:	4630      	mov	r0, r6
 8001b18:	47c0      	blx	r8
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	d0aa      	beq.n	8001a74 <_printf_i+0x12c>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	079b      	lsls	r3, r3, #30
 8001b22:	d413      	bmi.n	8001b4c <_printf_i+0x204>
 8001b24:	68e0      	ldr	r0, [r4, #12]
 8001b26:	9b03      	ldr	r3, [sp, #12]
 8001b28:	4298      	cmp	r0, r3
 8001b2a:	bfb8      	it	lt
 8001b2c:	4618      	movlt	r0, r3
 8001b2e:	e7a3      	b.n	8001a78 <_printf_i+0x130>
 8001b30:	2301      	movs	r3, #1
 8001b32:	464a      	mov	r2, r9
 8001b34:	4639      	mov	r1, r7
 8001b36:	4630      	mov	r0, r6
 8001b38:	47c0      	blx	r8
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d09a      	beq.n	8001a74 <_printf_i+0x12c>
 8001b3e:	3501      	adds	r5, #1
 8001b40:	68e3      	ldr	r3, [r4, #12]
 8001b42:	9a03      	ldr	r2, [sp, #12]
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	42ab      	cmp	r3, r5
 8001b48:	dcf2      	bgt.n	8001b30 <_printf_i+0x1e8>
 8001b4a:	e7eb      	b.n	8001b24 <_printf_i+0x1dc>
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	f104 0919 	add.w	r9, r4, #25
 8001b52:	e7f5      	b.n	8001b40 <_printf_i+0x1f8>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ac      	bne.n	8001ab2 <_printf_i+0x16a>
 8001b58:	7803      	ldrb	r3, [r0, #0]
 8001b5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b62:	e76c      	b.n	8001a3e <_printf_i+0xf6>
 8001b64:	0800234d 	.word	0x0800234d
 8001b68:	0800235e 	.word	0x0800235e

08001b6c <_sbrk_r>:
 8001b6c:	b538      	push	{r3, r4, r5, lr}
 8001b6e:	4c06      	ldr	r4, [pc, #24]	; (8001b88 <_sbrk_r+0x1c>)
 8001b70:	2300      	movs	r3, #0
 8001b72:	4605      	mov	r5, r0
 8001b74:	4608      	mov	r0, r1
 8001b76:	6023      	str	r3, [r4, #0]
 8001b78:	f000 f9bc 	bl	8001ef4 <_sbrk>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d102      	bne.n	8001b86 <_sbrk_r+0x1a>
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	b103      	cbz	r3, 8001b86 <_sbrk_r+0x1a>
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	20000144 	.word	0x20000144

08001b8c <__sread>:
 8001b8c:	b510      	push	{r4, lr}
 8001b8e:	460c      	mov	r4, r1
 8001b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b94:	f000 f896 	bl	8001cc4 <_read_r>
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	bfab      	itete	ge
 8001b9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8001ba0:	181b      	addge	r3, r3, r0
 8001ba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ba6:	bfac      	ite	ge
 8001ba8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001baa:	81a3      	strhlt	r3, [r4, #12]
 8001bac:	bd10      	pop	{r4, pc}

08001bae <__swrite>:
 8001bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb2:	461f      	mov	r7, r3
 8001bb4:	898b      	ldrh	r3, [r1, #12]
 8001bb6:	05db      	lsls	r3, r3, #23
 8001bb8:	4605      	mov	r5, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	4616      	mov	r6, r2
 8001bbe:	d505      	bpl.n	8001bcc <__swrite+0x1e>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bc8:	f000 f868 	bl	8001c9c <_lseek_r>
 8001bcc:	89a3      	ldrh	r3, [r4, #12]
 8001bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bd6:	81a3      	strh	r3, [r4, #12]
 8001bd8:	4632      	mov	r2, r6
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4628      	mov	r0, r5
 8001bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001be2:	f000 b817 	b.w	8001c14 <_write_r>

08001be6 <__sseek>:
 8001be6:	b510      	push	{r4, lr}
 8001be8:	460c      	mov	r4, r1
 8001bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bee:	f000 f855 	bl	8001c9c <_lseek_r>
 8001bf2:	1c43      	adds	r3, r0, #1
 8001bf4:	89a3      	ldrh	r3, [r4, #12]
 8001bf6:	bf15      	itete	ne
 8001bf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c02:	81a3      	strheq	r3, [r4, #12]
 8001c04:	bf18      	it	ne
 8001c06:	81a3      	strhne	r3, [r4, #12]
 8001c08:	bd10      	pop	{r4, pc}

08001c0a <__sclose>:
 8001c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c0e:	f000 b813 	b.w	8001c38 <_close_r>
	...

08001c14 <_write_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4c07      	ldr	r4, [pc, #28]	; (8001c34 <_write_r+0x20>)
 8001c18:	4605      	mov	r5, r0
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	6022      	str	r2, [r4, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f000 f911 	bl	8001e4a <_write>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d102      	bne.n	8001c32 <_write_r+0x1e>
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	b103      	cbz	r3, 8001c32 <_write_r+0x1e>
 8001c30:	602b      	str	r3, [r5, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
 8001c34:	20000144 	.word	0x20000144

08001c38 <_close_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4c06      	ldr	r4, [pc, #24]	; (8001c54 <_close_r+0x1c>)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4605      	mov	r5, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	6023      	str	r3, [r4, #0]
 8001c44:	f000 f930 	bl	8001ea8 <_close>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	d102      	bne.n	8001c52 <_close_r+0x1a>
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	b103      	cbz	r3, 8001c52 <_close_r+0x1a>
 8001c50:	602b      	str	r3, [r5, #0]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
 8001c54:	20000144 	.word	0x20000144

08001c58 <_fstat_r>:
 8001c58:	b538      	push	{r3, r4, r5, lr}
 8001c5a:	4c07      	ldr	r4, [pc, #28]	; (8001c78 <_fstat_r+0x20>)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4605      	mov	r5, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	f000 f98a 	bl	8001f7e <_fstat>
 8001c6a:	1c43      	adds	r3, r0, #1
 8001c6c:	d102      	bne.n	8001c74 <_fstat_r+0x1c>
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	b103      	cbz	r3, 8001c74 <_fstat_r+0x1c>
 8001c72:	602b      	str	r3, [r5, #0]
 8001c74:	bd38      	pop	{r3, r4, r5, pc}
 8001c76:	bf00      	nop
 8001c78:	20000144 	.word	0x20000144

08001c7c <_isatty_r>:
 8001c7c:	b538      	push	{r3, r4, r5, lr}
 8001c7e:	4c06      	ldr	r4, [pc, #24]	; (8001c98 <_isatty_r+0x1c>)
 8001c80:	2300      	movs	r3, #0
 8001c82:	4605      	mov	r5, r0
 8001c84:	4608      	mov	r0, r1
 8001c86:	6023      	str	r3, [r4, #0]
 8001c88:	f000 fade 	bl	8002248 <_isatty>
 8001c8c:	1c43      	adds	r3, r0, #1
 8001c8e:	d102      	bne.n	8001c96 <_isatty_r+0x1a>
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	b103      	cbz	r3, 8001c96 <_isatty_r+0x1a>
 8001c94:	602b      	str	r3, [r5, #0]
 8001c96:	bd38      	pop	{r3, r4, r5, pc}
 8001c98:	20000144 	.word	0x20000144

08001c9c <_lseek_r>:
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4c07      	ldr	r4, [pc, #28]	; (8001cbc <_lseek_r+0x20>)
 8001ca0:	4605      	mov	r5, r0
 8001ca2:	4608      	mov	r0, r1
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	6022      	str	r2, [r4, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f000 f8bb 	bl	8001e26 <_lseek>
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	d102      	bne.n	8001cba <_lseek_r+0x1e>
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	b103      	cbz	r3, 8001cba <_lseek_r+0x1e>
 8001cb8:	602b      	str	r3, [r5, #0]
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
 8001cbc:	20000144 	.word	0x20000144

08001cc0 <__malloc_lock>:
 8001cc0:	4770      	bx	lr

08001cc2 <__malloc_unlock>:
 8001cc2:	4770      	bx	lr

08001cc4 <_read_r>:
 8001cc4:	b538      	push	{r3, r4, r5, lr}
 8001cc6:	4c07      	ldr	r4, [pc, #28]	; (8001ce4 <_read_r+0x20>)
 8001cc8:	4605      	mov	r5, r0
 8001cca:	4608      	mov	r0, r1
 8001ccc:	4611      	mov	r1, r2
 8001cce:	2200      	movs	r2, #0
 8001cd0:	6022      	str	r2, [r4, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f000 f850 	bl	8001d78 <_read>
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	d102      	bne.n	8001ce2 <_read_r+0x1e>
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	b103      	cbz	r3, 8001ce2 <_read_r+0x1e>
 8001ce0:	602b      	str	r3, [r5, #0]
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
 8001ce4:	20000144 	.word	0x20000144

08001ce8 <findslot>:
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <findslot+0x2c>)
 8001cea:	b510      	push	{r4, lr}
 8001cec:	4604      	mov	r4, r0
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	b118      	cbz	r0, 8001cfa <findslot+0x12>
 8001cf2:	6983      	ldr	r3, [r0, #24]
 8001cf4:	b90b      	cbnz	r3, 8001cfa <findslot+0x12>
 8001cf6:	f7ff fadb 	bl	80012b0 <__sinit>
 8001cfa:	2c13      	cmp	r4, #19
 8001cfc:	d807      	bhi.n	8001d0e <findslot+0x26>
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <findslot+0x30>)
 8001d00:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001d04:	3301      	adds	r3, #1
 8001d06:	d002      	beq.n	8001d0e <findslot+0x26>
 8001d08:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001d0c:	bd10      	pop	{r4, pc}
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e7fc      	b.n	8001d0c <findslot+0x24>
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000
 8001d18:	200000a4 	.word	0x200000a4

08001d1c <checkerror>:
 8001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1e:	1c43      	adds	r3, r0, #1
 8001d20:	4605      	mov	r5, r0
 8001d22:	d109      	bne.n	8001d38 <checkerror+0x1c>
 8001d24:	f000 faac 	bl	8002280 <__errno>
 8001d28:	2413      	movs	r4, #19
 8001d2a:	4606      	mov	r6, r0
 8001d2c:	2700      	movs	r7, #0
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4639      	mov	r1, r7
 8001d32:	beab      	bkpt	0x00ab
 8001d34:	4604      	mov	r4, r0
 8001d36:	6034      	str	r4, [r6, #0]
 8001d38:	4628      	mov	r0, r5
 8001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d3c <error>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	4605      	mov	r5, r0
 8001d40:	f000 fa9e 	bl	8002280 <__errno>
 8001d44:	2413      	movs	r4, #19
 8001d46:	4606      	mov	r6, r0
 8001d48:	2700      	movs	r7, #0
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4639      	mov	r1, r7
 8001d4e:	beab      	bkpt	0x00ab
 8001d50:	4604      	mov	r4, r0
 8001d52:	6034      	str	r4, [r6, #0]
 8001d54:	4628      	mov	r0, r5
 8001d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d58 <_swiread>:
 8001d58:	b530      	push	{r4, r5, lr}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001d60:	9203      	str	r2, [sp, #12]
 8001d62:	2406      	movs	r4, #6
 8001d64:	ad01      	add	r5, sp, #4
 8001d66:	4620      	mov	r0, r4
 8001d68:	4629      	mov	r1, r5
 8001d6a:	beab      	bkpt	0x00ab
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff ffd4 	bl	8001d1c <checkerror>
 8001d74:	b005      	add	sp, #20
 8001d76:	bd30      	pop	{r4, r5, pc}

08001d78 <_read>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	460e      	mov	r6, r1
 8001d7c:	4615      	mov	r5, r2
 8001d7e:	f7ff ffb3 	bl	8001ce8 <findslot>
 8001d82:	4604      	mov	r4, r0
 8001d84:	b930      	cbnz	r0, 8001d94 <_read+0x1c>
 8001d86:	f000 fa7b 	bl	8002280 <__errno>
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	6003      	str	r3, [r0, #0]
 8001d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	462a      	mov	r2, r5
 8001d96:	4631      	mov	r1, r6
 8001d98:	6800      	ldr	r0, [r0, #0]
 8001d9a:	f7ff ffdd 	bl	8001d58 <_swiread>
 8001d9e:	1c43      	adds	r3, r0, #1
 8001da0:	bf1f      	itttt	ne
 8001da2:	6863      	ldrne	r3, [r4, #4]
 8001da4:	1a28      	subne	r0, r5, r0
 8001da6:	181b      	addne	r3, r3, r0
 8001da8:	6063      	strne	r3, [r4, #4]
 8001daa:	e7f2      	b.n	8001d92 <_read+0x1a>

08001dac <_swilseek>:
 8001dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dae:	460c      	mov	r4, r1
 8001db0:	4616      	mov	r6, r2
 8001db2:	f7ff ff99 	bl	8001ce8 <findslot>
 8001db6:	4605      	mov	r5, r0
 8001db8:	b940      	cbnz	r0, 8001dcc <_swilseek+0x20>
 8001dba:	f000 fa61 	bl	8002280 <__errno>
 8001dbe:	2309      	movs	r3, #9
 8001dc0:	6003      	str	r3, [r0, #0]
 8001dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	b003      	add	sp, #12
 8001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dcc:	2e02      	cmp	r6, #2
 8001dce:	d903      	bls.n	8001dd8 <_swilseek+0x2c>
 8001dd0:	f000 fa56 	bl	8002280 <__errno>
 8001dd4:	2316      	movs	r3, #22
 8001dd6:	e7f3      	b.n	8001dc0 <_swilseek+0x14>
 8001dd8:	2e01      	cmp	r6, #1
 8001dda:	d112      	bne.n	8001e02 <_swilseek+0x56>
 8001ddc:	6843      	ldr	r3, [r0, #4]
 8001dde:	18e4      	adds	r4, r4, r3
 8001de0:	d4f6      	bmi.n	8001dd0 <_swilseek+0x24>
 8001de2:	682b      	ldr	r3, [r5, #0]
 8001de4:	260a      	movs	r6, #10
 8001de6:	e9cd 3400 	strd	r3, r4, [sp]
 8001dea:	466f      	mov	r7, sp
 8001dec:	4630      	mov	r0, r6
 8001dee:	4639      	mov	r1, r7
 8001df0:	beab      	bkpt	0x00ab
 8001df2:	4606      	mov	r6, r0
 8001df4:	4630      	mov	r0, r6
 8001df6:	f7ff ff91 	bl	8001d1c <checkerror>
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	dbe1      	blt.n	8001dc2 <_swilseek+0x16>
 8001dfe:	606c      	str	r4, [r5, #4]
 8001e00:	e7e1      	b.n	8001dc6 <_swilseek+0x1a>
 8001e02:	2e02      	cmp	r6, #2
 8001e04:	d1ed      	bne.n	8001de2 <_swilseek+0x36>
 8001e06:	af02      	add	r7, sp, #8
 8001e08:	6803      	ldr	r3, [r0, #0]
 8001e0a:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001e0e:	260c      	movs	r6, #12
 8001e10:	4630      	mov	r0, r6
 8001e12:	4639      	mov	r1, r7
 8001e14:	beab      	bkpt	0x00ab
 8001e16:	4606      	mov	r6, r0
 8001e18:	4630      	mov	r0, r6
 8001e1a:	f7ff ff7f 	bl	8001d1c <checkerror>
 8001e1e:	1c43      	adds	r3, r0, #1
 8001e20:	d0cf      	beq.n	8001dc2 <_swilseek+0x16>
 8001e22:	4404      	add	r4, r0
 8001e24:	e7dd      	b.n	8001de2 <_swilseek+0x36>

08001e26 <_lseek>:
 8001e26:	f7ff bfc1 	b.w	8001dac <_swilseek>

08001e2a <_swiwrite>:
 8001e2a:	b530      	push	{r4, r5, lr}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e32:	9203      	str	r2, [sp, #12]
 8001e34:	2405      	movs	r4, #5
 8001e36:	ad01      	add	r5, sp, #4
 8001e38:	4620      	mov	r0, r4
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	beab      	bkpt	0x00ab
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff ff6b 	bl	8001d1c <checkerror>
 8001e46:	b005      	add	sp, #20
 8001e48:	bd30      	pop	{r4, r5, pc}

08001e4a <_write>:
 8001e4a:	b570      	push	{r4, r5, r6, lr}
 8001e4c:	460e      	mov	r6, r1
 8001e4e:	4615      	mov	r5, r2
 8001e50:	f7ff ff4a 	bl	8001ce8 <findslot>
 8001e54:	4604      	mov	r4, r0
 8001e56:	b930      	cbnz	r0, 8001e66 <_write+0x1c>
 8001e58:	f000 fa12 	bl	8002280 <__errno>
 8001e5c:	2309      	movs	r3, #9
 8001e5e:	6003      	str	r3, [r0, #0]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
 8001e66:	462a      	mov	r2, r5
 8001e68:	4631      	mov	r1, r6
 8001e6a:	6800      	ldr	r0, [r0, #0]
 8001e6c:	f7ff ffdd 	bl	8001e2a <_swiwrite>
 8001e70:	1e02      	subs	r2, r0, #0
 8001e72:	dbf5      	blt.n	8001e60 <_write+0x16>
 8001e74:	6863      	ldr	r3, [r4, #4]
 8001e76:	1aa8      	subs	r0, r5, r2
 8001e78:	4403      	add	r3, r0
 8001e7a:	42aa      	cmp	r2, r5
 8001e7c:	6063      	str	r3, [r4, #4]
 8001e7e:	d1f1      	bne.n	8001e64 <_write+0x1a>
 8001e80:	2000      	movs	r0, #0
 8001e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001e86:	f7ff bf59 	b.w	8001d3c <error>

08001e8a <_swiclose>:
 8001e8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e8c:	ad02      	add	r5, sp, #8
 8001e8e:	2402      	movs	r4, #2
 8001e90:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	beab      	bkpt	0x00ab
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff ff3d 	bl	8001d1c <checkerror>
 8001ea2:	b003      	add	sp, #12
 8001ea4:	bd30      	pop	{r4, r5, pc}
	...

08001ea8 <_close>:
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	4605      	mov	r5, r0
 8001eac:	f7ff ff1c 	bl	8001ce8 <findslot>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	b930      	cbnz	r0, 8001ec2 <_close+0x1a>
 8001eb4:	f000 f9e4 	bl	8002280 <__errno>
 8001eb8:	2309      	movs	r3, #9
 8001eba:	6003      	str	r3, [r0, #0]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	bd38      	pop	{r3, r4, r5, pc}
 8001ec2:	3d01      	subs	r5, #1
 8001ec4:	2d01      	cmp	r5, #1
 8001ec6:	d809      	bhi.n	8001edc <_close+0x34>
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <_close+0x48>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d104      	bne.n	8001edc <_close+0x34>
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	6003      	str	r3, [r0, #0]
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e7f1      	b.n	8001ec0 <_close+0x18>
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	f7ff ffd4 	bl	8001e8a <_swiclose>
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	d1ec      	bne.n	8001ec0 <_close+0x18>
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	6023      	str	r3, [r4, #0]
 8001eec:	e7e8      	b.n	8001ec0 <_close+0x18>
 8001eee:	bf00      	nop
 8001ef0:	200000a4 	.word	0x200000a4

08001ef4 <_sbrk>:
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <_sbrk+0x38>)
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	4602      	mov	r2, r0
 8001efc:	b909      	cbnz	r1, 8001f02 <_sbrk+0xe>
 8001efe:	490c      	ldr	r1, [pc, #48]	; (8001f30 <_sbrk+0x3c>)
 8001f00:	6019      	str	r1, [r3, #0]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	4669      	mov	r1, sp
 8001f06:	4402      	add	r2, r0
 8001f08:	428a      	cmp	r2, r1
 8001f0a:	d806      	bhi.n	8001f1a <_sbrk+0x26>
 8001f0c:	4909      	ldr	r1, [pc, #36]	; (8001f34 <_sbrk+0x40>)
 8001f0e:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <_sbrk+0x44>)
 8001f10:	6809      	ldr	r1, [r1, #0]
 8001f12:	42a1      	cmp	r1, r4
 8001f14:	d008      	beq.n	8001f28 <_sbrk+0x34>
 8001f16:	428a      	cmp	r2, r1
 8001f18:	d906      	bls.n	8001f28 <_sbrk+0x34>
 8001f1a:	f000 f9b1 	bl	8002280 <__errno>
 8001f1e:	230c      	movs	r3, #12
 8001f20:	6003      	str	r3, [r0, #0]
 8001f22:	f04f 30ff 	mov.w	r0, #4294967295
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e7fc      	b.n	8001f26 <_sbrk+0x32>
 8001f2c:	20000094 	.word	0x20000094
 8001f30:	20000148 	.word	0x20000148
 8001f34:	20000064 	.word	0x20000064
 8001f38:	cafedead 	.word	0xcafedead

08001f3c <_swistat>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	460c      	mov	r4, r1
 8001f40:	f7ff fed2 	bl	8001ce8 <findslot>
 8001f44:	4606      	mov	r6, r0
 8001f46:	b930      	cbnz	r0, 8001f56 <_swistat+0x1a>
 8001f48:	f000 f99a 	bl	8002280 <__errno>
 8001f4c:	2309      	movs	r3, #9
 8001f4e:	6003      	str	r3, [r0, #0]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
 8001f56:	6863      	ldr	r3, [r4, #4]
 8001f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f5c:	6063      	str	r3, [r4, #4]
 8001f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f62:	6463      	str	r3, [r4, #68]	; 0x44
 8001f64:	250c      	movs	r5, #12
 8001f66:	4628      	mov	r0, r5
 8001f68:	4631      	mov	r1, r6
 8001f6a:	beab      	bkpt	0x00ab
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f7ff fed4 	bl	8001d1c <checkerror>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	bf1c      	itt	ne
 8001f78:	6120      	strne	r0, [r4, #16]
 8001f7a:	2000      	movne	r0, #0
 8001f7c:	e7ea      	b.n	8001f54 <_swistat+0x18>

08001f7e <_fstat>:
 8001f7e:	460b      	mov	r3, r1
 8001f80:	b510      	push	{r4, lr}
 8001f82:	2100      	movs	r1, #0
 8001f84:	4604      	mov	r4, r0
 8001f86:	2258      	movs	r2, #88	; 0x58
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe ff5d 	bl	8000e48 <memset>
 8001f8e:	4601      	mov	r1, r0
 8001f90:	4620      	mov	r0, r4
 8001f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f96:	f7ff bfd1 	b.w	8001f3c <_swistat>

08001f9a <_stat>:
 8001f9a:	b538      	push	{r3, r4, r5, lr}
 8001f9c:	460d      	mov	r5, r1
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	2258      	movs	r2, #88	; 0x58
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe ff4f 	bl	8000e48 <memset>
 8001faa:	4620      	mov	r0, r4
 8001fac:	2100      	movs	r1, #0
 8001fae:	f000 f811 	bl	8001fd4 <_swiopen>
 8001fb2:	1c43      	adds	r3, r0, #1
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	d00b      	beq.n	8001fd0 <_stat+0x36>
 8001fb8:	686b      	ldr	r3, [r5, #4]
 8001fba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001fbe:	606b      	str	r3, [r5, #4]
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7ff ffbb 	bl	8001f3c <_swistat>
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f7ff ff6d 	bl	8001ea8 <_close>
 8001fce:	462c      	mov	r4, r5
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}

08001fd4 <_swiopen>:
 8001fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <_swiopen+0xb4>)
 8001fda:	b096      	sub	sp, #88	; 0x58
 8001fdc:	4682      	mov	sl, r0
 8001fde:	460e      	mov	r6, r1
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	4698      	mov	r8, r3
 8001fe4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001fe8:	1c61      	adds	r1, r4, #1
 8001fea:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8001fee:	d036      	beq.n	800205e <_swiopen+0x8a>
 8001ff0:	3501      	adds	r5, #1
 8001ff2:	2d14      	cmp	r5, #20
 8001ff4:	d1f6      	bne.n	8001fe4 <_swiopen+0x10>
 8001ff6:	f000 f943 	bl	8002280 <__errno>
 8001ffa:	2318      	movs	r3, #24
 8001ffc:	6003      	str	r3, [r0, #0]
 8001ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8002002:	e03c      	b.n	800207e <_swiopen+0xaa>
 8002004:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002008:	f240 6301 	movw	r3, #1537	; 0x601
 800200c:	07b2      	lsls	r2, r6, #30
 800200e:	bf48      	it	mi
 8002010:	f044 0402 	orrmi.w	r4, r4, #2
 8002014:	421e      	tst	r6, r3
 8002016:	bf18      	it	ne
 8002018:	f044 0404 	orrne.w	r4, r4, #4
 800201c:	0733      	lsls	r3, r6, #28
 800201e:	bf48      	it	mi
 8002020:	f024 0404 	bicmi.w	r4, r4, #4
 8002024:	4650      	mov	r0, sl
 8002026:	bf48      	it	mi
 8002028:	f044 0408 	orrmi.w	r4, r4, #8
 800202c:	f8cd a000 	str.w	sl, [sp]
 8002030:	f7fe f93e 	bl	80002b0 <strlen>
 8002034:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002038:	2401      	movs	r4, #1
 800203a:	4620      	mov	r0, r4
 800203c:	4649      	mov	r1, r9
 800203e:	beab      	bkpt	0x00ab
 8002040:	4604      	mov	r4, r0
 8002042:	2c00      	cmp	r4, #0
 8002044:	db06      	blt.n	8002054 <_swiopen+0x80>
 8002046:	4447      	add	r7, r8
 8002048:	2300      	movs	r3, #0
 800204a:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	462c      	mov	r4, r5
 8002052:	e014      	b.n	800207e <_swiopen+0xaa>
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff fe71 	bl	8001d3c <error>
 800205a:	4604      	mov	r4, r0
 800205c:	e00f      	b.n	800207e <_swiopen+0xaa>
 800205e:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002062:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002066:	46e9      	mov	r9, sp
 8002068:	d1cc      	bne.n	8002004 <_swiopen+0x30>
 800206a:	4649      	mov	r1, r9
 800206c:	4650      	mov	r0, sl
 800206e:	f7ff ff94 	bl	8001f9a <_stat>
 8002072:	3001      	adds	r0, #1
 8002074:	d0c6      	beq.n	8002004 <_swiopen+0x30>
 8002076:	f000 f903 	bl	8002280 <__errno>
 800207a:	2311      	movs	r3, #17
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	4620      	mov	r0, r4
 8002080:	b016      	add	sp, #88	; 0x58
 8002082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002086:	bf00      	nop
 8002088:	200000a4 	.word	0x200000a4

0800208c <_get_semihosting_exts>:
 800208c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002090:	4607      	mov	r7, r0
 8002092:	4688      	mov	r8, r1
 8002094:	4829      	ldr	r0, [pc, #164]	; (800213c <_get_semihosting_exts+0xb0>)
 8002096:	2100      	movs	r1, #0
 8002098:	4615      	mov	r5, r2
 800209a:	f7ff ff9b 	bl	8001fd4 <_swiopen>
 800209e:	462a      	mov	r2, r5
 80020a0:	4604      	mov	r4, r0
 80020a2:	2100      	movs	r1, #0
 80020a4:	4638      	mov	r0, r7
 80020a6:	f7fe fecf 	bl	8000e48 <memset>
 80020aa:	1c63      	adds	r3, r4, #1
 80020ac:	d015      	beq.n	80020da <_get_semihosting_exts+0x4e>
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7ff fe1a 	bl	8001ce8 <findslot>
 80020b4:	260c      	movs	r6, #12
 80020b6:	4681      	mov	r9, r0
 80020b8:	4630      	mov	r0, r6
 80020ba:	4649      	mov	r1, r9
 80020bc:	beab      	bkpt	0x00ab
 80020be:	4606      	mov	r6, r0
 80020c0:	4630      	mov	r0, r6
 80020c2:	f7ff fe2b 	bl	8001d1c <checkerror>
 80020c6:	2803      	cmp	r0, #3
 80020c8:	dd02      	ble.n	80020d0 <_get_semihosting_exts+0x44>
 80020ca:	3803      	subs	r0, #3
 80020cc:	42a8      	cmp	r0, r5
 80020ce:	dc08      	bgt.n	80020e2 <_get_semihosting_exts+0x56>
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff fee9 	bl	8001ea8 <_close>
 80020d6:	f04f 34ff 	mov.w	r4, #4294967295
 80020da:	4620      	mov	r0, r4
 80020dc:	b003      	add	sp, #12
 80020de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020e2:	2204      	movs	r2, #4
 80020e4:	eb0d 0102 	add.w	r1, sp, r2
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7ff fe45 	bl	8001d78 <_read>
 80020ee:	2803      	cmp	r0, #3
 80020f0:	ddee      	ble.n	80020d0 <_get_semihosting_exts+0x44>
 80020f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020f6:	2b53      	cmp	r3, #83	; 0x53
 80020f8:	d1ea      	bne.n	80020d0 <_get_semihosting_exts+0x44>
 80020fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80020fe:	2b48      	cmp	r3, #72	; 0x48
 8002100:	d1e6      	bne.n	80020d0 <_get_semihosting_exts+0x44>
 8002102:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002106:	2b46      	cmp	r3, #70	; 0x46
 8002108:	d1e2      	bne.n	80020d0 <_get_semihosting_exts+0x44>
 800210a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800210e:	2b42      	cmp	r3, #66	; 0x42
 8002110:	d1de      	bne.n	80020d0 <_get_semihosting_exts+0x44>
 8002112:	2201      	movs	r2, #1
 8002114:	4641      	mov	r1, r8
 8002116:	4620      	mov	r0, r4
 8002118:	f7ff fe48 	bl	8001dac <_swilseek>
 800211c:	2800      	cmp	r0, #0
 800211e:	dbd7      	blt.n	80020d0 <_get_semihosting_exts+0x44>
 8002120:	462a      	mov	r2, r5
 8002122:	4639      	mov	r1, r7
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff fe27 	bl	8001d78 <_read>
 800212a:	4605      	mov	r5, r0
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff febb 	bl	8001ea8 <_close>
 8002132:	4628      	mov	r0, r5
 8002134:	f7ff fdf2 	bl	8001d1c <checkerror>
 8002138:	4604      	mov	r4, r0
 800213a:	e7ce      	b.n	80020da <_get_semihosting_exts+0x4e>
 800213c:	0800236f 	.word	0x0800236f

08002140 <initialise_semihosting_exts>:
 8002140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002142:	4d0a      	ldr	r5, [pc, #40]	; (800216c <initialise_semihosting_exts+0x2c>)
 8002144:	4c0a      	ldr	r4, [pc, #40]	; (8002170 <initialise_semihosting_exts+0x30>)
 8002146:	2100      	movs	r1, #0
 8002148:	2201      	movs	r2, #1
 800214a:	a801      	add	r0, sp, #4
 800214c:	6029      	str	r1, [r5, #0]
 800214e:	6022      	str	r2, [r4, #0]
 8002150:	f7ff ff9c 	bl	800208c <_get_semihosting_exts>
 8002154:	2800      	cmp	r0, #0
 8002156:	dd07      	ble.n	8002168 <initialise_semihosting_exts+0x28>
 8002158:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800215c:	f003 0201 	and.w	r2, r3, #1
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	602a      	str	r2, [r5, #0]
 8002166:	6023      	str	r3, [r4, #0]
 8002168:	b003      	add	sp, #12
 800216a:	bd30      	pop	{r4, r5, pc}
 800216c:	20000068 	.word	0x20000068
 8002170:	2000006c 	.word	0x2000006c

08002174 <_has_ext_stdout_stderr>:
 8002174:	b510      	push	{r4, lr}
 8002176:	4c04      	ldr	r4, [pc, #16]	; (8002188 <_has_ext_stdout_stderr+0x14>)
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	2a00      	cmp	r2, #0
 800217c:	da01      	bge.n	8002182 <_has_ext_stdout_stderr+0xe>
 800217e:	f7ff ffdf 	bl	8002140 <initialise_semihosting_exts>
 8002182:	6820      	ldr	r0, [r4, #0]
 8002184:	bd10      	pop	{r4, pc}
 8002186:	bf00      	nop
 8002188:	2000006c 	.word	0x2000006c

0800218c <initialise_monitor_handles>:
 800218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002190:	b085      	sub	sp, #20
 8002192:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002244 <initialise_monitor_handles+0xb8>
 8002196:	f8cd 9004 	str.w	r9, [sp, #4]
 800219a:	2303      	movs	r3, #3
 800219c:	2400      	movs	r4, #0
 800219e:	9303      	str	r3, [sp, #12]
 80021a0:	f10d 0804 	add.w	r8, sp, #4
 80021a4:	9402      	str	r4, [sp, #8]
 80021a6:	2501      	movs	r5, #1
 80021a8:	4628      	mov	r0, r5
 80021aa:	4641      	mov	r1, r8
 80021ac:	beab      	bkpt	0x00ab
 80021ae:	4605      	mov	r5, r0
 80021b0:	4e20      	ldr	r6, [pc, #128]	; (8002234 <initialise_monitor_handles+0xa8>)
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <initialise_monitor_handles+0xac>)
 80021b4:	6035      	str	r5, [r6, #0]
 80021b6:	4623      	mov	r3, r4
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	4614      	mov	r4, r2
 80021be:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80021c2:	3301      	adds	r3, #1
 80021c4:	2b14      	cmp	r3, #20
 80021c6:	d1fa      	bne.n	80021be <initialise_monitor_handles+0x32>
 80021c8:	f7ff ffd4 	bl	8002174 <_has_ext_stdout_stderr>
 80021cc:	4d1b      	ldr	r5, [pc, #108]	; (800223c <initialise_monitor_handles+0xb0>)
 80021ce:	b1d0      	cbz	r0, 8002206 <initialise_monitor_handles+0x7a>
 80021d0:	f04f 0a03 	mov.w	sl, #3
 80021d4:	2304      	movs	r3, #4
 80021d6:	f8cd 9004 	str.w	r9, [sp, #4]
 80021da:	2701      	movs	r7, #1
 80021dc:	f8cd a00c 	str.w	sl, [sp, #12]
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	4638      	mov	r0, r7
 80021e4:	4641      	mov	r1, r8
 80021e6:	beab      	bkpt	0x00ab
 80021e8:	4683      	mov	fp, r0
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <initialise_monitor_handles+0xb4>)
 80021ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80021f0:	f8c3 b000 	str.w	fp, [r3]
 80021f4:	2308      	movs	r3, #8
 80021f6:	f8cd a00c 	str.w	sl, [sp, #12]
 80021fa:	9302      	str	r3, [sp, #8]
 80021fc:	4638      	mov	r0, r7
 80021fe:	4641      	mov	r1, r8
 8002200:	beab      	bkpt	0x00ab
 8002202:	4607      	mov	r7, r0
 8002204:	602f      	str	r7, [r5, #0]
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	bf02      	ittt	eq
 800220c:	4b0c      	ldreq	r3, [pc, #48]	; (8002240 <initialise_monitor_handles+0xb4>)
 800220e:	681b      	ldreq	r3, [r3, #0]
 8002210:	602b      	streq	r3, [r5, #0]
 8002212:	6833      	ldr	r3, [r6, #0]
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	2600      	movs	r6, #0
 8002218:	6066      	str	r6, [r4, #4]
 800221a:	f7ff ffab 	bl	8002174 <_has_ext_stdout_stderr>
 800221e:	b130      	cbz	r0, 800222e <initialise_monitor_handles+0xa2>
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <initialise_monitor_handles+0xb4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800222e:	b005      	add	sp, #20
 8002230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002234:	2000009c 	.word	0x2000009c
 8002238:	200000a4 	.word	0x200000a4
 800223c:	20000098 	.word	0x20000098
 8002240:	200000a0 	.word	0x200000a0
 8002244:	08002385 	.word	0x08002385

08002248 <_isatty>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	f7ff fd4d 	bl	8001ce8 <findslot>
 800224e:	2509      	movs	r5, #9
 8002250:	4604      	mov	r4, r0
 8002252:	b920      	cbnz	r0, 800225e <_isatty+0x16>
 8002254:	f000 f814 	bl	8002280 <__errno>
 8002258:	6005      	str	r5, [r0, #0]
 800225a:	4620      	mov	r0, r4
 800225c:	bd70      	pop	{r4, r5, r6, pc}
 800225e:	4628      	mov	r0, r5
 8002260:	4621      	mov	r1, r4
 8002262:	beab      	bkpt	0x00ab
 8002264:	4604      	mov	r4, r0
 8002266:	2c01      	cmp	r4, #1
 8002268:	d0f7      	beq.n	800225a <_isatty+0x12>
 800226a:	f000 f809 	bl	8002280 <__errno>
 800226e:	2400      	movs	r4, #0
 8002270:	4606      	mov	r6, r0
 8002272:	2513      	movs	r5, #19
 8002274:	4628      	mov	r0, r5
 8002276:	4621      	mov	r1, r4
 8002278:	beab      	bkpt	0x00ab
 800227a:	4605      	mov	r5, r0
 800227c:	6035      	str	r5, [r6, #0]
 800227e:	e7ec      	b.n	800225a <_isatty+0x12>

08002280 <__errno>:
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <__errno+0x8>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000

0800228c <_init>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

08002298 <_fini>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	bf00      	nop
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr
