
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a70  08002a70  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002a70  08002a70  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a70  08002a70  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000090  08002b08  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08002b08  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e21  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000058c  00000000  00000000  00021ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  00022470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00022628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002788  00000000  00000000  000227a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000015f9  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ab8f  00000000  00000000  00026529  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000310b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000115c  00000000  00000000  00031134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800294c 	.word	0x0800294c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800294c 	.word	0x0800294c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <delay>:
//rcv buffer of 32 bytes
uint8_t rcv_buff[32];


void delay(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000/2 ; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e002      	b.n	80002d2 <delay+0x12>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <delay+0x28>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d9f8      	bls.n	80002cc <delay+0xc>
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	0003d08f 	.word	0x0003d08f

080002ec <I2C1_GPIO_Init>:

void I2C1_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <I2C1_GPIO_Init+0x40>)
 80002f4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 80002f6:	2302      	movs	r3, #2
 80002f8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode= 4;
 80002fa:	2304      	movs	r3, #4
 80002fc:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 80002fe:	2301      	movs	r3, #1
 8000300:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PU;
 8000302:	2301      	movs	r3, #1
 8000304:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000306:	2302      	movs	r3, #2
 8000308:	72bb      	strb	r3, [r7, #10]
	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber= 8;
 800030a:	2308      	movs	r3, #8
 800030c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f000 ff1f 	bl	8001154 <GPIO_Init>
	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber= 9;
 8000316:	2309      	movs	r3, #9
 8000318:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 ff19 	bl	8001154 <GPIO_Init>


}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40020400 	.word	0x40020400

08000330 <I2C1_Init>:

void I2C1_Init(void){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <I2C1_Init+0x2c>)
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <I2C1_Init+0x30>)
 8000338:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <I2C1_Init+0x2c>)
 800033c:	2201      	movs	r2, #1
 800033e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <I2C1_Init+0x2c>)
 8000342:	2261      	movs	r2, #97	; 0x61
 8000344:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <I2C1_Init+0x2c>)
 8000348:	2200      	movs	r2, #0
 800034a:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <I2C1_Init+0x2c>)
 800034e:	4a05      	ldr	r2, [pc, #20]	; (8000364 <I2C1_Init+0x34>)
 8000350:	605a      	str	r2, [r3, #4]


	I2C_Init(&I2C1Handle);
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <I2C1_Init+0x2c>)
 8000354:	f000 faa0 	bl	8000898 <I2C_Init>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000168 	.word	0x20000168
 8000360:	40005400 	.word	0x40005400
 8000364:	000186a0 	.word	0x000186a0

08000368 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//button configuration
	GpioBtn.pGPIOx =GPIOC;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <GPIO_ButtonInit+0x2c>)
 8000370:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 8000372:	230d      	movs	r3, #13
 8000374:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IN;
 8000376:	2300      	movs	r3, #0
 8000378:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800037a:	2302      	movs	r3, #2
 800037c:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800037e:	2300      	movs	r3, #0
 8000380:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fee5 	bl	8001154 <GPIO_Init>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40020800 	.word	0x40020800

08000398 <I2C1_ER_IRQHandler>:



/* I2C1 error interrupt: run this whenever I2C error interrupt is generated */
void	I2C1_ER_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	I2C_ERROR_IRQHandling(&I2C1Handle);
 800039c:	4802      	ldr	r0, [pc, #8]	; (80003a8 <I2C1_ER_IRQHandler+0x10>)
 800039e:	f000 fd82 	bl	8000ea6 <I2C_ERROR_IRQHandling>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000168 	.word	0x20000168

080003ac <I2C1_EV_IRQHandler>:
/* I2C2 event interrupt: run this whenever I2C event interrupt is generated */
void	I2C1_EV_IRQHandler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	I2C_EVENT_IRQHandling(&I2C1Handle);
 80003b0:	4802      	ldr	r0, [pc, #8]	; (80003bc <I2C1_EV_IRQHandler+0x10>)
 80003b2:	f000 fca9 	bl	8000d08 <I2C_EVENT_IRQHandling>
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000168 	.word	0x20000168

080003c0 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]
	if(AppEv== I2C_EVENT_TX_COMPLETE)
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d103      	bne.n	80003da <I2C_ApplicationEventCallback+0x1a>
	{
		printf("Tx is complete\n");
 80003d2:	480f      	ldr	r0, [pc, #60]	; (8000410 <I2C_ApplicationEventCallback+0x50>)
 80003d4:	f001 f914 	bl	8001600 <puts>
		//close send data and generate stop condition on error
		I2C_CloseSendData(pI2CHandle);
		I2C_GenerateStopCondition(I2C1);
	}

}
 80003d8:	e015      	b.n	8000406 <I2C_ApplicationEventCallback+0x46>
	else if (AppEv == I2C_EVENT_RX_COMPLETE) {
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d106      	bne.n	80003ee <I2C_ApplicationEventCallback+0x2e>
		printf("Rx is complete\n");
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <I2C_ApplicationEventCallback+0x54>)
 80003e2:	f001 f90d 	bl	8001600 <puts>
		receive_complete = SET;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <I2C_ApplicationEventCallback+0x58>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
}
 80003ec:	e00b      	b.n	8000406 <I2C_ApplicationEventCallback+0x46>
	else if (AppEv == I2C_ERROR_AF) {
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	2b05      	cmp	r3, #5
 80003f2:	d108      	bne.n	8000406 <I2C_ApplicationEventCallback+0x46>
		printf("ERROR ACK FAILURE\n");
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <I2C_ApplicationEventCallback+0x5c>)
 80003f6:	f001 f903 	bl	8001600 <puts>
		I2C_CloseSendData(pI2CHandle);
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 f925 	bl	800064a <I2C_CloseSendData>
		I2C_GenerateStopCondition(I2C1);
 8000400:	4807      	ldr	r0, [pc, #28]	; (8000420 <I2C_ApplicationEventCallback+0x60>)
 8000402:	f000 f8b8 	bl	8000576 <I2C_GenerateStopCondition>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	08002964 	.word	0x08002964
 8000414:	08002974 	.word	0x08002974
 8000418:	200000ac 	.word	0x200000ac
 800041c:	08002984 	.word	0x08002984
 8000420:	40005400 	.word	0x40005400

08000424 <main>:

int main(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af02      	add	r7, sp, #8

	uint8_t commandcode;
	uint8_t length;

	//semihosting to print to console
	initialise_monitor_handles();
 800042a:	f002 fa0f 	bl	800284c <initialise_monitor_handles>

	printf("Application is running\n");
 800042e:	4836      	ldr	r0, [pc, #216]	; (8000508 <main+0xe4>)
 8000430:	f001 f8e6 	bl	8001600 <puts>
	//init user button on stm board
	GPIO_ButtonInit();
 8000434:	f7ff ff98 	bl	8000368 <GPIO_ButtonInit>
	//I2C PIN INIT
	I2C1_GPIO_Init();
 8000438:	f7ff ff58 	bl	80002ec <I2C1_GPIO_Init>
	//I2C PERIPHERAL CONFIG
	I2C1_Init();
 800043c:	f7ff ff78 	bl	8000330 <I2C1_Init>
	//I2C IRQ CONFIG
	I2C_IRQConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000440:	2101      	movs	r1, #1
 8000442:	201f      	movs	r0, #31
 8000444:	f000 fae0 	bl	8000a08 <I2C_IRQConfig>
	I2C_IRQConfig(IRQ_NO_I2C1_ER, ENABLE);
 8000448:	2101      	movs	r1, #1
 800044a:	2020      	movs	r0, #32
 800044c:	f000 fadc 	bl	8000a08 <I2C_IRQConfig>
	//enable I2C1 peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000450:	2101      	movs	r1, #1
 8000452:	482e      	ldr	r0, [pc, #184]	; (800050c <main+0xe8>)
 8000454:	f000 fa04 	bl	8000860 <I2C_PeripheralControl>

	//manage acking
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8000458:	2101      	movs	r1, #1
 800045a:	482c      	ldr	r0, [pc, #176]	; (800050c <main+0xe8>)
 800045c:	f000 f8ab 	bl	80005b6 <I2C_ManageAcking>


	while (1)
	{
		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 8000460:	bf00      	nop
 8000462:	210d      	movs	r1, #13
 8000464:	482a      	ldr	r0, [pc, #168]	; (8000510 <main+0xec>)
 8000466:	f001 f815 	bl	8001494 <GPIO_ReadFromInputPin>
 800046a:	4603      	mov	r3, r0
 800046c:	2b01      	cmp	r3, #1
 800046e:	d0f8      	beq.n	8000462 <main+0x3e>
		delay();//debounce prevention
 8000470:	f7ff ff26 	bl	80002c0 <delay>


		// 1. send command to request length of data to be read from slave when not busy
		commandcode = 0x51;
 8000474:	2351      	movs	r3, #81	; 0x51
 8000476:	71fb      	strb	r3, [r7, #7]
		while(I2CMasterSendDataIT(&I2C1Handle, &commandcode, 1, 0x68, ENABLE) != I2C_READY);
 8000478:	bf00      	nop
 800047a:	1df9      	adds	r1, r7, #7
 800047c:	2301      	movs	r3, #1
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2368      	movs	r3, #104	; 0x68
 8000482:	2201      	movs	r2, #1
 8000484:	4823      	ldr	r0, [pc, #140]	; (8000514 <main+0xf0>)
 8000486:	f000 fb45 	bl	8000b14 <I2CMasterSendDataIT>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1f4      	bne.n	800047a <main+0x56>

		// 2. Read response of length command from slave when not busy

		while (I2CMasterRcvDataIT(&I2C1Handle, &length, 1, 0x68,  ENABLE) != I2C_READY);
 8000490:	bf00      	nop
 8000492:	1db9      	adds	r1, r7, #6
 8000494:	2301      	movs	r3, #1
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	2368      	movs	r3, #104	; 0x68
 800049a:	2201      	movs	r2, #1
 800049c:	481d      	ldr	r0, [pc, #116]	; (8000514 <main+0xf0>)
 800049e:	f000 fb81 	bl	8000ba4 <I2CMasterRcvDataIT>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f4      	bne.n	8000492 <main+0x6e>

		// 3. Begin command to read 'length' bytes of data
		commandcode = 0x52;
 80004a8:	2352      	movs	r3, #82	; 0x52
 80004aa:	71fb      	strb	r3, [r7, #7]
		while(I2CMasterSendDataIT(&I2C1Handle, &commandcode, 1, 0x68, ENABLE) != I2C_READY);
 80004ac:	bf00      	nop
 80004ae:	1df9      	adds	r1, r7, #7
 80004b0:	2301      	movs	r3, #1
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2368      	movs	r3, #104	; 0x68
 80004b6:	2201      	movs	r2, #1
 80004b8:	4816      	ldr	r0, [pc, #88]	; (8000514 <main+0xf0>)
 80004ba:	f000 fb2b 	bl	8000b14 <I2CMasterSendDataIT>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1f4      	bne.n	80004ae <main+0x8a>

		while(I2CMasterRcvDataIT(&I2C1Handle, rcv_buff, length, 0x68, DISABLE)!= I2C_READY);
 80004c4:	bf00      	nop
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	461a      	mov	r2, r3
 80004ca:	2300      	movs	r3, #0
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2368      	movs	r3, #104	; 0x68
 80004d0:	4911      	ldr	r1, [pc, #68]	; (8000518 <main+0xf4>)
 80004d2:	4810      	ldr	r0, [pc, #64]	; (8000514 <main+0xf0>)
 80004d4:	f000 fb66 	bl	8000ba4 <I2CMasterRcvDataIT>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1f3      	bne.n	80004c6 <main+0xa2>

		//need to wait until the RXNE interrupt is finished (RX is done): otherwise will
		//not be ready to print data
		receive_complete=RESET;
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <main+0xf8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
		 //printf("receive complete is: %s", receive_complete);
		while(receive_complete!=SET){};
 80004e4:	bf00      	nop
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <main+0xf8>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d1fb      	bne.n	80004e6 <main+0xc2>
		//get rcv_buff from pointer rather than a return

		 rcv_buff[length+1] = '\0';
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	3301      	adds	r3, #1
 80004f2:	4a09      	ldr	r2, [pc, #36]	; (8000518 <main+0xf4>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	54d1      	strb	r1, [r2, r3]
		 printf("Data : %s", rcv_buff);
 80004f8:	4907      	ldr	r1, [pc, #28]	; (8000518 <main+0xf4>)
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0xfc>)
 80004fc:	f001 f80c 	bl	8001518 <iprintf>
		 receive_complete=RESET;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <main+0xf8>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 8000506:	e7ab      	b.n	8000460 <main+0x3c>
 8000508:	08002998 	.word	0x08002998
 800050c:	40005400 	.word	0x40005400
 8000510:	40020800 	.word	0x40020800
 8000514:	20000168 	.word	0x20000168
 8000518:	20000190 	.word	0x20000190
 800051c:	200000ac 	.word	0x200000ac
 8000520:	080029b0 	.word	0x080029b0

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052a:	490e      	ldr	r1, [pc, #56]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000540:	4c0b      	ldr	r4, [pc, #44]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800054e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 ffb5 	bl	80014c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff ff65 	bl	8000424 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000568:	08002a78 	.word	0x08002a78
  ldr r2, =_sbss
 800056c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000570:	200001b4 	.word	0x200001b4

08000574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>

08000576 <I2C_GenerateStopCondition>:
uint16_t APB1_Prescaler[8] = {2,4,8,16};



void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1<<I2C_CR1_STOP);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <I2C_GenerateStartCondition>:

void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	601a      	str	r2, [r3, #0]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d106      	bne.n	80005d6 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80005d4:	e005      	b.n	80005e2 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	//disable ITBUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITBUFEN);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000604:	605a      	str	r2, [r3, #4]
	//disable ITEVTEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITEVTEN);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000614:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState=I2C_READY;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer= NULL;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen=0;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize=0;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]

	//enable acking

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a5b      	ldrb	r3, [r3, #9]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d105      	bne.n	8000642 <I2C_CloseReceiveData+0x54>
		{
			I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffba 	bl	80005b6 <I2C_ManageAcking>
		}

}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	//disable ITBUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITBUFEN);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000660:	605a      	str	r2, [r3, #4]
	//disable ITEVTEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1<<I2C_CR2_ITEVTEN);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000670:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState=I2C_READY;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer= NULL;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen=0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]

}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{	uint32_t dummyread;
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	 //check device mode
	if (pI2CHandle->pI2Cx->SR2 & (1<<I2C_SR2_MSL))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d021      	beq.n	80006ea <I2C_ClearADDRFlag+0x5a>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState==I2C_BUSY_IN_RX)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7f1b      	ldrb	r3, [r3, #28]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d125      	bne.n	80006fa <I2C_ClearADDRFlag+0x6a>
		{
			if (pI2CHandle->RxSize==1)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d110      	bne.n	80006d8 <I2C_ClearADDRFlag+0x48>
			{
				//first disable ACK
				pI2CHandle->pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006c4:	601a      	str	r2, [r3, #0]

				//clear ADDR flag
				dummyread =  pI2CHandle->pI2Cx->SR1;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	60fb      	str	r3, [r7, #12]
				dummyread =  pI2CHandle->pI2Cx->SR2;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	60fb      	str	r3, [r7, #12]
		dummyread =  pI2CHandle->pI2Cx->SR1;
		dummyread =  pI2CHandle->pI2Cx->SR2;
		(void)dummyread;

	}
}
 80006d6:	e010      	b.n	80006fa <I2C_ClearADDRFlag+0x6a>
				dummyread =  pI2CHandle->pI2Cx->SR1;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	60fb      	str	r3, [r7, #12]
				dummyread =  pI2CHandle->pI2Cx->SR2;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	60fb      	str	r3, [r7, #12]
}
 80006e8:	e007      	b.n	80006fa <I2C_ClearADDRFlag+0x6a>
		dummyread =  pI2CHandle->pI2Cx->SR1;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	60fb      	str	r3, [r7, #12]
		dummyread =  pI2CHandle->pI2Cx->SR2;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	60fb      	str	r3, [r7, #12]
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <RCC_GETPCLK1Value>:

uint32_t RCC_GETPCLK1Value(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
	uint32_t pclk1, systemclk;
	uint8_t clksrc, temp, ahbpresc,apb1presc;
	//determine clock source by reading RCC registers
	clksrc = ((RCC->CFGR >>2) & 0x3);
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <RCC_GETPCLK1Value+0x94>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	f003 0303 	and.w	r3, r3, #3
 800071a:	727b      	strb	r3, [r7, #9]
	if (clksrc ==0 )
 800071c:	7a7b      	ldrb	r3, [r7, #9]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d102      	bne.n	8000728 <RCC_GETPCLK1Value+0x20>
	{
		//HSI clock source 16 MHz
		systemclk =  16000000;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <RCC_GETPCLK1Value+0x98>)
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e004      	b.n	8000732 <RCC_GETPCLK1Value+0x2a>
	}
	else if (clksrc ==1 )
 8000728:	7a7b      	ldrb	r3, [r7, #9]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d101      	bne.n	8000732 <RCC_GETPCLK1Value+0x2a>
	{
		//HSE clock source (8 MHz for discovery board)
		systemclk =  8000000;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <RCC_GETPCLK1Value+0x9c>)
 8000730:	60fb      	str	r3, [r7, #12]
	}
	//get AHB prescaler value
	temp =  ((RCC->CFGR >>4) & 0xF);
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <RCC_GETPCLK1Value+0x94>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	723b      	strb	r3, [r7, #8]
	if (temp<8)
 8000740:	7a3b      	ldrb	r3, [r7, #8]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d802      	bhi.n	800074c <RCC_GETPCLK1Value+0x44>
	{
		ahbpresc = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	72fb      	strb	r3, [r7, #11]
 800074a:	e005      	b.n	8000758 <RCC_GETPCLK1Value+0x50>
	}
	else
	{
		ahbpresc = AHB_Prescaler[temp-8];
 800074c:	7a3b      	ldrb	r3, [r7, #8]
 800074e:	3b08      	subs	r3, #8
 8000750:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <RCC_GETPCLK1Value+0xa0>)
 8000752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000756:	72fb      	strb	r3, [r7, #11]
	}
	//get APB1 prescaler
	temp =  ((RCC->CFGR >>10) & 0x7);
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <RCC_GETPCLK1Value+0x94>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	0a9b      	lsrs	r3, r3, #10
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f003 0307 	and.w	r3, r3, #7
 8000764:	723b      	strb	r3, [r7, #8]
	if (temp<7)
 8000766:	7a3b      	ldrb	r3, [r7, #8]
 8000768:	2b06      	cmp	r3, #6
 800076a:	d802      	bhi.n	8000772 <RCC_GETPCLK1Value+0x6a>
	{
		apb1presc = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	72bb      	strb	r3, [r7, #10]
 8000770:	e005      	b.n	800077e <RCC_GETPCLK1Value+0x76>
	}
	else
	{
		apb1presc = APB1_Prescaler[temp-4];
 8000772:	7a3b      	ldrb	r3, [r7, #8]
 8000774:	3b04      	subs	r3, #4
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <RCC_GETPCLK1Value+0xa4>)
 8000778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800077c:	72bb      	strb	r3, [r7, #10]
	}
	//calculate peripheral clock 1 frequency
	pclk1 = (systemclk/ahbpresc)/apb1presc;
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	fbb2 f2f3 	udiv	r2, r2, r3
 8000786:	7abb      	ldrb	r3, [r7, #10]
 8000788:	fbb2 f3f3 	udiv	r3, r2, r3
 800078c:	607b      	str	r3, [r7, #4]
	return pclk1;
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40023800 	.word	0x40023800
 80007a0:	00f42400 	.word	0x00f42400
 80007a4:	007a1200 	.word	0x007a1200
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000010 	.word	0x20000010

080007b0 <I2C_PeriClockControl>:


void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d120      	bne.n	8000804 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <I2C_PeriClockControl+0xa0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PERICLK_EN();
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
			I2C3_PERICLK_DI();
		}

	}

}
 80007d6:	e035      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <I2C_PeriClockControl+0xa8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <I2C_PeriClockControl+0x3e>
			I2C2_PERICLK_EN();
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ec:	e02a      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <I2C_PeriClockControl+0xac>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d126      	bne.n	8000844 <I2C_PeriClockControl+0x94>
			I2C3_PERICLK_EN();
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000802:	e01f      	b.n	8000844 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <I2C_PeriClockControl+0xa0>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <I2C_PeriClockControl+0x6a>
			I2C1_PERICLK_DI();
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <I2C_PeriClockControl+0xa4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <I2C_PeriClockControl+0xa4>)
 8000812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000818:	e014      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <I2C_PeriClockControl+0xa8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <I2C_PeriClockControl+0x80>
			I2C2_PERICLK_DI();
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <I2C_PeriClockControl+0xa4>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <I2C_PeriClockControl+0xa4>)
 8000828:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800082e:	e009      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <I2C_PeriClockControl+0xac>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d105      	bne.n	8000844 <I2C_PeriClockControl+0x94>
			I2C3_PERICLK_DI();
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <I2C_PeriClockControl+0xa4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <I2C_PeriClockControl+0xa4>)
 800083e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40005400 	.word	0x40005400
 8000854:	40023800 	.word	0x40023800
 8000858:	40005800 	.word	0x40005800
 800085c:	40005c00 	.word	0x40005c00

08000860 <I2C_PeripheralControl>:


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1<<I2C_CR1_PE);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f043 0201 	orr.w	r2, r3, #1
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
	}
}
 800087e:	e005      	b.n	800088c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 0201 	bic.w	r2, r3, #1
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <I2C_Init>:



void I2C_Init(I2C_Handle_t *I2CHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
	uint16_t ccrvalue;
	uint8_t trise =0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	727b      	strb	r3, [r7, #9]


	//enable peripheral clock
	I2C_PeriClockControl(I2CHandle->pI2Cx,ENABLE );
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff7e 	bl	80007b0 <I2C_PeriClockControl>


	// steps must be done when peripheral is disabled
	//1. Configure mode (speed): standard or fast
	if (I2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a50      	ldr	r2, [pc, #320]	; (80009fc <I2C_Init+0x164>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d80f      	bhi.n	80008de <I2C_Init+0x46>
	{
		//standard mode
		ccrvalue =  (RCC_GETPCLK1Value()/(2*I2CHandle->I2C_Config.I2C_SCLSpeed));
 80008be:	f7ff ff23 	bl	8000708 <RCC_GETPCLK1Value>
 80008c2:	4602      	mov	r2, r0
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	817b      	strh	r3, [r7, #10]
		tempreg |= ccrvalue & 0xFFF; //maskout other bits except first 12
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	4313      	orrs	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	e02d      	b.n	800093a <I2C_Init+0xa2>
	}
	else
	{
		//fastmode
		tempreg |= (1<<15);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e4:	60fb      	str	r3, [r7, #12]
		tempreg |= (I2CHandle->I2C_Config.I2C_FMDutyCycle <<14);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	895b      	ldrh	r3, [r3, #10]
 80008ea:	039b      	lsls	r3, r3, #14
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (I2CHandle->I2C_Config.I2C_FMDutyCycle==2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	895b      	ldrh	r3, [r3, #10]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d10b      	bne.n	8000914 <I2C_Init+0x7c>
		{
			ccrvalue =  (RCC_GETPCLK1Value()/(3*I2CHandle->I2C_Config.I2C_SCLSpeed));
 80008fc:	f7ff ff04 	bl	8000708 <RCC_GETPCLK1Value>
 8000900:	4601      	mov	r1, r0
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000910:	817b      	strh	r3, [r7, #10]
 8000912:	e00c      	b.n	800092e <I2C_Init+0x96>
		}
		else
		{
			ccrvalue =  (RCC_GETPCLK1Value()/(25*I2CHandle->I2C_Config.I2C_SCLSpeed));
 8000914:	f7ff fef8 	bl	8000708 <RCC_GETPCLK1Value>
 8000918:	4601      	mov	r1, r0
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	009a      	lsls	r2, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	fbb1 f3f3 	udiv	r3, r1, r3
 800092c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccrvalue & 0xFFF; //maskout other bits except first 12
 800092e:	897b      	ldrh	r3, [r7, #10]
 8000930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	4313      	orrs	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
	}
	I2CHandle->pI2Cx->CCR = tempreg;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	61da      	str	r2, [r3, #28]
	//2. FREQ bits must be configured with the APB clock frequency value
	tempreg = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
	tempreg |=  RCC_GETPCLK1Value()/1000000;
 8000946:	f7ff fedf 	bl	8000708 <RCC_GETPCLK1Value>
 800094a:	4602      	mov	r2, r0
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <I2C_Init+0x168>)
 800094e:	fba3 2302 	umull	r2, r3, r3, r2
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4313      	orrs	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); //masks other bits and write to cr2
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000964:	605a      	str	r2, [r3, #4]
	//3. Configure device address (applies if slave)
	tempreg=0;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
	tempreg |= I2CHandle->I2C_Config.I2C_DeviceAddress<<1  ;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7a1b      	ldrb	r3, [r3, #8]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	461a      	mov	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4313      	orrs	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14); //bit 14 has to be kept at 1 per ref manual
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->OAR1 = tempreg;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	609a      	str	r2, [r3, #8]
	//4. Enable Acking
	tempreg=0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
	tempreg |=  (I2CHandle->I2C_Config.I2C_ACKControl <<10);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7a5b      	ldrb	r3, [r3, #9]
 8000990:	029b      	lsls	r3, r3, #10
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4313      	orrs	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->CR1 = tempreg;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	601a      	str	r2, [r3, #0]
	//5. Configure rise time of I2C pins
	tempreg = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
	//TRISE= (trisemax /tpclkl1)+1 or...fpclk1/frisetimemax+1
	if (I2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <I2C_Init+0x164>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d80a      	bhi.n	80009c6 <I2C_Init+0x12e>
	{
		//standard mode (trise max =  1000 nanoseconds)
		trise= (RCC_GETPCLK1Value()/1000000)+1;
 80009b0:	f7ff feaa 	bl	8000708 <RCC_GETPCLK1Value>
 80009b4:	4602      	mov	r2, r0
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <I2C_Init+0x168>)
 80009b8:	fba3 2302 	umull	r2, r3, r3, r2
 80009bc:	0c9b      	lsrs	r3, r3, #18
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	3301      	adds	r3, #1
 80009c2:	727b      	strb	r3, [r7, #9]
 80009c4:	e00e      	b.n	80009e4 <I2C_Init+0x14c>

	}
	else
	{
		//fast mode (trise max = 300 nanoseconds)
		trise= ((RCC_GETPCLK1Value()*300)/1000000000)+1;
 80009c6:	f7ff fe9f 	bl	8000708 <RCC_GETPCLK1Value>
 80009ca:	4602      	mov	r2, r0
 80009cc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009d0:	fb03 f302 	mul.w	r3, r3, r2
 80009d4:	0a5b      	lsrs	r3, r3, #9
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <I2C_Init+0x16c>)
 80009d8:	fba2 2303 	umull	r2, r3, r2, r3
 80009dc:	09db      	lsrs	r3, r3, #7
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	3301      	adds	r3, #1
 80009e2:	727b      	strb	r3, [r7, #9]

	}
	tempreg = trise;
 80009e4:	7a7b      	ldrb	r3, [r7, #9]
 80009e6:	60fb      	str	r3, [r7, #12]
	I2CHandle->pI2Cx->TRISE = (tempreg &0x3F);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009f2:	621a      	str	r2, [r3, #32]



}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	000186a0 	.word	0x000186a0
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	00044b83 	.word	0x00044b83

08000a08 <I2C_IRQConfig>:
/*******************NON-blocking Data controls************************/


//enable the given IRQ
void I2C_IRQConfig(uint8_t IRQNumber,  uint8_t EnorDi)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71bb      	strb	r3, [r7, #6]

	if(EnorDi== ENABLE)
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d133      	bne.n	8000a86 <I2C_IRQConfig+0x7e>
	{
		if(IRQNumber <=31)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	d80a      	bhi.n	8000a3a <I2C_IRQConfig+0x32>
		{
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <I2C_IRQConfig+0xf4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a30:	4611      	mov	r1, r2
 8000a32:	4a32      	ldr	r2, [pc, #200]	; (8000afc <I2C_IRQConfig+0xf4>)
 8000a34:	430b      	orrs	r3, r1
 8000a36:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER2 |= (1<<IRQNumber%64);
		}
	}

}
 8000a38:	e059      	b.n	8000aee <I2C_IRQConfig+0xe6>
		else if(IRQNumber >31 &&  IRQNumber<64 )
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b1f      	cmp	r3, #31
 8000a3e:	d90f      	bls.n	8000a60 <I2C_IRQConfig+0x58>
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b3f      	cmp	r3, #63	; 0x3f
 8000a44:	d80c      	bhi.n	8000a60 <I2C_IRQConfig+0x58>
			*NVIC_ISER1 |= (1<<IRQNumber%32);
 8000a46:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <I2C_IRQConfig+0xf8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	f002 021f 	and.w	r2, r2, #31
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a29      	ldr	r2, [pc, #164]	; (8000b00 <I2C_IRQConfig+0xf8>)
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e046      	b.n	8000aee <I2C_IRQConfig+0xe6>
		else if(IRQNumber >64 &&  IRQNumber<96 )
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b40      	cmp	r3, #64	; 0x40
 8000a64:	d943      	bls.n	8000aee <I2C_IRQConfig+0xe6>
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b5f      	cmp	r3, #95	; 0x5f
 8000a6a:	d840      	bhi.n	8000aee <I2C_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1<<IRQNumber%64);
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <I2C_IRQConfig+0xfc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a76:	2101      	movs	r1, #1
 8000a78:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <I2C_IRQConfig+0xfc>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	e033      	b.n	8000aee <I2C_IRQConfig+0xe6>
		if(IRQNumber <=31)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b1f      	cmp	r3, #31
 8000a8a:	d80a      	bhi.n	8000aa2 <I2C_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <I2C_IRQConfig+0x100>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	79fa      	ldrb	r2, [r7, #7]
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <I2C_IRQConfig+0x100>)
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	e025      	b.n	8000aee <I2C_IRQConfig+0xe6>
		else if(IRQNumber >31 &&  IRQNumber<64 )
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b1f      	cmp	r3, #31
 8000aa6:	d90f      	bls.n	8000ac8 <I2C_IRQConfig+0xc0>
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b3f      	cmp	r3, #63	; 0x3f
 8000aac:	d80c      	bhi.n	8000ac8 <I2C_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1<<IRQNumber%32);
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <I2C_IRQConfig+0x104>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	f002 021f 	and.w	r2, r2, #31
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <I2C_IRQConfig+0x104>)
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e012      	b.n	8000aee <I2C_IRQConfig+0xe6>
		else if(IRQNumber >64 &&  IRQNumber<96 )
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b40      	cmp	r3, #64	; 0x40
 8000acc:	d90f      	bls.n	8000aee <I2C_IRQConfig+0xe6>
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ad2:	d80c      	bhi.n	8000aee <I2C_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1<<IRQNumber%64);
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <I2C_IRQConfig+0x108>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <I2C_IRQConfig+0x108>)
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	e7ff      	b.n	8000aee <I2C_IRQConfig+0xe6>
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000e104 	.word	0xe000e104
 8000b04:	e000e108 	.word	0xe000e108
 8000b08:	e000e180 	.word	0xe000e180
 8000b0c:	e000e184 	.word	0xe000e184
 8000b10:	e000e188 	.word	0xe000e188

08000b14 <I2CMasterSendDataIT>:
	*(NVIC_PR_BASE_ADDR+iprx) |= (IRQPriority<<(shift_amount));
}

//generates interrupt for sending data
uint8_t I2CMasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	7f1b      	ldrb	r3, [r3, #28]
 8000b26:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d033      	beq.n	8000b96 <I2CMasterSendDataIT+0x82>
 8000b2e:	7dfb      	ldrb	r3, [r7, #23]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d030      	beq.n	8000b96 <I2CMasterSendDataIT+0x82>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2202      	movs	r2, #2
 8000b44:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	78fa      	ldrb	r2, [r7, #3]
 8000b4a:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Generate START Condition
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b64:	601a      	str	r2, [r3, #0]

		//enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b74:	605a      	str	r2, [r3, #4]

		//enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1<<I2C_CR2_ITEVTEN);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b84:	605a      	str	r2, [r3, #4]

		//ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1<<I2C_CR2_ITERREN);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b94:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8000b96:	7dfb      	ldrb	r3, [r7, #23]

}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	371c      	adds	r7, #28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <I2CMasterRcvDataIT>:



uint8_t I2CMasterRcvDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	7f1b      	ldrb	r3, [r3, #28]
 8000bb6:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d033      	beq.n	8000c26 <I2CMasterRcvDataIT+0x82>
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d030      	beq.n	8000c26 <I2CMasterRcvDataIT+0x82>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	78fa      	ldrb	r2, [r7, #3]
 8000be0:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fcd0 	bl	8000596 <I2C_GenerateStartCondition>


		//enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c04:	605a      	str	r2, [r3, #4]

		//enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1<<I2C_CR2_ITEVTEN);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c14:	605a      	str	r2, [r3, #4]

		//enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1<<I2C_CR2_ITERREN);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c24:	605a      	str	r2, [r3, #4]


	}

	return busystate;
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <I2C_MasterHandleTXEInterrupt>:


static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen>0)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00f      	beq.n	8000c60 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load data into DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	611a      	str	r2, [r3, #16]
		//2. decrement Txlen
		pI2CHandle->TxLen--;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	615a      	str	r2, [r3, #20]
		//3. increment buffer address
		pI2CHandle->pTxBuffer++;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60da      	str	r2, [r3, #12]
	}

}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <I2C_MasterHandleRXNEInterrupt>:



static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize==1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d10b      	bne.n	8000c94 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
			*pI2CHandle->pRxBuffer=pI2CHandle->pI2Cx->DR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	701a      	strb	r2, [r3, #0]
			pI2CHandle->RxLen--;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize>1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d91c      	bls.n	8000cd6 <I2C_MasterHandleRXNEInterrupt+0x6a>
	{
		if(pI2CHandle->RxLen==2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d107      	bne.n	8000cb4 <I2C_MasterHandleRXNEInterrupt+0x48>
		{
			pI2CHandle->pI2Cx->CR1 &= ~(1<<I2C_CR1_ACK);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cb2:	601a      	str	r2, [r3, #0]
		}


		//read DR
		*pI2CHandle->pRxBuffer =pI2CHandle->pI2Cx->DR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	691a      	ldr	r2, [r3, #16]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	619a      	str	r2, [r3, #24]

	}
	if(pI2CHandle->RxLen==0)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d110      	bne.n	8000d00 <I2C_MasterHandleRXNEInterrupt+0x94>
	{
		//close I2C data reception and notify the application

		//1. generate STOP condition
		if(pI2CHandle->Sr==0)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <I2C_MasterHandleRXNEInterrupt+0x86>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc42 	bl	8000576 <I2C_GenerateStopCondition>
		}

		//2. Close I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fc7b 	bl	80005ee <I2C_CloseReceiveData>

		//3. Notify application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EVENT_RX_COMPLETE);
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fb60 	bl	80003c0 <I2C_ApplicationEventCallback>
	}

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <I2C_EVENT_IRQHandling>:


// handles events once interrupt is triggered via I2C_MasterReceiveDataIT or I2C_MasterSendDataIT
// TODO: document each event from ref manual
void I2C_EVENT_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	uint32_t temp1, temp2, temp3;
	uint8_t slaveaddr;

	//get status of ITEVTEN and ITBUFEN
	temp1 =  pI2CHandle->pI2Cx->CR2 & (1<<I2C_CR2_ITEVTEN);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1a:	617b      	str	r3, [r7, #20]
	temp2 =  pI2CHandle->pI2Cx->CR2 & (1<<I2C_CR2_ITBUFEN);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d26:	613b      	str	r3, [r7, #16]

	//1. check if SB EVENT is enabled (only applicable in master mode see ref manual)
	temp3 =  pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_SB);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp3)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d026      	beq.n	8000d88 <I2C_EVENT_IRQHandling+0x80>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d023      	beq.n	8000d88 <I2C_EVENT_IRQHandling+0x80>
	{
		//execute address phase of read or write depending on state
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7f1b      	ldrb	r3, [r3, #28]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d10d      	bne.n	8000d64 <I2C_EVENT_IRQHandling+0x5c>
		{
			slaveaddr = pI2CHandle->DevAddr;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7f5b      	ldrb	r3, [r3, #29]
 8000d4c:	72fb      	strb	r3, [r7, #11]
			slaveaddr= slaveaddr <<1;
 8000d4e:	7afb      	ldrb	r3, [r7, #11]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	72fb      	strb	r3, [r7, #11]
			slaveaddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000d54:	7afb      	ldrb	r3, [r7, #11]
 8000d56:	f023 0301 	bic.w	r3, r3, #1
 8000d5a:	72fb      	strb	r3, [r7, #11]
			pI2CHandle->pI2Cx->DR =  slaveaddr;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	7afa      	ldrb	r2, [r7, #11]
 8000d62:	611a      	str	r2, [r3, #16]
		}

		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7f1b      	ldrb	r3, [r3, #28]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10d      	bne.n	8000d88 <I2C_EVENT_IRQHandling+0x80>
		{
			slaveaddr = pI2CHandle->DevAddr;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7f5b      	ldrb	r3, [r3, #29]
 8000d70:	72fb      	strb	r3, [r7, #11]
			slaveaddr = slaveaddr <<1;
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	72fb      	strb	r3, [r7, #11]
			slaveaddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8000d78:	7afb      	ldrb	r3, [r7, #11]
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	72fb      	strb	r3, [r7, #11]
			pI2CHandle->pI2Cx->DR =  slaveaddr;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	7afa      	ldrb	r2, [r7, #11]
 8000d86:	611a      	str	r2, [r3, #16]
		}

	}

	//2. Handle ADDR  Event
	temp3 =  pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_ADDR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp3)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <I2C_EVENT_IRQHandling+0x9e>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <I2C_EVENT_IRQHandling+0x9e>
	{
		//clear ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fc75 	bl	8000690 <I2C_ClearADDRFlag>
	}

	//3. Handle  BTF event (BYTE TRANSFER FINISHED) if enabled
	temp3 =  pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_BTF);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp3)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d022      	beq.n	8000dfe <I2C_EVENT_IRQHandling+0xf6>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d01f      	beq.n	8000dfe <I2C_EVENT_IRQHandling+0xf6>
	{
		//check if busy in tx or rx
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7f1b      	ldrb	r3, [r3, #28]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d11b      	bne.n	8000dfe <I2C_EVENT_IRQHandling+0xf6>
		{
			//make sure that TXE is also set
			if(pI2CHandle->pI2Cx->SR1&(1<<I2C_SR1_TXE))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d014      	beq.n	8000dfe <I2C_EVENT_IRQHandling+0xf6>
			{
				if (pI2CHandle->TxLen==0)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d110      	bne.n	8000dfe <I2C_EVENT_IRQHandling+0xf6>
				{
					//generate stop condition if no repeated start
					if (pI2CHandle->Sr==0)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d104      	bne.n	8000df0 <I2C_EVENT_IRQHandling+0xe8>
					{I2C_GenerateStopCondition(pI2CHandle->pI2Cx);}
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fbc3 	bl	8000576 <I2C_GenerateStopCondition>

					//reset member elements of handle structure
					I2C_CloseSendData(pI2CHandle);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fc2a 	bl	800064a <I2C_CloseSendData>


					//notify calling application that transmission is complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EVENT_TX_COMPLETE);
 8000df6:	2100      	movs	r1, #0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fae1 	bl	80003c0 <I2C_ApplicationEventCallback>

	}


	//4. Handle STOPF Event (only executed in slave mode)
	temp3 =  pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_STOPF);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp3)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00c      	beq.n	8000e2a <I2C_EVENT_IRQHandling+0x122>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d009      	beq.n	8000e2a <I2C_EVENT_IRQHandling+0x122>
	{
		//Clear STOPF FLAG (read SR1 (done above) and write to CR1)
		pI2CHandle->pI2Cx->CR1 |=0x000;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EVENT_STOP);
 8000e22:	2102      	movs	r1, #2
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff facb 	bl	80003c0 <I2C_ApplicationEventCallback>
	}

	//5. Handle TXE Event (TX register empty)
	temp3 =  pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_TXE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e34:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp2 && temp3)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d013      	beq.n	8000e64 <I2C_EVENT_IRQHandling+0x15c>
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d010      	beq.n	8000e64 <I2C_EVENT_IRQHandling+0x15c>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00d      	beq.n	8000e64 <I2C_EVENT_IRQHandling+0x15c>
	{
		if ( pI2CHandle->pI2Cx->SR2 &(1<< I2C_SR2_MSL))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <I2C_EVENT_IRQHandling+0x15c>
		{
			//TXE flag is set and device is in Master mode: Do a data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX )
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7f1b      	ldrb	r3, [r3, #28]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d102      	bne.n	8000e64 <I2C_EVENT_IRQHandling+0x15c>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fee6 	bl	8000c30 <I2C_MasterHandleTXEInterrupt>
		}

	}

	//6. Handle RXNE Even (Receive buffer not empty)
	temp3 =  pI2CHandle->pI2Cx->SR1 & (1<<I2C_SR1_RXNE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6e:	60fb      	str	r3, [r7, #12]
	if (temp1 && temp2 && temp3)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d013      	beq.n	8000e9e <I2C_EVENT_IRQHandling+0x196>
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d010      	beq.n	8000e9e <I2C_EVENT_IRQHandling+0x196>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00d      	beq.n	8000e9e <I2C_EVENT_IRQHandling+0x196>
	{
		//check device mode
		if ( pI2CHandle->pI2Cx->SR2 &(1<< I2C_SR2_MSL))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <I2C_EVENT_IRQHandling+0x196>
		{
			//device is in master mode
			if(pI2CHandle->TxRxState==I2C_BUSY_IN_RX)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7f1b      	ldrb	r3, [r3, #28]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d102      	bne.n	8000e9e <I2C_EVENT_IRQHandling+0x196>
			{

				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fee7 	bl	8000c6c <I2C_MasterHandleRXNEInterrupt>
		}

	}


}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <I2C_ERROR_IRQHandling>:
void I2C_ERROR_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb8:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00e      	beq.n	8000eea <I2C_ERROR_IRQHandling+0x44>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <I2C_ERROR_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ee0:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fa6b 	bl	80003c0 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef4:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00e      	beq.n	8000f1a <I2C_ERROR_IRQHandling+0x74>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <I2C_ERROR_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	695a      	ldr	r2, [r3, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f10:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		 I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000f12:	2104      	movs	r1, #4
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fa53 	bl	80003c0 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f24:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00e      	beq.n	8000f4a <I2C_ERROR_IRQHandling+0xa4>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <I2C_ERROR_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	695a      	ldr	r2, [r3, #20]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f40:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000f42:	2105      	movs	r1, #5
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fa3b 	bl	80003c0 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f54:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00e      	beq.n	8000f7a <I2C_ERROR_IRQHandling+0xd4>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00b      	beq.n	8000f7a <I2C_ERROR_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f70:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8000f72:	2106      	movs	r1, #6
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fa23 	bl	80003c0 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f84:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <I2C_ERROR_IRQHandling+0x104>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <I2C_ERROR_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fa0:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fa0b 	bl	80003c0 <I2C_ApplicationEventCallback>
	}

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <GPIO_PeriClockControl>:
* ReturnVal:	none
* Notes:		none
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d157      	bne.n	8001076 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a59      	ldr	r2, [pc, #356]	; (8001130 <GPIO_PeriClockControl+0x17c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d106      	bne.n	8000fdc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PERICLK_EN();
 8000fce:	4b59      	ldr	r3, [pc, #356]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a58      	ldr	r2, [pc, #352]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PERICLK_DI();
		}

	}
}
 8000fda:	e0a3      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a56      	ldr	r2, [pc, #344]	; (8001138 <GPIO_PeriClockControl+0x184>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d106      	bne.n	8000ff2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PERICLK_EN();
 8000fe4:	4b53      	ldr	r3, [pc, #332]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ff0:	e098      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a51      	ldr	r2, [pc, #324]	; (800113c <GPIO_PeriClockControl+0x188>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d106      	bne.n	8001008 <GPIO_PeriClockControl+0x54>
			GPIOC_PERICLK_EN();
 8000ffa:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001006:	e08d      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <GPIO_PeriClockControl+0x18c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d106      	bne.n	800101e <GPIO_PeriClockControl+0x6a>
			GPIOD_PERICLK_EN();
 8001010:	4b48      	ldr	r3, [pc, #288]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a47      	ldr	r2, [pc, #284]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800101c:	e082      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <GPIO_PeriClockControl+0x190>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d106      	bne.n	8001034 <GPIO_PeriClockControl+0x80>
			GPIOE_PERICLK_EN();
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <GPIO_PeriClockControl+0x180>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001032:	e077      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a44      	ldr	r2, [pc, #272]	; (8001148 <GPIO_PeriClockControl+0x194>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d106      	bne.n	800104a <GPIO_PeriClockControl+0x96>
			GPIOF_PERICLK_EN();
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <GPIO_PeriClockControl+0x180>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a3c      	ldr	r2, [pc, #240]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001042:	f043 0320 	orr.w	r3, r3, #32
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001048:	e06c      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a3f      	ldr	r2, [pc, #252]	; (800114c <GPIO_PeriClockControl+0x198>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d106      	bne.n	8001060 <GPIO_PeriClockControl+0xac>
			GPIOG_PERICLK_EN();
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a37      	ldr	r2, [pc, #220]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800105e:	e061      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a3b      	ldr	r2, [pc, #236]	; (8001150 <GPIO_PeriClockControl+0x19c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d15d      	bne.n	8001124 <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_EN();
 8001068:	4b32      	ldr	r3, [pc, #200]	; (8001134 <GPIO_PeriClockControl+0x180>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a31      	ldr	r2, [pc, #196]	; (8001134 <GPIO_PeriClockControl+0x180>)
 800106e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001074:	e056      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <GPIO_PeriClockControl+0x17c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d106      	bne.n	800108c <GPIO_PeriClockControl+0xd8>
			GPIOA_PERICLK_DI();
 800107e:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
}
 800108a:	e04b      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <GPIO_PeriClockControl+0x184>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d106      	bne.n	80010a2 <GPIO_PeriClockControl+0xee>
			GPIOB_PERICLK_DI();
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <GPIO_PeriClockControl+0x180>)
 800109a:	f023 0302 	bic.w	r3, r3, #2
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010a0:	e040      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <GPIO_PeriClockControl+0x188>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d106      	bne.n	80010b8 <GPIO_PeriClockControl+0x104>
			GPIOC_PERICLK_DI();
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a21      	ldr	r2, [pc, #132]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010b0:	f023 0304 	bic.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010b6:	e035      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a21      	ldr	r2, [pc, #132]	; (8001140 <GPIO_PeriClockControl+0x18c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d106      	bne.n	80010ce <GPIO_PeriClockControl+0x11a>
			GPIOD_PERICLK_DI();
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010c6:	f023 0308 	bic.w	r3, r3, #8
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010cc:	e02a      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <GPIO_PeriClockControl+0x190>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d106      	bne.n	80010e4 <GPIO_PeriClockControl+0x130>
			GPIOE_PERICLK_DI();
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010dc:	f023 0310 	bic.w	r3, r3, #16
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010e2:	e01f      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <GPIO_PeriClockControl+0x194>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d106      	bne.n	80010fa <GPIO_PeriClockControl+0x146>
			GPIOF_PERICLK_DI();
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a10      	ldr	r2, [pc, #64]	; (8001134 <GPIO_PeriClockControl+0x180>)
 80010f2:	f023 0320 	bic.w	r3, r3, #32
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010f8:	e014      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <GPIO_PeriClockControl+0x198>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d106      	bne.n	8001110 <GPIO_PeriClockControl+0x15c>
			GPIOG_PERICLK_DI();
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <GPIO_PeriClockControl+0x180>)
 8001108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800110e:	e009      	b.n	8001124 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <GPIO_PeriClockControl+0x19c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d105      	bne.n	8001124 <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_DI();
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <GPIO_PeriClockControl+0x180>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a05      	ldr	r2, [pc, #20]	; (8001134 <GPIO_PeriClockControl+0x180>)
 800111e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40020000 	.word	0x40020000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00

08001154 <GPIO_Init>:
* Parameter1:	Handle of GPIO port
* ReturnVal:	none
* Notes:		none
*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{	uint32_t temp=0;
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]

	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff24 	bl	8000fb4 <GPIO_PeriClockControl>

	//see if its not an interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	795b      	ldrb	r3, [r3, #5]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d820      	bhi.n	80011b6 <GPIO_Init+0x62>
	{
		//configure pin mode
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	795b      	ldrb	r3, [r3, #5]
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear bit fields before setting
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2103      	movs	r1, #3
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4619      	mov	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp; //set bits
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e0c6      	b.n	8001344 <GPIO_Init+0x1f0>

	}
	//else configure for  interrupt mode
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d117      	bne.n	80011ee <GPIO_Init+0x9a>
		{
			//1. configure Falling trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011be:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <GPIO_Init+0x18c>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	7912      	ldrb	r2, [r2, #4]
 80011c6:	4611      	mov	r1, r2
 80011c8:	2201      	movs	r2, #1
 80011ca:	408a      	lsls	r2, r1
 80011cc:	4611      	mov	r1, r2
 80011ce:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <GPIO_Init+0x18c>)
 80011d0:	430b      	orrs	r3, r1
 80011d2:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011d4:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <GPIO_Init+0x18c>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	7912      	ldrb	r2, [r2, #4]
 80011dc:	4611      	mov	r1, r2
 80011de:	2201      	movs	r2, #1
 80011e0:	408a      	lsls	r2, r1
 80011e2:	43d2      	mvns	r2, r2
 80011e4:	4611      	mov	r1, r2
 80011e6:	4a3e      	ldr	r2, [pc, #248]	; (80012e0 <GPIO_Init+0x18c>)
 80011e8:	400b      	ands	r3, r1
 80011ea:	6093      	str	r3, [r2, #8]
 80011ec:	e035      	b.n	800125a <GPIO_Init+0x106>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	795b      	ldrb	r3, [r3, #5]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d117      	bne.n	8001226 <GPIO_Init+0xd2>
		{
			//1. configure Rising trigger selection register
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <GPIO_Init+0x18c>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	7912      	ldrb	r2, [r2, #4]
 80011fe:	4611      	mov	r1, r2
 8001200:	2201      	movs	r2, #1
 8001202:	408a      	lsls	r2, r1
 8001204:	4611      	mov	r1, r2
 8001206:	4a36      	ldr	r2, [pc, #216]	; (80012e0 <GPIO_Init+0x18c>)
 8001208:	430b      	orrs	r3, r1
 800120a:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <GPIO_Init+0x18c>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	7912      	ldrb	r2, [r2, #4]
 8001214:	4611      	mov	r1, r2
 8001216:	2201      	movs	r2, #1
 8001218:	408a      	lsls	r2, r1
 800121a:	43d2      	mvns	r2, r2
 800121c:	4611      	mov	r1, r2
 800121e:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <GPIO_Init+0x18c>)
 8001220:	400b      	ands	r3, r1
 8001222:	60d3      	str	r3, [r2, #12]
 8001224:	e019      	b.n	800125a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	795b      	ldrb	r3, [r3, #5]
 800122a:	2b06      	cmp	r3, #6
 800122c:	d115      	bne.n	800125a <GPIO_Init+0x106>
		{
			//1. configure Falling and Rising trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <GPIO_Init+0x18c>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	7912      	ldrb	r2, [r2, #4]
 8001236:	4611      	mov	r1, r2
 8001238:	2201      	movs	r2, #1
 800123a:	408a      	lsls	r2, r1
 800123c:	4611      	mov	r1, r2
 800123e:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <GPIO_Init+0x18c>)
 8001240:	430b      	orrs	r3, r1
 8001242:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <GPIO_Init+0x18c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	7912      	ldrb	r2, [r2, #4]
 800124c:	4611      	mov	r1, r2
 800124e:	2201      	movs	r2, #1
 8001250:	408a      	lsls	r2, r1
 8001252:	4611      	mov	r1, r2
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <GPIO_Init+0x18c>)
 8001256:	430b      	orrs	r3, r1
 8001258:	6093      	str	r3, [r2, #8]
		}
		//2. configure GPIO port selection in SYSCFG_EXTIC
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to get which exti control register
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4; //to determine section within control register determined above
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	791b      	ldrb	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]

		if(pGPIOHandle->pGPIOx == GPIOA){portcode=0;}
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <GPIO_Init+0x190>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d102      	bne.n	8001280 <GPIO_Init+0x12c>
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e046      	b.n	800130e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOB){portcode=1;}
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <GPIO_Init+0x194>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d102      	bne.n	8001290 <GPIO_Init+0x13c>
 800128a:	2301      	movs	r3, #1
 800128c:	75fb      	strb	r3, [r7, #23]
 800128e:	e03e      	b.n	800130e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOC){portcode=2;}
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a15      	ldr	r2, [pc, #84]	; (80012ec <GPIO_Init+0x198>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d102      	bne.n	80012a0 <GPIO_Init+0x14c>
 800129a:	2302      	movs	r3, #2
 800129c:	75fb      	strb	r3, [r7, #23]
 800129e:	e036      	b.n	800130e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOD){portcode=3;}
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <GPIO_Init+0x19c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d102      	bne.n	80012b0 <GPIO_Init+0x15c>
 80012aa:	2303      	movs	r3, #3
 80012ac:	75fb      	strb	r3, [r7, #23]
 80012ae:	e02e      	b.n	800130e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOE){portcode=4;}
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <GPIO_Init+0x1a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d102      	bne.n	80012c0 <GPIO_Init+0x16c>
 80012ba:	2304      	movs	r3, #4
 80012bc:	75fb      	strb	r3, [r7, #23]
 80012be:	e026      	b.n	800130e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOF){portcode=5;}
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <GPIO_Init+0x1a4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d102      	bne.n	80012d0 <GPIO_Init+0x17c>
 80012ca:	2305      	movs	r3, #5
 80012cc:	75fb      	strb	r3, [r7, #23]
 80012ce:	e01e      	b.n	800130e <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOG){portcode=6;}
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <GPIO_Init+0x1a8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d112      	bne.n	8001300 <GPIO_Init+0x1ac>
 80012da:	2306      	movs	r3, #6
 80012dc:	75fb      	strb	r3, [r7, #23]
 80012de:	e016      	b.n	800130e <GPIO_Init+0x1ba>
 80012e0:	40013c00 	.word	0x40013c00
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
		else if(pGPIOHandle->pGPIOx == GPIOH){portcode=7;}
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a5f      	ldr	r2, [pc, #380]	; (8001484 <GPIO_Init+0x330>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <GPIO_Init+0x1ba>
 800130a:	2307      	movs	r3, #7
 800130c:	75fb      	strb	r3, [r7, #23]

		SYSCFG_PERICLK_EN();
 800130e:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <GPIO_Init+0x334>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a5d      	ldr	r2, [pc, #372]	; (8001488 <GPIO_Init+0x334>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800131a:	7dfa      	ldrb	r2, [r7, #23]
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f103 	lsl.w	r1, r2, r3
 8001324:	4a59      	ldr	r2, [pc, #356]	; (800148c <GPIO_Init+0x338>)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	3302      	adds	r3, #2
 800132a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. enable EXTI interrupt delivery via IMR
		EXTI->IMR |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800132e:	4b58      	ldr	r3, [pc, #352]	; (8001490 <GPIO_Init+0x33c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	7912      	ldrb	r2, [r2, #4]
 8001336:	4611      	mov	r1, r2
 8001338:	2201      	movs	r2, #1
 800133a:	408a      	lsls	r2, r1
 800133c:	4611      	mov	r1, r2
 800133e:	4a54      	ldr	r2, [pc, #336]	; (8001490 <GPIO_Init+0x33c>)
 8001340:	430b      	orrs	r3, r1
 8001342:	6013      	str	r3, [r2, #0]
	}
	//configure speed
	temp=0;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	799b      	ldrb	r3, [r3, #6]
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2103      	movs	r1, #3
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6899      	ldr	r1, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	430a      	orrs	r2, r1
 8001386:	609a      	str	r2, [r3, #8]
	//configure pullup/pulldown
	temp=0;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	79db      	ldrb	r3, [r3, #7]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	791b      	ldrb	r3, [r3, #4]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	791b      	ldrb	r3, [r3, #4]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2103      	movs	r1, #3
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	400a      	ands	r2, r1
 80013ba:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68d9      	ldr	r1, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	60da      	str	r2, [r3, #12]
	//configure output type
	temp=0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7a1b      	ldrb	r3, [r3, #8]
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	4619      	mov	r1, r3
 80013ec:	2301      	movs	r3, #1
 80013ee:	408b      	lsls	r3, r1
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4619      	mov	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6859      	ldr	r1, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]

	temp=0;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	795b      	ldrb	r3, [r3, #5]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d131      	bne.n	800147c <GPIO_Init+0x328>
	{
		//Need to revisit this to understand
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	791b      	ldrb	r3, [r3, #4]
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	737b      	strb	r3, [r7, #13]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	733b      	strb	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[temp1]&= ~(0xF<<(4*temp2));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	7b7a      	ldrb	r2, [r7, #13]
 8001430:	3208      	adds	r2, #8
 8001432:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001436:	7b3b      	ldrb	r3, [r7, #12]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	7b7a      	ldrb	r2, [r7, #13]
 800144a:	4001      	ands	r1, r0
 800144c:	3208      	adds	r2, #8
 800144e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode<<(4*temp2));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	7b7a      	ldrb	r2, [r7, #13]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7a5b      	ldrb	r3, [r3, #9]
 8001462:	461a      	mov	r2, r3
 8001464:	7b3b      	ldrb	r3, [r7, #12]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	4618      	mov	r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	7b7a      	ldrb	r2, [r7, #13]
 8001474:	4301      	orrs	r1, r0
 8001476:	3208      	adds	r2, #8
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}




}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021c00 	.word	0x40021c00
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40013c00 	.word	0x40013c00

08001494 <GPIO_ReadFromInputPin>:
* Parameter2:	GPIO pin in range of 0 to 16
* ReturnVal:	0 or 1
* Notes:		none
*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
	return value;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <__libc_init_array>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	4e0d      	ldr	r6, [pc, #52]	; (80014f8 <__libc_init_array+0x38>)
 80014c4:	4c0d      	ldr	r4, [pc, #52]	; (80014fc <__libc_init_array+0x3c>)
 80014c6:	1ba4      	subs	r4, r4, r6
 80014c8:	10a4      	asrs	r4, r4, #2
 80014ca:	2500      	movs	r5, #0
 80014cc:	42a5      	cmp	r5, r4
 80014ce:	d109      	bne.n	80014e4 <__libc_init_array+0x24>
 80014d0:	4e0b      	ldr	r6, [pc, #44]	; (8001500 <__libc_init_array+0x40>)
 80014d2:	4c0c      	ldr	r4, [pc, #48]	; (8001504 <__libc_init_array+0x44>)
 80014d4:	f001 fa3a 	bl	800294c <_init>
 80014d8:	1ba4      	subs	r4, r4, r6
 80014da:	10a4      	asrs	r4, r4, #2
 80014dc:	2500      	movs	r5, #0
 80014de:	42a5      	cmp	r5, r4
 80014e0:	d105      	bne.n	80014ee <__libc_init_array+0x2e>
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014e8:	4798      	blx	r3
 80014ea:	3501      	adds	r5, #1
 80014ec:	e7ee      	b.n	80014cc <__libc_init_array+0xc>
 80014ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f2:	4798      	blx	r3
 80014f4:	3501      	adds	r5, #1
 80014f6:	e7f2      	b.n	80014de <__libc_init_array+0x1e>
 80014f8:	08002a70 	.word	0x08002a70
 80014fc:	08002a70 	.word	0x08002a70
 8001500:	08002a70 	.word	0x08002a70
 8001504:	08002a74 	.word	0x08002a74

08001508 <memset>:
 8001508:	4402      	add	r2, r0
 800150a:	4603      	mov	r3, r0
 800150c:	4293      	cmp	r3, r2
 800150e:	d100      	bne.n	8001512 <memset+0xa>
 8001510:	4770      	bx	lr
 8001512:	f803 1b01 	strb.w	r1, [r3], #1
 8001516:	e7f9      	b.n	800150c <memset+0x4>

08001518 <iprintf>:
 8001518:	b40f      	push	{r0, r1, r2, r3}
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <iprintf+0x2c>)
 800151c:	b513      	push	{r0, r1, r4, lr}
 800151e:	681c      	ldr	r4, [r3, #0]
 8001520:	b124      	cbz	r4, 800152c <iprintf+0x14>
 8001522:	69a3      	ldr	r3, [r4, #24]
 8001524:	b913      	cbnz	r3, 800152c <iprintf+0x14>
 8001526:	4620      	mov	r0, r4
 8001528:	f000 fa22 	bl	8001970 <__sinit>
 800152c:	ab05      	add	r3, sp, #20
 800152e:	9a04      	ldr	r2, [sp, #16]
 8001530:	68a1      	ldr	r1, [r4, #8]
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	4620      	mov	r0, r4
 8001536:	f000 fbdb 	bl	8001cf0 <_vfiprintf_r>
 800153a:	b002      	add	sp, #8
 800153c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001540:	b004      	add	sp, #16
 8001542:	4770      	bx	lr
 8001544:	20000020 	.word	0x20000020

08001548 <_puts_r>:
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	460e      	mov	r6, r1
 800154c:	4605      	mov	r5, r0
 800154e:	b118      	cbz	r0, 8001558 <_puts_r+0x10>
 8001550:	6983      	ldr	r3, [r0, #24]
 8001552:	b90b      	cbnz	r3, 8001558 <_puts_r+0x10>
 8001554:	f000 fa0c 	bl	8001970 <__sinit>
 8001558:	69ab      	ldr	r3, [r5, #24]
 800155a:	68ac      	ldr	r4, [r5, #8]
 800155c:	b913      	cbnz	r3, 8001564 <_puts_r+0x1c>
 800155e:	4628      	mov	r0, r5
 8001560:	f000 fa06 	bl	8001970 <__sinit>
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <_puts_r+0xac>)
 8001566:	429c      	cmp	r4, r3
 8001568:	d117      	bne.n	800159a <_puts_r+0x52>
 800156a:	686c      	ldr	r4, [r5, #4]
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	071b      	lsls	r3, r3, #28
 8001570:	d51d      	bpl.n	80015ae <_puts_r+0x66>
 8001572:	6923      	ldr	r3, [r4, #16]
 8001574:	b1db      	cbz	r3, 80015ae <_puts_r+0x66>
 8001576:	3e01      	subs	r6, #1
 8001578:	68a3      	ldr	r3, [r4, #8]
 800157a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800157e:	3b01      	subs	r3, #1
 8001580:	60a3      	str	r3, [r4, #8]
 8001582:	b9e9      	cbnz	r1, 80015c0 <_puts_r+0x78>
 8001584:	2b00      	cmp	r3, #0
 8001586:	da2e      	bge.n	80015e6 <_puts_r+0x9e>
 8001588:	4622      	mov	r2, r4
 800158a:	210a      	movs	r1, #10
 800158c:	4628      	mov	r0, r5
 800158e:	f000 f83f 	bl	8001610 <__swbuf_r>
 8001592:	3001      	adds	r0, #1
 8001594:	d011      	beq.n	80015ba <_puts_r+0x72>
 8001596:	200a      	movs	r0, #10
 8001598:	e011      	b.n	80015be <_puts_r+0x76>
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <_puts_r+0xb0>)
 800159c:	429c      	cmp	r4, r3
 800159e:	d101      	bne.n	80015a4 <_puts_r+0x5c>
 80015a0:	68ac      	ldr	r4, [r5, #8]
 80015a2:	e7e3      	b.n	800156c <_puts_r+0x24>
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_puts_r+0xb4>)
 80015a6:	429c      	cmp	r4, r3
 80015a8:	bf08      	it	eq
 80015aa:	68ec      	ldreq	r4, [r5, #12]
 80015ac:	e7de      	b.n	800156c <_puts_r+0x24>
 80015ae:	4621      	mov	r1, r4
 80015b0:	4628      	mov	r0, r5
 80015b2:	f000 f87f 	bl	80016b4 <__swsetup_r>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d0dd      	beq.n	8001576 <_puts_r+0x2e>
 80015ba:	f04f 30ff 	mov.w	r0, #4294967295
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da04      	bge.n	80015ce <_puts_r+0x86>
 80015c4:	69a2      	ldr	r2, [r4, #24]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dc06      	bgt.n	80015d8 <_puts_r+0x90>
 80015ca:	290a      	cmp	r1, #10
 80015cc:	d004      	beq.n	80015d8 <_puts_r+0x90>
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	6022      	str	r2, [r4, #0]
 80015d4:	7019      	strb	r1, [r3, #0]
 80015d6:	e7cf      	b.n	8001578 <_puts_r+0x30>
 80015d8:	4622      	mov	r2, r4
 80015da:	4628      	mov	r0, r5
 80015dc:	f000 f818 	bl	8001610 <__swbuf_r>
 80015e0:	3001      	adds	r0, #1
 80015e2:	d1c9      	bne.n	8001578 <_puts_r+0x30>
 80015e4:	e7e9      	b.n	80015ba <_puts_r+0x72>
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	200a      	movs	r0, #10
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	6022      	str	r2, [r4, #0]
 80015ee:	7018      	strb	r0, [r3, #0]
 80015f0:	e7e5      	b.n	80015be <_puts_r+0x76>
 80015f2:	bf00      	nop
 80015f4:	080029e0 	.word	0x080029e0
 80015f8:	08002a00 	.word	0x08002a00
 80015fc:	080029c0 	.word	0x080029c0

08001600 <puts>:
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <puts+0xc>)
 8001602:	4601      	mov	r1, r0
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f7ff bf9f 	b.w	8001548 <_puts_r>
 800160a:	bf00      	nop
 800160c:	20000020 	.word	0x20000020

08001610 <__swbuf_r>:
 8001610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001612:	460e      	mov	r6, r1
 8001614:	4614      	mov	r4, r2
 8001616:	4605      	mov	r5, r0
 8001618:	b118      	cbz	r0, 8001622 <__swbuf_r+0x12>
 800161a:	6983      	ldr	r3, [r0, #24]
 800161c:	b90b      	cbnz	r3, 8001622 <__swbuf_r+0x12>
 800161e:	f000 f9a7 	bl	8001970 <__sinit>
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <__swbuf_r+0x98>)
 8001624:	429c      	cmp	r4, r3
 8001626:	d12a      	bne.n	800167e <__swbuf_r+0x6e>
 8001628:	686c      	ldr	r4, [r5, #4]
 800162a:	69a3      	ldr	r3, [r4, #24]
 800162c:	60a3      	str	r3, [r4, #8]
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	071a      	lsls	r2, r3, #28
 8001632:	d52e      	bpl.n	8001692 <__swbuf_r+0x82>
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	b363      	cbz	r3, 8001692 <__swbuf_r+0x82>
 8001638:	6923      	ldr	r3, [r4, #16]
 800163a:	6820      	ldr	r0, [r4, #0]
 800163c:	1ac0      	subs	r0, r0, r3
 800163e:	6963      	ldr	r3, [r4, #20]
 8001640:	b2f6      	uxtb	r6, r6
 8001642:	4283      	cmp	r3, r0
 8001644:	4637      	mov	r7, r6
 8001646:	dc04      	bgt.n	8001652 <__swbuf_r+0x42>
 8001648:	4621      	mov	r1, r4
 800164a:	4628      	mov	r0, r5
 800164c:	f000 f926 	bl	800189c <_fflush_r>
 8001650:	bb28      	cbnz	r0, 800169e <__swbuf_r+0x8e>
 8001652:	68a3      	ldr	r3, [r4, #8]
 8001654:	3b01      	subs	r3, #1
 8001656:	60a3      	str	r3, [r4, #8]
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	6022      	str	r2, [r4, #0]
 800165e:	701e      	strb	r6, [r3, #0]
 8001660:	6963      	ldr	r3, [r4, #20]
 8001662:	3001      	adds	r0, #1
 8001664:	4283      	cmp	r3, r0
 8001666:	d004      	beq.n	8001672 <__swbuf_r+0x62>
 8001668:	89a3      	ldrh	r3, [r4, #12]
 800166a:	07db      	lsls	r3, r3, #31
 800166c:	d519      	bpl.n	80016a2 <__swbuf_r+0x92>
 800166e:	2e0a      	cmp	r6, #10
 8001670:	d117      	bne.n	80016a2 <__swbuf_r+0x92>
 8001672:	4621      	mov	r1, r4
 8001674:	4628      	mov	r0, r5
 8001676:	f000 f911 	bl	800189c <_fflush_r>
 800167a:	b190      	cbz	r0, 80016a2 <__swbuf_r+0x92>
 800167c:	e00f      	b.n	800169e <__swbuf_r+0x8e>
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <__swbuf_r+0x9c>)
 8001680:	429c      	cmp	r4, r3
 8001682:	d101      	bne.n	8001688 <__swbuf_r+0x78>
 8001684:	68ac      	ldr	r4, [r5, #8]
 8001686:	e7d0      	b.n	800162a <__swbuf_r+0x1a>
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <__swbuf_r+0xa0>)
 800168a:	429c      	cmp	r4, r3
 800168c:	bf08      	it	eq
 800168e:	68ec      	ldreq	r4, [r5, #12]
 8001690:	e7cb      	b.n	800162a <__swbuf_r+0x1a>
 8001692:	4621      	mov	r1, r4
 8001694:	4628      	mov	r0, r5
 8001696:	f000 f80d 	bl	80016b4 <__swsetup_r>
 800169a:	2800      	cmp	r0, #0
 800169c:	d0cc      	beq.n	8001638 <__swbuf_r+0x28>
 800169e:	f04f 37ff 	mov.w	r7, #4294967295
 80016a2:	4638      	mov	r0, r7
 80016a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	080029e0 	.word	0x080029e0
 80016ac:	08002a00 	.word	0x08002a00
 80016b0:	080029c0 	.word	0x080029c0

080016b4 <__swsetup_r>:
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <__swsetup_r+0xcc>)
 80016b6:	b570      	push	{r4, r5, r6, lr}
 80016b8:	681d      	ldr	r5, [r3, #0]
 80016ba:	4606      	mov	r6, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	b125      	cbz	r5, 80016ca <__swsetup_r+0x16>
 80016c0:	69ab      	ldr	r3, [r5, #24]
 80016c2:	b913      	cbnz	r3, 80016ca <__swsetup_r+0x16>
 80016c4:	4628      	mov	r0, r5
 80016c6:	f000 f953 	bl	8001970 <__sinit>
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <__swsetup_r+0xd0>)
 80016cc:	429c      	cmp	r4, r3
 80016ce:	d10f      	bne.n	80016f0 <__swsetup_r+0x3c>
 80016d0:	686c      	ldr	r4, [r5, #4]
 80016d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	0715      	lsls	r5, r2, #28
 80016da:	d42c      	bmi.n	8001736 <__swsetup_r+0x82>
 80016dc:	06d0      	lsls	r0, r2, #27
 80016de:	d411      	bmi.n	8001704 <__swsetup_r+0x50>
 80016e0:	2209      	movs	r2, #9
 80016e2:	6032      	str	r2, [r6, #0]
 80016e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e8:	81a3      	strh	r3, [r4, #12]
 80016ea:	f04f 30ff 	mov.w	r0, #4294967295
 80016ee:	e03e      	b.n	800176e <__swsetup_r+0xba>
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <__swsetup_r+0xd4>)
 80016f2:	429c      	cmp	r4, r3
 80016f4:	d101      	bne.n	80016fa <__swsetup_r+0x46>
 80016f6:	68ac      	ldr	r4, [r5, #8]
 80016f8:	e7eb      	b.n	80016d2 <__swsetup_r+0x1e>
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <__swsetup_r+0xd8>)
 80016fc:	429c      	cmp	r4, r3
 80016fe:	bf08      	it	eq
 8001700:	68ec      	ldreq	r4, [r5, #12]
 8001702:	e7e6      	b.n	80016d2 <__swsetup_r+0x1e>
 8001704:	0751      	lsls	r1, r2, #29
 8001706:	d512      	bpl.n	800172e <__swsetup_r+0x7a>
 8001708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800170a:	b141      	cbz	r1, 800171e <__swsetup_r+0x6a>
 800170c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001710:	4299      	cmp	r1, r3
 8001712:	d002      	beq.n	800171a <__swsetup_r+0x66>
 8001714:	4630      	mov	r0, r6
 8001716:	f000 fa19 	bl	8001b4c <_free_r>
 800171a:	2300      	movs	r3, #0
 800171c:	6363      	str	r3, [r4, #52]	; 0x34
 800171e:	89a3      	ldrh	r3, [r4, #12]
 8001720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001724:	81a3      	strh	r3, [r4, #12]
 8001726:	2300      	movs	r3, #0
 8001728:	6063      	str	r3, [r4, #4]
 800172a:	6923      	ldr	r3, [r4, #16]
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	81a3      	strh	r3, [r4, #12]
 8001736:	6923      	ldr	r3, [r4, #16]
 8001738:	b94b      	cbnz	r3, 800174e <__swsetup_r+0x9a>
 800173a:	89a3      	ldrh	r3, [r4, #12]
 800173c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001744:	d003      	beq.n	800174e <__swsetup_r+0x9a>
 8001746:	4621      	mov	r1, r4
 8001748:	4630      	mov	r0, r6
 800174a:	f000 f9bf 	bl	8001acc <__smakebuf_r>
 800174e:	89a2      	ldrh	r2, [r4, #12]
 8001750:	f012 0301 	ands.w	r3, r2, #1
 8001754:	d00c      	beq.n	8001770 <__swsetup_r+0xbc>
 8001756:	2300      	movs	r3, #0
 8001758:	60a3      	str	r3, [r4, #8]
 800175a:	6963      	ldr	r3, [r4, #20]
 800175c:	425b      	negs	r3, r3
 800175e:	61a3      	str	r3, [r4, #24]
 8001760:	6923      	ldr	r3, [r4, #16]
 8001762:	b953      	cbnz	r3, 800177a <__swsetup_r+0xc6>
 8001764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001768:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800176c:	d1ba      	bne.n	80016e4 <__swsetup_r+0x30>
 800176e:	bd70      	pop	{r4, r5, r6, pc}
 8001770:	0792      	lsls	r2, r2, #30
 8001772:	bf58      	it	pl
 8001774:	6963      	ldrpl	r3, [r4, #20]
 8001776:	60a3      	str	r3, [r4, #8]
 8001778:	e7f2      	b.n	8001760 <__swsetup_r+0xac>
 800177a:	2000      	movs	r0, #0
 800177c:	e7f7      	b.n	800176e <__swsetup_r+0xba>
 800177e:	bf00      	nop
 8001780:	20000020 	.word	0x20000020
 8001784:	080029e0 	.word	0x080029e0
 8001788:	08002a00 	.word	0x08002a00
 800178c:	080029c0 	.word	0x080029c0

08001790 <__sflush_r>:
 8001790:	898a      	ldrh	r2, [r1, #12]
 8001792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001796:	4605      	mov	r5, r0
 8001798:	0710      	lsls	r0, r2, #28
 800179a:	460c      	mov	r4, r1
 800179c:	d458      	bmi.n	8001850 <__sflush_r+0xc0>
 800179e:	684b      	ldr	r3, [r1, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dc05      	bgt.n	80017b0 <__sflush_r+0x20>
 80017a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	dc02      	bgt.n	80017b0 <__sflush_r+0x20>
 80017aa:	2000      	movs	r0, #0
 80017ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017b2:	2e00      	cmp	r6, #0
 80017b4:	d0f9      	beq.n	80017aa <__sflush_r+0x1a>
 80017b6:	2300      	movs	r3, #0
 80017b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017bc:	682f      	ldr	r7, [r5, #0]
 80017be:	6a21      	ldr	r1, [r4, #32]
 80017c0:	602b      	str	r3, [r5, #0]
 80017c2:	d032      	beq.n	800182a <__sflush_r+0x9a>
 80017c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017c6:	89a3      	ldrh	r3, [r4, #12]
 80017c8:	075a      	lsls	r2, r3, #29
 80017ca:	d505      	bpl.n	80017d8 <__sflush_r+0x48>
 80017cc:	6863      	ldr	r3, [r4, #4]
 80017ce:	1ac0      	subs	r0, r0, r3
 80017d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017d2:	b10b      	cbz	r3, 80017d8 <__sflush_r+0x48>
 80017d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017d6:	1ac0      	subs	r0, r0, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	4602      	mov	r2, r0
 80017dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017de:	6a21      	ldr	r1, [r4, #32]
 80017e0:	4628      	mov	r0, r5
 80017e2:	47b0      	blx	r6
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	89a3      	ldrh	r3, [r4, #12]
 80017e8:	d106      	bne.n	80017f8 <__sflush_r+0x68>
 80017ea:	6829      	ldr	r1, [r5, #0]
 80017ec:	291d      	cmp	r1, #29
 80017ee:	d848      	bhi.n	8001882 <__sflush_r+0xf2>
 80017f0:	4a29      	ldr	r2, [pc, #164]	; (8001898 <__sflush_r+0x108>)
 80017f2:	40ca      	lsrs	r2, r1
 80017f4:	07d6      	lsls	r6, r2, #31
 80017f6:	d544      	bpl.n	8001882 <__sflush_r+0xf2>
 80017f8:	2200      	movs	r2, #0
 80017fa:	6062      	str	r2, [r4, #4]
 80017fc:	04d9      	lsls	r1, r3, #19
 80017fe:	6922      	ldr	r2, [r4, #16]
 8001800:	6022      	str	r2, [r4, #0]
 8001802:	d504      	bpl.n	800180e <__sflush_r+0x7e>
 8001804:	1c42      	adds	r2, r0, #1
 8001806:	d101      	bne.n	800180c <__sflush_r+0x7c>
 8001808:	682b      	ldr	r3, [r5, #0]
 800180a:	b903      	cbnz	r3, 800180e <__sflush_r+0x7e>
 800180c:	6560      	str	r0, [r4, #84]	; 0x54
 800180e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001810:	602f      	str	r7, [r5, #0]
 8001812:	2900      	cmp	r1, #0
 8001814:	d0c9      	beq.n	80017aa <__sflush_r+0x1a>
 8001816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800181a:	4299      	cmp	r1, r3
 800181c:	d002      	beq.n	8001824 <__sflush_r+0x94>
 800181e:	4628      	mov	r0, r5
 8001820:	f000 f994 	bl	8001b4c <_free_r>
 8001824:	2000      	movs	r0, #0
 8001826:	6360      	str	r0, [r4, #52]	; 0x34
 8001828:	e7c0      	b.n	80017ac <__sflush_r+0x1c>
 800182a:	2301      	movs	r3, #1
 800182c:	4628      	mov	r0, r5
 800182e:	47b0      	blx	r6
 8001830:	1c41      	adds	r1, r0, #1
 8001832:	d1c8      	bne.n	80017c6 <__sflush_r+0x36>
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0c5      	beq.n	80017c6 <__sflush_r+0x36>
 800183a:	2b1d      	cmp	r3, #29
 800183c:	d001      	beq.n	8001842 <__sflush_r+0xb2>
 800183e:	2b16      	cmp	r3, #22
 8001840:	d101      	bne.n	8001846 <__sflush_r+0xb6>
 8001842:	602f      	str	r7, [r5, #0]
 8001844:	e7b1      	b.n	80017aa <__sflush_r+0x1a>
 8001846:	89a3      	ldrh	r3, [r4, #12]
 8001848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184c:	81a3      	strh	r3, [r4, #12]
 800184e:	e7ad      	b.n	80017ac <__sflush_r+0x1c>
 8001850:	690f      	ldr	r7, [r1, #16]
 8001852:	2f00      	cmp	r7, #0
 8001854:	d0a9      	beq.n	80017aa <__sflush_r+0x1a>
 8001856:	0793      	lsls	r3, r2, #30
 8001858:	680e      	ldr	r6, [r1, #0]
 800185a:	bf08      	it	eq
 800185c:	694b      	ldreq	r3, [r1, #20]
 800185e:	600f      	str	r7, [r1, #0]
 8001860:	bf18      	it	ne
 8001862:	2300      	movne	r3, #0
 8001864:	eba6 0807 	sub.w	r8, r6, r7
 8001868:	608b      	str	r3, [r1, #8]
 800186a:	f1b8 0f00 	cmp.w	r8, #0
 800186e:	dd9c      	ble.n	80017aa <__sflush_r+0x1a>
 8001870:	4643      	mov	r3, r8
 8001872:	463a      	mov	r2, r7
 8001874:	6a21      	ldr	r1, [r4, #32]
 8001876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001878:	4628      	mov	r0, r5
 800187a:	47b0      	blx	r6
 800187c:	2800      	cmp	r0, #0
 800187e:	dc06      	bgt.n	800188e <__sflush_r+0xfe>
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001886:	81a3      	strh	r3, [r4, #12]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	e78e      	b.n	80017ac <__sflush_r+0x1c>
 800188e:	4407      	add	r7, r0
 8001890:	eba8 0800 	sub.w	r8, r8, r0
 8001894:	e7e9      	b.n	800186a <__sflush_r+0xda>
 8001896:	bf00      	nop
 8001898:	20400001 	.word	0x20400001

0800189c <_fflush_r>:
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	690b      	ldr	r3, [r1, #16]
 80018a0:	4605      	mov	r5, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	b1db      	cbz	r3, 80018de <_fflush_r+0x42>
 80018a6:	b118      	cbz	r0, 80018b0 <_fflush_r+0x14>
 80018a8:	6983      	ldr	r3, [r0, #24]
 80018aa:	b90b      	cbnz	r3, 80018b0 <_fflush_r+0x14>
 80018ac:	f000 f860 	bl	8001970 <__sinit>
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <_fflush_r+0x48>)
 80018b2:	429c      	cmp	r4, r3
 80018b4:	d109      	bne.n	80018ca <_fflush_r+0x2e>
 80018b6:	686c      	ldr	r4, [r5, #4]
 80018b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018bc:	b17b      	cbz	r3, 80018de <_fflush_r+0x42>
 80018be:	4621      	mov	r1, r4
 80018c0:	4628      	mov	r0, r5
 80018c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018c6:	f7ff bf63 	b.w	8001790 <__sflush_r>
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_fflush_r+0x4c>)
 80018cc:	429c      	cmp	r4, r3
 80018ce:	d101      	bne.n	80018d4 <_fflush_r+0x38>
 80018d0:	68ac      	ldr	r4, [r5, #8]
 80018d2:	e7f1      	b.n	80018b8 <_fflush_r+0x1c>
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <_fflush_r+0x50>)
 80018d6:	429c      	cmp	r4, r3
 80018d8:	bf08      	it	eq
 80018da:	68ec      	ldreq	r4, [r5, #12]
 80018dc:	e7ec      	b.n	80018b8 <_fflush_r+0x1c>
 80018de:	2000      	movs	r0, #0
 80018e0:	bd38      	pop	{r3, r4, r5, pc}
 80018e2:	bf00      	nop
 80018e4:	080029e0 	.word	0x080029e0
 80018e8:	08002a00 	.word	0x08002a00
 80018ec:	080029c0 	.word	0x080029c0

080018f0 <std>:
 80018f0:	2300      	movs	r3, #0
 80018f2:	b510      	push	{r4, lr}
 80018f4:	4604      	mov	r4, r0
 80018f6:	e9c0 3300 	strd	r3, r3, [r0]
 80018fa:	6083      	str	r3, [r0, #8]
 80018fc:	8181      	strh	r1, [r0, #12]
 80018fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001900:	81c2      	strh	r2, [r0, #14]
 8001902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001906:	6183      	str	r3, [r0, #24]
 8001908:	4619      	mov	r1, r3
 800190a:	2208      	movs	r2, #8
 800190c:	305c      	adds	r0, #92	; 0x5c
 800190e:	f7ff fdfb 	bl	8001508 <memset>
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <std+0x38>)
 8001914:	6263      	str	r3, [r4, #36]	; 0x24
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <std+0x3c>)
 8001918:	62a3      	str	r3, [r4, #40]	; 0x28
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <std+0x40>)
 800191c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <std+0x44>)
 8001920:	6224      	str	r4, [r4, #32]
 8001922:	6323      	str	r3, [r4, #48]	; 0x30
 8001924:	bd10      	pop	{r4, pc}
 8001926:	bf00      	nop
 8001928:	0800224d 	.word	0x0800224d
 800192c:	0800226f 	.word	0x0800226f
 8001930:	080022a7 	.word	0x080022a7
 8001934:	080022cb 	.word	0x080022cb

08001938 <_cleanup_r>:
 8001938:	4901      	ldr	r1, [pc, #4]	; (8001940 <_cleanup_r+0x8>)
 800193a:	f000 b885 	b.w	8001a48 <_fwalk_reent>
 800193e:	bf00      	nop
 8001940:	0800189d 	.word	0x0800189d

08001944 <__sfmoreglue>:
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	1e4a      	subs	r2, r1, #1
 8001948:	2568      	movs	r5, #104	; 0x68
 800194a:	4355      	muls	r5, r2
 800194c:	460e      	mov	r6, r1
 800194e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001952:	f000 f949 	bl	8001be8 <_malloc_r>
 8001956:	4604      	mov	r4, r0
 8001958:	b140      	cbz	r0, 800196c <__sfmoreglue+0x28>
 800195a:	2100      	movs	r1, #0
 800195c:	e9c0 1600 	strd	r1, r6, [r0]
 8001960:	300c      	adds	r0, #12
 8001962:	60a0      	str	r0, [r4, #8]
 8001964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001968:	f7ff fdce 	bl	8001508 <memset>
 800196c:	4620      	mov	r0, r4
 800196e:	bd70      	pop	{r4, r5, r6, pc}

08001970 <__sinit>:
 8001970:	6983      	ldr	r3, [r0, #24]
 8001972:	b510      	push	{r4, lr}
 8001974:	4604      	mov	r4, r0
 8001976:	bb33      	cbnz	r3, 80019c6 <__sinit+0x56>
 8001978:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800197c:	6503      	str	r3, [r0, #80]	; 0x50
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <__sinit+0x58>)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <__sinit+0x5c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6282      	str	r2, [r0, #40]	; 0x28
 8001986:	4298      	cmp	r0, r3
 8001988:	bf04      	itt	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	6183      	streq	r3, [r0, #24]
 800198e:	f000 f81f 	bl	80019d0 <__sfp>
 8001992:	6060      	str	r0, [r4, #4]
 8001994:	4620      	mov	r0, r4
 8001996:	f000 f81b 	bl	80019d0 <__sfp>
 800199a:	60a0      	str	r0, [r4, #8]
 800199c:	4620      	mov	r0, r4
 800199e:	f000 f817 	bl	80019d0 <__sfp>
 80019a2:	2200      	movs	r2, #0
 80019a4:	60e0      	str	r0, [r4, #12]
 80019a6:	2104      	movs	r1, #4
 80019a8:	6860      	ldr	r0, [r4, #4]
 80019aa:	f7ff ffa1 	bl	80018f0 <std>
 80019ae:	2201      	movs	r2, #1
 80019b0:	2109      	movs	r1, #9
 80019b2:	68a0      	ldr	r0, [r4, #8]
 80019b4:	f7ff ff9c 	bl	80018f0 <std>
 80019b8:	2202      	movs	r2, #2
 80019ba:	2112      	movs	r1, #18
 80019bc:	68e0      	ldr	r0, [r4, #12]
 80019be:	f7ff ff97 	bl	80018f0 <std>
 80019c2:	2301      	movs	r3, #1
 80019c4:	61a3      	str	r3, [r4, #24]
 80019c6:	bd10      	pop	{r4, pc}
 80019c8:	080029bc 	.word	0x080029bc
 80019cc:	08001939 	.word	0x08001939

080019d0 <__sfp>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <__sfp+0x70>)
 80019d4:	681e      	ldr	r6, [r3, #0]
 80019d6:	69b3      	ldr	r3, [r6, #24]
 80019d8:	4607      	mov	r7, r0
 80019da:	b913      	cbnz	r3, 80019e2 <__sfp+0x12>
 80019dc:	4630      	mov	r0, r6
 80019de:	f7ff ffc7 	bl	8001970 <__sinit>
 80019e2:	3648      	adds	r6, #72	; 0x48
 80019e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	d503      	bpl.n	80019f4 <__sfp+0x24>
 80019ec:	6833      	ldr	r3, [r6, #0]
 80019ee:	b133      	cbz	r3, 80019fe <__sfp+0x2e>
 80019f0:	6836      	ldr	r6, [r6, #0]
 80019f2:	e7f7      	b.n	80019e4 <__sfp+0x14>
 80019f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019f8:	b16d      	cbz	r5, 8001a16 <__sfp+0x46>
 80019fa:	3468      	adds	r4, #104	; 0x68
 80019fc:	e7f4      	b.n	80019e8 <__sfp+0x18>
 80019fe:	2104      	movs	r1, #4
 8001a00:	4638      	mov	r0, r7
 8001a02:	f7ff ff9f 	bl	8001944 <__sfmoreglue>
 8001a06:	6030      	str	r0, [r6, #0]
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d1f1      	bne.n	80019f0 <__sfp+0x20>
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	4604      	mov	r4, r0
 8001a12:	4620      	mov	r0, r4
 8001a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <__sfp+0x74>)
 8001a18:	6665      	str	r5, [r4, #100]	; 0x64
 8001a1a:	e9c4 5500 	strd	r5, r5, [r4]
 8001a1e:	60a5      	str	r5, [r4, #8]
 8001a20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001a24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a30:	f7ff fd6a 	bl	8001508 <memset>
 8001a34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a3c:	e7e9      	b.n	8001a12 <__sfp+0x42>
 8001a3e:	bf00      	nop
 8001a40:	080029bc 	.word	0x080029bc
 8001a44:	ffff0001 	.word	0xffff0001

08001a48 <_fwalk_reent>:
 8001a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a4c:	4680      	mov	r8, r0
 8001a4e:	4689      	mov	r9, r1
 8001a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a54:	2600      	movs	r6, #0
 8001a56:	b914      	cbnz	r4, 8001a5e <_fwalk_reent+0x16>
 8001a58:	4630      	mov	r0, r6
 8001a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001a62:	3f01      	subs	r7, #1
 8001a64:	d501      	bpl.n	8001a6a <_fwalk_reent+0x22>
 8001a66:	6824      	ldr	r4, [r4, #0]
 8001a68:	e7f5      	b.n	8001a56 <_fwalk_reent+0xe>
 8001a6a:	89ab      	ldrh	r3, [r5, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d907      	bls.n	8001a80 <_fwalk_reent+0x38>
 8001a70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a74:	3301      	adds	r3, #1
 8001a76:	d003      	beq.n	8001a80 <_fwalk_reent+0x38>
 8001a78:	4629      	mov	r1, r5
 8001a7a:	4640      	mov	r0, r8
 8001a7c:	47c8      	blx	r9
 8001a7e:	4306      	orrs	r6, r0
 8001a80:	3568      	adds	r5, #104	; 0x68
 8001a82:	e7ee      	b.n	8001a62 <_fwalk_reent+0x1a>

08001a84 <__swhatbuf_r>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	460e      	mov	r6, r1
 8001a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	b096      	sub	sp, #88	; 0x58
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	da07      	bge.n	8001aa6 <__swhatbuf_r+0x22>
 8001a96:	2300      	movs	r3, #0
 8001a98:	602b      	str	r3, [r5, #0]
 8001a9a:	89b3      	ldrh	r3, [r6, #12]
 8001a9c:	061a      	lsls	r2, r3, #24
 8001a9e:	d410      	bmi.n	8001ac2 <__swhatbuf_r+0x3e>
 8001aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa4:	e00e      	b.n	8001ac4 <__swhatbuf_r+0x40>
 8001aa6:	466a      	mov	r2, sp
 8001aa8:	f000 fc36 	bl	8002318 <_fstat_r>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	dbf2      	blt.n	8001a96 <__swhatbuf_r+0x12>
 8001ab0:	9a01      	ldr	r2, [sp, #4]
 8001ab2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ab6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001aba:	425a      	negs	r2, r3
 8001abc:	415a      	adcs	r2, r3
 8001abe:	602a      	str	r2, [r5, #0]
 8001ac0:	e7ee      	b.n	8001aa0 <__swhatbuf_r+0x1c>
 8001ac2:	2340      	movs	r3, #64	; 0x40
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	6023      	str	r3, [r4, #0]
 8001ac8:	b016      	add	sp, #88	; 0x58
 8001aca:	bd70      	pop	{r4, r5, r6, pc}

08001acc <__smakebuf_r>:
 8001acc:	898b      	ldrh	r3, [r1, #12]
 8001ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ad0:	079d      	lsls	r5, r3, #30
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	d507      	bpl.n	8001ae8 <__smakebuf_r+0x1c>
 8001ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001adc:	6023      	str	r3, [r4, #0]
 8001ade:	6123      	str	r3, [r4, #16]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	6163      	str	r3, [r4, #20]
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	ab01      	add	r3, sp, #4
 8001aea:	466a      	mov	r2, sp
 8001aec:	f7ff ffca 	bl	8001a84 <__swhatbuf_r>
 8001af0:	9900      	ldr	r1, [sp, #0]
 8001af2:	4605      	mov	r5, r0
 8001af4:	4630      	mov	r0, r6
 8001af6:	f000 f877 	bl	8001be8 <_malloc_r>
 8001afa:	b948      	cbnz	r0, 8001b10 <__smakebuf_r+0x44>
 8001afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b00:	059a      	lsls	r2, r3, #22
 8001b02:	d4ef      	bmi.n	8001ae4 <__smakebuf_r+0x18>
 8001b04:	f023 0303 	bic.w	r3, r3, #3
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	81a3      	strh	r3, [r4, #12]
 8001b0e:	e7e3      	b.n	8001ad8 <__smakebuf_r+0xc>
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <__smakebuf_r+0x7c>)
 8001b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b14:	89a3      	ldrh	r3, [r4, #12]
 8001b16:	6020      	str	r0, [r4, #0]
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	81a3      	strh	r3, [r4, #12]
 8001b1e:	9b00      	ldr	r3, [sp, #0]
 8001b20:	6163      	str	r3, [r4, #20]
 8001b22:	9b01      	ldr	r3, [sp, #4]
 8001b24:	6120      	str	r0, [r4, #16]
 8001b26:	b15b      	cbz	r3, 8001b40 <__smakebuf_r+0x74>
 8001b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	f000 fc05 	bl	800233c <_isatty_r>
 8001b32:	b128      	cbz	r0, 8001b40 <__smakebuf_r+0x74>
 8001b34:	89a3      	ldrh	r3, [r4, #12]
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	81a3      	strh	r3, [r4, #12]
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	431d      	orrs	r5, r3
 8001b44:	81a5      	strh	r5, [r4, #12]
 8001b46:	e7cd      	b.n	8001ae4 <__smakebuf_r+0x18>
 8001b48:	08001939 	.word	0x08001939

08001b4c <_free_r>:
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4605      	mov	r5, r0
 8001b50:	2900      	cmp	r1, #0
 8001b52:	d045      	beq.n	8001be0 <_free_r+0x94>
 8001b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b58:	1f0c      	subs	r4, r1, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bfb8      	it	lt
 8001b5e:	18e4      	addlt	r4, r4, r3
 8001b60:	f000 fc0e 	bl	8002380 <__malloc_lock>
 8001b64:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <_free_r+0x98>)
 8001b66:	6813      	ldr	r3, [r2, #0]
 8001b68:	4610      	mov	r0, r2
 8001b6a:	b933      	cbnz	r3, 8001b7a <_free_r+0x2e>
 8001b6c:	6063      	str	r3, [r4, #4]
 8001b6e:	6014      	str	r4, [r2, #0]
 8001b70:	4628      	mov	r0, r5
 8001b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b76:	f000 bc04 	b.w	8002382 <__malloc_unlock>
 8001b7a:	42a3      	cmp	r3, r4
 8001b7c:	d90c      	bls.n	8001b98 <_free_r+0x4c>
 8001b7e:	6821      	ldr	r1, [r4, #0]
 8001b80:	1862      	adds	r2, r4, r1
 8001b82:	4293      	cmp	r3, r2
 8001b84:	bf04      	itt	eq
 8001b86:	681a      	ldreq	r2, [r3, #0]
 8001b88:	685b      	ldreq	r3, [r3, #4]
 8001b8a:	6063      	str	r3, [r4, #4]
 8001b8c:	bf04      	itt	eq
 8001b8e:	1852      	addeq	r2, r2, r1
 8001b90:	6022      	streq	r2, [r4, #0]
 8001b92:	6004      	str	r4, [r0, #0]
 8001b94:	e7ec      	b.n	8001b70 <_free_r+0x24>
 8001b96:	4613      	mov	r3, r2
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	b10a      	cbz	r2, 8001ba0 <_free_r+0x54>
 8001b9c:	42a2      	cmp	r2, r4
 8001b9e:	d9fa      	bls.n	8001b96 <_free_r+0x4a>
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	1858      	adds	r0, r3, r1
 8001ba4:	42a0      	cmp	r0, r4
 8001ba6:	d10b      	bne.n	8001bc0 <_free_r+0x74>
 8001ba8:	6820      	ldr	r0, [r4, #0]
 8001baa:	4401      	add	r1, r0
 8001bac:	1858      	adds	r0, r3, r1
 8001bae:	4282      	cmp	r2, r0
 8001bb0:	6019      	str	r1, [r3, #0]
 8001bb2:	d1dd      	bne.n	8001b70 <_free_r+0x24>
 8001bb4:	6810      	ldr	r0, [r2, #0]
 8001bb6:	6852      	ldr	r2, [r2, #4]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	4401      	add	r1, r0
 8001bbc:	6019      	str	r1, [r3, #0]
 8001bbe:	e7d7      	b.n	8001b70 <_free_r+0x24>
 8001bc0:	d902      	bls.n	8001bc8 <_free_r+0x7c>
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	602b      	str	r3, [r5, #0]
 8001bc6:	e7d3      	b.n	8001b70 <_free_r+0x24>
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	1821      	adds	r1, r4, r0
 8001bcc:	428a      	cmp	r2, r1
 8001bce:	bf04      	itt	eq
 8001bd0:	6811      	ldreq	r1, [r2, #0]
 8001bd2:	6852      	ldreq	r2, [r2, #4]
 8001bd4:	6062      	str	r2, [r4, #4]
 8001bd6:	bf04      	itt	eq
 8001bd8:	1809      	addeq	r1, r1, r0
 8001bda:	6021      	streq	r1, [r4, #0]
 8001bdc:	605c      	str	r4, [r3, #4]
 8001bde:	e7c7      	b.n	8001b70 <_free_r+0x24>
 8001be0:	bd38      	pop	{r3, r4, r5, pc}
 8001be2:	bf00      	nop
 8001be4:	200000b0 	.word	0x200000b0

08001be8 <_malloc_r>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	1ccd      	adds	r5, r1, #3
 8001bec:	f025 0503 	bic.w	r5, r5, #3
 8001bf0:	3508      	adds	r5, #8
 8001bf2:	2d0c      	cmp	r5, #12
 8001bf4:	bf38      	it	cc
 8001bf6:	250c      	movcc	r5, #12
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	4606      	mov	r6, r0
 8001bfc:	db01      	blt.n	8001c02 <_malloc_r+0x1a>
 8001bfe:	42a9      	cmp	r1, r5
 8001c00:	d903      	bls.n	8001c0a <_malloc_r+0x22>
 8001c02:	230c      	movs	r3, #12
 8001c04:	6033      	str	r3, [r6, #0]
 8001c06:	2000      	movs	r0, #0
 8001c08:	bd70      	pop	{r4, r5, r6, pc}
 8001c0a:	f000 fbb9 	bl	8002380 <__malloc_lock>
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <_malloc_r+0xac>)
 8001c10:	6814      	ldr	r4, [r2, #0]
 8001c12:	4621      	mov	r1, r4
 8001c14:	b991      	cbnz	r1, 8001c3c <_malloc_r+0x54>
 8001c16:	4c20      	ldr	r4, [pc, #128]	; (8001c98 <_malloc_r+0xb0>)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	b91b      	cbnz	r3, 8001c24 <_malloc_r+0x3c>
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f000 fb05 	bl	800222c <_sbrk_r>
 8001c22:	6020      	str	r0, [r4, #0]
 8001c24:	4629      	mov	r1, r5
 8001c26:	4630      	mov	r0, r6
 8001c28:	f000 fb00 	bl	800222c <_sbrk_r>
 8001c2c:	1c43      	adds	r3, r0, #1
 8001c2e:	d124      	bne.n	8001c7a <_malloc_r+0x92>
 8001c30:	230c      	movs	r3, #12
 8001c32:	6033      	str	r3, [r6, #0]
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 fba4 	bl	8002382 <__malloc_unlock>
 8001c3a:	e7e4      	b.n	8001c06 <_malloc_r+0x1e>
 8001c3c:	680b      	ldr	r3, [r1, #0]
 8001c3e:	1b5b      	subs	r3, r3, r5
 8001c40:	d418      	bmi.n	8001c74 <_malloc_r+0x8c>
 8001c42:	2b0b      	cmp	r3, #11
 8001c44:	d90f      	bls.n	8001c66 <_malloc_r+0x7e>
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	50cd      	str	r5, [r1, r3]
 8001c4a:	18cc      	adds	r4, r1, r3
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f000 fb98 	bl	8002382 <__malloc_unlock>
 8001c52:	f104 000b 	add.w	r0, r4, #11
 8001c56:	1d23      	adds	r3, r4, #4
 8001c58:	f020 0007 	bic.w	r0, r0, #7
 8001c5c:	1ac3      	subs	r3, r0, r3
 8001c5e:	d0d3      	beq.n	8001c08 <_malloc_r+0x20>
 8001c60:	425a      	negs	r2, r3
 8001c62:	50e2      	str	r2, [r4, r3]
 8001c64:	e7d0      	b.n	8001c08 <_malloc_r+0x20>
 8001c66:	428c      	cmp	r4, r1
 8001c68:	684b      	ldr	r3, [r1, #4]
 8001c6a:	bf16      	itet	ne
 8001c6c:	6063      	strne	r3, [r4, #4]
 8001c6e:	6013      	streq	r3, [r2, #0]
 8001c70:	460c      	movne	r4, r1
 8001c72:	e7eb      	b.n	8001c4c <_malloc_r+0x64>
 8001c74:	460c      	mov	r4, r1
 8001c76:	6849      	ldr	r1, [r1, #4]
 8001c78:	e7cc      	b.n	8001c14 <_malloc_r+0x2c>
 8001c7a:	1cc4      	adds	r4, r0, #3
 8001c7c:	f024 0403 	bic.w	r4, r4, #3
 8001c80:	42a0      	cmp	r0, r4
 8001c82:	d005      	beq.n	8001c90 <_malloc_r+0xa8>
 8001c84:	1a21      	subs	r1, r4, r0
 8001c86:	4630      	mov	r0, r6
 8001c88:	f000 fad0 	bl	800222c <_sbrk_r>
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	d0cf      	beq.n	8001c30 <_malloc_r+0x48>
 8001c90:	6025      	str	r5, [r4, #0]
 8001c92:	e7db      	b.n	8001c4c <_malloc_r+0x64>
 8001c94:	200000b0 	.word	0x200000b0
 8001c98:	200000b4 	.word	0x200000b4

08001c9c <__sfputc_r>:
 8001c9c:	6893      	ldr	r3, [r2, #8]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	b410      	push	{r4}
 8001ca4:	6093      	str	r3, [r2, #8]
 8001ca6:	da08      	bge.n	8001cba <__sfputc_r+0x1e>
 8001ca8:	6994      	ldr	r4, [r2, #24]
 8001caa:	42a3      	cmp	r3, r4
 8001cac:	db01      	blt.n	8001cb2 <__sfputc_r+0x16>
 8001cae:	290a      	cmp	r1, #10
 8001cb0:	d103      	bne.n	8001cba <__sfputc_r+0x1e>
 8001cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cb6:	f7ff bcab 	b.w	8001610 <__swbuf_r>
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	1c58      	adds	r0, r3, #1
 8001cbe:	6010      	str	r0, [r2, #0]
 8001cc0:	7019      	strb	r1, [r3, #0]
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <__sfputs_r>:
 8001cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ccc:	4606      	mov	r6, r0
 8001cce:	460f      	mov	r7, r1
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	18d5      	adds	r5, r2, r3
 8001cd4:	42ac      	cmp	r4, r5
 8001cd6:	d101      	bne.n	8001cdc <__sfputs_r+0x12>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e007      	b.n	8001cec <__sfputs_r+0x22>
 8001cdc:	463a      	mov	r2, r7
 8001cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f7ff ffda 	bl	8001c9c <__sfputc_r>
 8001ce8:	1c43      	adds	r3, r0, #1
 8001cea:	d1f3      	bne.n	8001cd4 <__sfputs_r+0xa>
 8001cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cf0 <_vfiprintf_r>:
 8001cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	b09d      	sub	sp, #116	; 0x74
 8001cf8:	4617      	mov	r7, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4606      	mov	r6, r0
 8001cfe:	b118      	cbz	r0, 8001d08 <_vfiprintf_r+0x18>
 8001d00:	6983      	ldr	r3, [r0, #24]
 8001d02:	b90b      	cbnz	r3, 8001d08 <_vfiprintf_r+0x18>
 8001d04:	f7ff fe34 	bl	8001970 <__sinit>
 8001d08:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <_vfiprintf_r+0x20c>)
 8001d0a:	429c      	cmp	r4, r3
 8001d0c:	d158      	bne.n	8001dc0 <_vfiprintf_r+0xd0>
 8001d0e:	6874      	ldr	r4, [r6, #4]
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	0718      	lsls	r0, r3, #28
 8001d14:	d55e      	bpl.n	8001dd4 <_vfiprintf_r+0xe4>
 8001d16:	6923      	ldr	r3, [r4, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d05b      	beq.n	8001dd4 <_vfiprintf_r+0xe4>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d20:	2320      	movs	r3, #32
 8001d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d26:	2330      	movs	r3, #48	; 0x30
 8001d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d2c:	9503      	str	r5, [sp, #12]
 8001d2e:	f04f 0b01 	mov.w	fp, #1
 8001d32:	46b8      	mov	r8, r7
 8001d34:	4645      	mov	r5, r8
 8001d36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d3a:	b10b      	cbz	r3, 8001d40 <_vfiprintf_r+0x50>
 8001d3c:	2b25      	cmp	r3, #37	; 0x25
 8001d3e:	d154      	bne.n	8001dea <_vfiprintf_r+0xfa>
 8001d40:	ebb8 0a07 	subs.w	sl, r8, r7
 8001d44:	d00b      	beq.n	8001d5e <_vfiprintf_r+0x6e>
 8001d46:	4653      	mov	r3, sl
 8001d48:	463a      	mov	r2, r7
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	f7ff ffbc 	bl	8001cca <__sfputs_r>
 8001d52:	3001      	adds	r0, #1
 8001d54:	f000 80c2 	beq.w	8001edc <_vfiprintf_r+0x1ec>
 8001d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d5a:	4453      	add	r3, sl
 8001d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d5e:	f898 3000 	ldrb.w	r3, [r8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80ba 	beq.w	8001edc <_vfiprintf_r+0x1ec>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	9307      	str	r3, [sp, #28]
 8001d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8001d7c:	46a8      	mov	r8, r5
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d84:	485e      	ldr	r0, [pc, #376]	; (8001f00 <_vfiprintf_r+0x210>)
 8001d86:	f7fe fa43 	bl	8000210 <memchr>
 8001d8a:	9b04      	ldr	r3, [sp, #16]
 8001d8c:	bb78      	cbnz	r0, 8001dee <_vfiprintf_r+0xfe>
 8001d8e:	06d9      	lsls	r1, r3, #27
 8001d90:	bf44      	itt	mi
 8001d92:	2220      	movmi	r2, #32
 8001d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d98:	071a      	lsls	r2, r3, #28
 8001d9a:	bf44      	itt	mi
 8001d9c:	222b      	movmi	r2, #43	; 0x2b
 8001d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001da2:	782a      	ldrb	r2, [r5, #0]
 8001da4:	2a2a      	cmp	r2, #42	; 0x2a
 8001da6:	d02a      	beq.n	8001dfe <_vfiprintf_r+0x10e>
 8001da8:	9a07      	ldr	r2, [sp, #28]
 8001daa:	46a8      	mov	r8, r5
 8001dac:	2000      	movs	r0, #0
 8001dae:	250a      	movs	r5, #10
 8001db0:	4641      	mov	r1, r8
 8001db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001db6:	3b30      	subs	r3, #48	; 0x30
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	d969      	bls.n	8001e90 <_vfiprintf_r+0x1a0>
 8001dbc:	b360      	cbz	r0, 8001e18 <_vfiprintf_r+0x128>
 8001dbe:	e024      	b.n	8001e0a <_vfiprintf_r+0x11a>
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <_vfiprintf_r+0x214>)
 8001dc2:	429c      	cmp	r4, r3
 8001dc4:	d101      	bne.n	8001dca <_vfiprintf_r+0xda>
 8001dc6:	68b4      	ldr	r4, [r6, #8]
 8001dc8:	e7a2      	b.n	8001d10 <_vfiprintf_r+0x20>
 8001dca:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <_vfiprintf_r+0x218>)
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	bf08      	it	eq
 8001dd0:	68f4      	ldreq	r4, [r6, #12]
 8001dd2:	e79d      	b.n	8001d10 <_vfiprintf_r+0x20>
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff fc6c 	bl	80016b4 <__swsetup_r>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d09d      	beq.n	8001d1c <_vfiprintf_r+0x2c>
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	b01d      	add	sp, #116	; 0x74
 8001de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dea:	46a8      	mov	r8, r5
 8001dec:	e7a2      	b.n	8001d34 <_vfiprintf_r+0x44>
 8001dee:	4a44      	ldr	r2, [pc, #272]	; (8001f00 <_vfiprintf_r+0x210>)
 8001df0:	1a80      	subs	r0, r0, r2
 8001df2:	fa0b f000 	lsl.w	r0, fp, r0
 8001df6:	4318      	orrs	r0, r3
 8001df8:	9004      	str	r0, [sp, #16]
 8001dfa:	4645      	mov	r5, r8
 8001dfc:	e7be      	b.n	8001d7c <_vfiprintf_r+0x8c>
 8001dfe:	9a03      	ldr	r2, [sp, #12]
 8001e00:	1d11      	adds	r1, r2, #4
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	9103      	str	r1, [sp, #12]
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	db01      	blt.n	8001e0e <_vfiprintf_r+0x11e>
 8001e0a:	9207      	str	r2, [sp, #28]
 8001e0c:	e004      	b.n	8001e18 <_vfiprintf_r+0x128>
 8001e0e:	4252      	negs	r2, r2
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	9207      	str	r2, [sp, #28]
 8001e16:	9304      	str	r3, [sp, #16]
 8001e18:	f898 3000 	ldrb.w	r3, [r8]
 8001e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8001e1e:	d10e      	bne.n	8001e3e <_vfiprintf_r+0x14e>
 8001e20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001e24:	2b2a      	cmp	r3, #42	; 0x2a
 8001e26:	d138      	bne.n	8001e9a <_vfiprintf_r+0x1aa>
 8001e28:	9b03      	ldr	r3, [sp, #12]
 8001e2a:	1d1a      	adds	r2, r3, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	9203      	str	r2, [sp, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bfb8      	it	lt
 8001e34:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e38:	f108 0802 	add.w	r8, r8, #2
 8001e3c:	9305      	str	r3, [sp, #20]
 8001e3e:	4d33      	ldr	r5, [pc, #204]	; (8001f0c <_vfiprintf_r+0x21c>)
 8001e40:	f898 1000 	ldrb.w	r1, [r8]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4628      	mov	r0, r5
 8001e48:	f7fe f9e2 	bl	8000210 <memchr>
 8001e4c:	b140      	cbz	r0, 8001e60 <_vfiprintf_r+0x170>
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	1b40      	subs	r0, r0, r5
 8001e52:	fa03 f000 	lsl.w	r0, r3, r0
 8001e56:	9b04      	ldr	r3, [sp, #16]
 8001e58:	4303      	orrs	r3, r0
 8001e5a:	f108 0801 	add.w	r8, r8, #1
 8001e5e:	9304      	str	r3, [sp, #16]
 8001e60:	f898 1000 	ldrb.w	r1, [r8]
 8001e64:	482a      	ldr	r0, [pc, #168]	; (8001f10 <_vfiprintf_r+0x220>)
 8001e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e6a:	2206      	movs	r2, #6
 8001e6c:	f108 0701 	add.w	r7, r8, #1
 8001e70:	f7fe f9ce 	bl	8000210 <memchr>
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d037      	beq.n	8001ee8 <_vfiprintf_r+0x1f8>
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <_vfiprintf_r+0x224>)
 8001e7a:	bb1b      	cbnz	r3, 8001ec4 <_vfiprintf_r+0x1d4>
 8001e7c:	9b03      	ldr	r3, [sp, #12]
 8001e7e:	3307      	adds	r3, #7
 8001e80:	f023 0307 	bic.w	r3, r3, #7
 8001e84:	3308      	adds	r3, #8
 8001e86:	9303      	str	r3, [sp, #12]
 8001e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e8a:	444b      	add	r3, r9
 8001e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e8e:	e750      	b.n	8001d32 <_vfiprintf_r+0x42>
 8001e90:	fb05 3202 	mla	r2, r5, r2, r3
 8001e94:	2001      	movs	r0, #1
 8001e96:	4688      	mov	r8, r1
 8001e98:	e78a      	b.n	8001db0 <_vfiprintf_r+0xc0>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f108 0801 	add.w	r8, r8, #1
 8001ea0:	9305      	str	r3, [sp, #20]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	250a      	movs	r5, #10
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eac:	3a30      	subs	r2, #48	; 0x30
 8001eae:	2a09      	cmp	r2, #9
 8001eb0:	d903      	bls.n	8001eba <_vfiprintf_r+0x1ca>
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0c3      	beq.n	8001e3e <_vfiprintf_r+0x14e>
 8001eb6:	9105      	str	r1, [sp, #20]
 8001eb8:	e7c1      	b.n	8001e3e <_vfiprintf_r+0x14e>
 8001eba:	fb05 2101 	mla	r1, r5, r1, r2
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4680      	mov	r8, r0
 8001ec2:	e7f0      	b.n	8001ea6 <_vfiprintf_r+0x1b6>
 8001ec4:	ab03      	add	r3, sp, #12
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4622      	mov	r2, r4
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <_vfiprintf_r+0x228>)
 8001ecc:	a904      	add	r1, sp, #16
 8001ece:	4630      	mov	r0, r6
 8001ed0:	f3af 8000 	nop.w
 8001ed4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001ed8:	4681      	mov	r9, r0
 8001eda:	d1d5      	bne.n	8001e88 <_vfiprintf_r+0x198>
 8001edc:	89a3      	ldrh	r3, [r4, #12]
 8001ede:	065b      	lsls	r3, r3, #25
 8001ee0:	f53f af7e 	bmi.w	8001de0 <_vfiprintf_r+0xf0>
 8001ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ee6:	e77d      	b.n	8001de4 <_vfiprintf_r+0xf4>
 8001ee8:	ab03      	add	r3, sp, #12
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	4622      	mov	r2, r4
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <_vfiprintf_r+0x228>)
 8001ef0:	a904      	add	r1, sp, #16
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f000 f888 	bl	8002008 <_printf_i>
 8001ef8:	e7ec      	b.n	8001ed4 <_vfiprintf_r+0x1e4>
 8001efa:	bf00      	nop
 8001efc:	080029e0 	.word	0x080029e0
 8001f00:	08002a20 	.word	0x08002a20
 8001f04:	08002a00 	.word	0x08002a00
 8001f08:	080029c0 	.word	0x080029c0
 8001f0c:	08002a26 	.word	0x08002a26
 8001f10:	08002a2a 	.word	0x08002a2a
 8001f14:	00000000 	.word	0x00000000
 8001f18:	08001ccb 	.word	0x08001ccb

08001f1c <_printf_common>:
 8001f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f20:	4691      	mov	r9, r2
 8001f22:	461f      	mov	r7, r3
 8001f24:	688a      	ldr	r2, [r1, #8]
 8001f26:	690b      	ldr	r3, [r1, #16]
 8001f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	bfb8      	it	lt
 8001f30:	4613      	movlt	r3, r2
 8001f32:	f8c9 3000 	str.w	r3, [r9]
 8001f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	b112      	cbz	r2, 8001f46 <_printf_common+0x2a>
 8001f40:	3301      	adds	r3, #1
 8001f42:	f8c9 3000 	str.w	r3, [r9]
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	0699      	lsls	r1, r3, #26
 8001f4a:	bf42      	ittt	mi
 8001f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f50:	3302      	addmi	r3, #2
 8001f52:	f8c9 3000 	strmi.w	r3, [r9]
 8001f56:	6825      	ldr	r5, [r4, #0]
 8001f58:	f015 0506 	ands.w	r5, r5, #6
 8001f5c:	d107      	bne.n	8001f6e <_printf_common+0x52>
 8001f5e:	f104 0a19 	add.w	sl, r4, #25
 8001f62:	68e3      	ldr	r3, [r4, #12]
 8001f64:	f8d9 2000 	ldr.w	r2, [r9]
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	42ab      	cmp	r3, r5
 8001f6c:	dc28      	bgt.n	8001fc0 <_printf_common+0xa4>
 8001f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	3300      	adds	r3, #0
 8001f76:	bf18      	it	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	0692      	lsls	r2, r2, #26
 8001f7c:	d42d      	bmi.n	8001fda <_printf_common+0xbe>
 8001f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f82:	4639      	mov	r1, r7
 8001f84:	4630      	mov	r0, r6
 8001f86:	47c0      	blx	r8
 8001f88:	3001      	adds	r0, #1
 8001f8a:	d020      	beq.n	8001fce <_printf_common+0xb2>
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	68e5      	ldr	r5, [r4, #12]
 8001f90:	f8d9 2000 	ldr.w	r2, [r9]
 8001f94:	f003 0306 	and.w	r3, r3, #6
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	bf08      	it	eq
 8001f9c:	1aad      	subeq	r5, r5, r2
 8001f9e:	68a3      	ldr	r3, [r4, #8]
 8001fa0:	6922      	ldr	r2, [r4, #16]
 8001fa2:	bf0c      	ite	eq
 8001fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fa8:	2500      	movne	r5, #0
 8001faa:	4293      	cmp	r3, r2
 8001fac:	bfc4      	itt	gt
 8001fae:	1a9b      	subgt	r3, r3, r2
 8001fb0:	18ed      	addgt	r5, r5, r3
 8001fb2:	f04f 0900 	mov.w	r9, #0
 8001fb6:	341a      	adds	r4, #26
 8001fb8:	454d      	cmp	r5, r9
 8001fba:	d11a      	bne.n	8001ff2 <_printf_common+0xd6>
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e008      	b.n	8001fd2 <_printf_common+0xb6>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	47c0      	blx	r8
 8001fca:	3001      	adds	r0, #1
 8001fcc:	d103      	bne.n	8001fd6 <_printf_common+0xba>
 8001fce:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd6:	3501      	adds	r5, #1
 8001fd8:	e7c3      	b.n	8001f62 <_printf_common+0x46>
 8001fda:	18e1      	adds	r1, r4, r3
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	2030      	movs	r0, #48	; 0x30
 8001fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fe4:	4422      	add	r2, r4
 8001fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fee:	3302      	adds	r3, #2
 8001ff0:	e7c5      	b.n	8001f7e <_printf_common+0x62>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	4639      	mov	r1, r7
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	47c0      	blx	r8
 8001ffc:	3001      	adds	r0, #1
 8001ffe:	d0e6      	beq.n	8001fce <_printf_common+0xb2>
 8002000:	f109 0901 	add.w	r9, r9, #1
 8002004:	e7d8      	b.n	8001fb8 <_printf_common+0x9c>
	...

08002008 <_printf_i>:
 8002008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800200c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002010:	460c      	mov	r4, r1
 8002012:	7e09      	ldrb	r1, [r1, #24]
 8002014:	b085      	sub	sp, #20
 8002016:	296e      	cmp	r1, #110	; 0x6e
 8002018:	4617      	mov	r7, r2
 800201a:	4606      	mov	r6, r0
 800201c:	4698      	mov	r8, r3
 800201e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002020:	f000 80b3 	beq.w	800218a <_printf_i+0x182>
 8002024:	d822      	bhi.n	800206c <_printf_i+0x64>
 8002026:	2963      	cmp	r1, #99	; 0x63
 8002028:	d036      	beq.n	8002098 <_printf_i+0x90>
 800202a:	d80a      	bhi.n	8002042 <_printf_i+0x3a>
 800202c:	2900      	cmp	r1, #0
 800202e:	f000 80b9 	beq.w	80021a4 <_printf_i+0x19c>
 8002032:	2958      	cmp	r1, #88	; 0x58
 8002034:	f000 8083 	beq.w	800213e <_printf_i+0x136>
 8002038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800203c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002040:	e032      	b.n	80020a8 <_printf_i+0xa0>
 8002042:	2964      	cmp	r1, #100	; 0x64
 8002044:	d001      	beq.n	800204a <_printf_i+0x42>
 8002046:	2969      	cmp	r1, #105	; 0x69
 8002048:	d1f6      	bne.n	8002038 <_printf_i+0x30>
 800204a:	6820      	ldr	r0, [r4, #0]
 800204c:	6813      	ldr	r3, [r2, #0]
 800204e:	0605      	lsls	r5, r0, #24
 8002050:	f103 0104 	add.w	r1, r3, #4
 8002054:	d52a      	bpl.n	80020ac <_printf_i+0xa4>
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6011      	str	r1, [r2, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	da03      	bge.n	8002066 <_printf_i+0x5e>
 800205e:	222d      	movs	r2, #45	; 0x2d
 8002060:	425b      	negs	r3, r3
 8002062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002066:	486f      	ldr	r0, [pc, #444]	; (8002224 <_printf_i+0x21c>)
 8002068:	220a      	movs	r2, #10
 800206a:	e039      	b.n	80020e0 <_printf_i+0xd8>
 800206c:	2973      	cmp	r1, #115	; 0x73
 800206e:	f000 809d 	beq.w	80021ac <_printf_i+0x1a4>
 8002072:	d808      	bhi.n	8002086 <_printf_i+0x7e>
 8002074:	296f      	cmp	r1, #111	; 0x6f
 8002076:	d020      	beq.n	80020ba <_printf_i+0xb2>
 8002078:	2970      	cmp	r1, #112	; 0x70
 800207a:	d1dd      	bne.n	8002038 <_printf_i+0x30>
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	6023      	str	r3, [r4, #0]
 8002084:	e003      	b.n	800208e <_printf_i+0x86>
 8002086:	2975      	cmp	r1, #117	; 0x75
 8002088:	d017      	beq.n	80020ba <_printf_i+0xb2>
 800208a:	2978      	cmp	r1, #120	; 0x78
 800208c:	d1d4      	bne.n	8002038 <_printf_i+0x30>
 800208e:	2378      	movs	r3, #120	; 0x78
 8002090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002094:	4864      	ldr	r0, [pc, #400]	; (8002228 <_printf_i+0x220>)
 8002096:	e055      	b.n	8002144 <_printf_i+0x13c>
 8002098:	6813      	ldr	r3, [r2, #0]
 800209a:	1d19      	adds	r1, r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6011      	str	r1, [r2, #0]
 80020a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020a8:	2301      	movs	r3, #1
 80020aa:	e08c      	b.n	80021c6 <_printf_i+0x1be>
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6011      	str	r1, [r2, #0]
 80020b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020b4:	bf18      	it	ne
 80020b6:	b21b      	sxthne	r3, r3
 80020b8:	e7cf      	b.n	800205a <_printf_i+0x52>
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	6825      	ldr	r5, [r4, #0]
 80020be:	1d18      	adds	r0, r3, #4
 80020c0:	6010      	str	r0, [r2, #0]
 80020c2:	0628      	lsls	r0, r5, #24
 80020c4:	d501      	bpl.n	80020ca <_printf_i+0xc2>
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e002      	b.n	80020d0 <_printf_i+0xc8>
 80020ca:	0668      	lsls	r0, r5, #25
 80020cc:	d5fb      	bpl.n	80020c6 <_printf_i+0xbe>
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	4854      	ldr	r0, [pc, #336]	; (8002224 <_printf_i+0x21c>)
 80020d2:	296f      	cmp	r1, #111	; 0x6f
 80020d4:	bf14      	ite	ne
 80020d6:	220a      	movne	r2, #10
 80020d8:	2208      	moveq	r2, #8
 80020da:	2100      	movs	r1, #0
 80020dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020e0:	6865      	ldr	r5, [r4, #4]
 80020e2:	60a5      	str	r5, [r4, #8]
 80020e4:	2d00      	cmp	r5, #0
 80020e6:	f2c0 8095 	blt.w	8002214 <_printf_i+0x20c>
 80020ea:	6821      	ldr	r1, [r4, #0]
 80020ec:	f021 0104 	bic.w	r1, r1, #4
 80020f0:	6021      	str	r1, [r4, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d13d      	bne.n	8002172 <_printf_i+0x16a>
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	f040 808e 	bne.w	8002218 <_printf_i+0x210>
 80020fc:	4665      	mov	r5, ip
 80020fe:	2a08      	cmp	r2, #8
 8002100:	d10b      	bne.n	800211a <_printf_i+0x112>
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	07db      	lsls	r3, r3, #31
 8002106:	d508      	bpl.n	800211a <_printf_i+0x112>
 8002108:	6923      	ldr	r3, [r4, #16]
 800210a:	6862      	ldr	r2, [r4, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	bfde      	ittt	le
 8002110:	2330      	movle	r3, #48	; 0x30
 8002112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800211a:	ebac 0305 	sub.w	r3, ip, r5
 800211e:	6123      	str	r3, [r4, #16]
 8002120:	f8cd 8000 	str.w	r8, [sp]
 8002124:	463b      	mov	r3, r7
 8002126:	aa03      	add	r2, sp, #12
 8002128:	4621      	mov	r1, r4
 800212a:	4630      	mov	r0, r6
 800212c:	f7ff fef6 	bl	8001f1c <_printf_common>
 8002130:	3001      	adds	r0, #1
 8002132:	d14d      	bne.n	80021d0 <_printf_i+0x1c8>
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	b005      	add	sp, #20
 800213a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800213e:	4839      	ldr	r0, [pc, #228]	; (8002224 <_printf_i+0x21c>)
 8002140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	6821      	ldr	r1, [r4, #0]
 8002148:	1d1d      	adds	r5, r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6015      	str	r5, [r2, #0]
 800214e:	060a      	lsls	r2, r1, #24
 8002150:	d50b      	bpl.n	800216a <_printf_i+0x162>
 8002152:	07ca      	lsls	r2, r1, #31
 8002154:	bf44      	itt	mi
 8002156:	f041 0120 	orrmi.w	r1, r1, #32
 800215a:	6021      	strmi	r1, [r4, #0]
 800215c:	b91b      	cbnz	r3, 8002166 <_printf_i+0x15e>
 800215e:	6822      	ldr	r2, [r4, #0]
 8002160:	f022 0220 	bic.w	r2, r2, #32
 8002164:	6022      	str	r2, [r4, #0]
 8002166:	2210      	movs	r2, #16
 8002168:	e7b7      	b.n	80020da <_printf_i+0xd2>
 800216a:	064d      	lsls	r5, r1, #25
 800216c:	bf48      	it	mi
 800216e:	b29b      	uxthmi	r3, r3
 8002170:	e7ef      	b.n	8002152 <_printf_i+0x14a>
 8002172:	4665      	mov	r5, ip
 8002174:	fbb3 f1f2 	udiv	r1, r3, r2
 8002178:	fb02 3311 	mls	r3, r2, r1, r3
 800217c:	5cc3      	ldrb	r3, [r0, r3]
 800217e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002182:	460b      	mov	r3, r1
 8002184:	2900      	cmp	r1, #0
 8002186:	d1f5      	bne.n	8002174 <_printf_i+0x16c>
 8002188:	e7b9      	b.n	80020fe <_printf_i+0xf6>
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	6825      	ldr	r5, [r4, #0]
 800218e:	6961      	ldr	r1, [r4, #20]
 8002190:	1d18      	adds	r0, r3, #4
 8002192:	6010      	str	r0, [r2, #0]
 8002194:	0628      	lsls	r0, r5, #24
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	d501      	bpl.n	800219e <_printf_i+0x196>
 800219a:	6019      	str	r1, [r3, #0]
 800219c:	e002      	b.n	80021a4 <_printf_i+0x19c>
 800219e:	066a      	lsls	r2, r5, #25
 80021a0:	d5fb      	bpl.n	800219a <_printf_i+0x192>
 80021a2:	8019      	strh	r1, [r3, #0]
 80021a4:	2300      	movs	r3, #0
 80021a6:	6123      	str	r3, [r4, #16]
 80021a8:	4665      	mov	r5, ip
 80021aa:	e7b9      	b.n	8002120 <_printf_i+0x118>
 80021ac:	6813      	ldr	r3, [r2, #0]
 80021ae:	1d19      	adds	r1, r3, #4
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	681d      	ldr	r5, [r3, #0]
 80021b4:	6862      	ldr	r2, [r4, #4]
 80021b6:	2100      	movs	r1, #0
 80021b8:	4628      	mov	r0, r5
 80021ba:	f7fe f829 	bl	8000210 <memchr>
 80021be:	b108      	cbz	r0, 80021c4 <_printf_i+0x1bc>
 80021c0:	1b40      	subs	r0, r0, r5
 80021c2:	6060      	str	r0, [r4, #4]
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	6123      	str	r3, [r4, #16]
 80021c8:	2300      	movs	r3, #0
 80021ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021ce:	e7a7      	b.n	8002120 <_printf_i+0x118>
 80021d0:	6923      	ldr	r3, [r4, #16]
 80021d2:	462a      	mov	r2, r5
 80021d4:	4639      	mov	r1, r7
 80021d6:	4630      	mov	r0, r6
 80021d8:	47c0      	blx	r8
 80021da:	3001      	adds	r0, #1
 80021dc:	d0aa      	beq.n	8002134 <_printf_i+0x12c>
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	079b      	lsls	r3, r3, #30
 80021e2:	d413      	bmi.n	800220c <_printf_i+0x204>
 80021e4:	68e0      	ldr	r0, [r4, #12]
 80021e6:	9b03      	ldr	r3, [sp, #12]
 80021e8:	4298      	cmp	r0, r3
 80021ea:	bfb8      	it	lt
 80021ec:	4618      	movlt	r0, r3
 80021ee:	e7a3      	b.n	8002138 <_printf_i+0x130>
 80021f0:	2301      	movs	r3, #1
 80021f2:	464a      	mov	r2, r9
 80021f4:	4639      	mov	r1, r7
 80021f6:	4630      	mov	r0, r6
 80021f8:	47c0      	blx	r8
 80021fa:	3001      	adds	r0, #1
 80021fc:	d09a      	beq.n	8002134 <_printf_i+0x12c>
 80021fe:	3501      	adds	r5, #1
 8002200:	68e3      	ldr	r3, [r4, #12]
 8002202:	9a03      	ldr	r2, [sp, #12]
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	42ab      	cmp	r3, r5
 8002208:	dcf2      	bgt.n	80021f0 <_printf_i+0x1e8>
 800220a:	e7eb      	b.n	80021e4 <_printf_i+0x1dc>
 800220c:	2500      	movs	r5, #0
 800220e:	f104 0919 	add.w	r9, r4, #25
 8002212:	e7f5      	b.n	8002200 <_printf_i+0x1f8>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ac      	bne.n	8002172 <_printf_i+0x16a>
 8002218:	7803      	ldrb	r3, [r0, #0]
 800221a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800221e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002222:	e76c      	b.n	80020fe <_printf_i+0xf6>
 8002224:	08002a31 	.word	0x08002a31
 8002228:	08002a42 	.word	0x08002a42

0800222c <_sbrk_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4c06      	ldr	r4, [pc, #24]	; (8002248 <_sbrk_r+0x1c>)
 8002230:	2300      	movs	r3, #0
 8002232:	4605      	mov	r5, r0
 8002234:	4608      	mov	r0, r1
 8002236:	6023      	str	r3, [r4, #0]
 8002238:	f000 f9bc 	bl	80025b4 <_sbrk>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_sbrk_r+0x1a>
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	b103      	cbz	r3, 8002246 <_sbrk_r+0x1a>
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	200001b0 	.word	0x200001b0

0800224c <__sread>:
 800224c:	b510      	push	{r4, lr}
 800224e:	460c      	mov	r4, r1
 8002250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002254:	f000 f896 	bl	8002384 <_read_r>
 8002258:	2800      	cmp	r0, #0
 800225a:	bfab      	itete	ge
 800225c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800225e:	89a3      	ldrhlt	r3, [r4, #12]
 8002260:	181b      	addge	r3, r3, r0
 8002262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002266:	bfac      	ite	ge
 8002268:	6563      	strge	r3, [r4, #84]	; 0x54
 800226a:	81a3      	strhlt	r3, [r4, #12]
 800226c:	bd10      	pop	{r4, pc}

0800226e <__swrite>:
 800226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002272:	461f      	mov	r7, r3
 8002274:	898b      	ldrh	r3, [r1, #12]
 8002276:	05db      	lsls	r3, r3, #23
 8002278:	4605      	mov	r5, r0
 800227a:	460c      	mov	r4, r1
 800227c:	4616      	mov	r6, r2
 800227e:	d505      	bpl.n	800228c <__swrite+0x1e>
 8002280:	2302      	movs	r3, #2
 8002282:	2200      	movs	r2, #0
 8002284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002288:	f000 f868 	bl	800235c <_lseek_r>
 800228c:	89a3      	ldrh	r3, [r4, #12]
 800228e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002296:	81a3      	strh	r3, [r4, #12]
 8002298:	4632      	mov	r2, r6
 800229a:	463b      	mov	r3, r7
 800229c:	4628      	mov	r0, r5
 800229e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022a2:	f000 b817 	b.w	80022d4 <_write_r>

080022a6 <__sseek>:
 80022a6:	b510      	push	{r4, lr}
 80022a8:	460c      	mov	r4, r1
 80022aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ae:	f000 f855 	bl	800235c <_lseek_r>
 80022b2:	1c43      	adds	r3, r0, #1
 80022b4:	89a3      	ldrh	r3, [r4, #12]
 80022b6:	bf15      	itete	ne
 80022b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80022ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022c2:	81a3      	strheq	r3, [r4, #12]
 80022c4:	bf18      	it	ne
 80022c6:	81a3      	strhne	r3, [r4, #12]
 80022c8:	bd10      	pop	{r4, pc}

080022ca <__sclose>:
 80022ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ce:	f000 b813 	b.w	80022f8 <_close_r>
	...

080022d4 <_write_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4c07      	ldr	r4, [pc, #28]	; (80022f4 <_write_r+0x20>)
 80022d8:	4605      	mov	r5, r0
 80022da:	4608      	mov	r0, r1
 80022dc:	4611      	mov	r1, r2
 80022de:	2200      	movs	r2, #0
 80022e0:	6022      	str	r2, [r4, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f000 f911 	bl	800250a <_write>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d102      	bne.n	80022f2 <_write_r+0x1e>
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	b103      	cbz	r3, 80022f2 <_write_r+0x1e>
 80022f0:	602b      	str	r3, [r5, #0]
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
 80022f4:	200001b0 	.word	0x200001b0

080022f8 <_close_r>:
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	4c06      	ldr	r4, [pc, #24]	; (8002314 <_close_r+0x1c>)
 80022fc:	2300      	movs	r3, #0
 80022fe:	4605      	mov	r5, r0
 8002300:	4608      	mov	r0, r1
 8002302:	6023      	str	r3, [r4, #0]
 8002304:	f000 f930 	bl	8002568 <_close>
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	d102      	bne.n	8002312 <_close_r+0x1a>
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	b103      	cbz	r3, 8002312 <_close_r+0x1a>
 8002310:	602b      	str	r3, [r5, #0]
 8002312:	bd38      	pop	{r3, r4, r5, pc}
 8002314:	200001b0 	.word	0x200001b0

08002318 <_fstat_r>:
 8002318:	b538      	push	{r3, r4, r5, lr}
 800231a:	4c07      	ldr	r4, [pc, #28]	; (8002338 <_fstat_r+0x20>)
 800231c:	2300      	movs	r3, #0
 800231e:	4605      	mov	r5, r0
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	f000 f98a 	bl	800263e <_fstat>
 800232a:	1c43      	adds	r3, r0, #1
 800232c:	d102      	bne.n	8002334 <_fstat_r+0x1c>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	b103      	cbz	r3, 8002334 <_fstat_r+0x1c>
 8002332:	602b      	str	r3, [r5, #0]
 8002334:	bd38      	pop	{r3, r4, r5, pc}
 8002336:	bf00      	nop
 8002338:	200001b0 	.word	0x200001b0

0800233c <_isatty_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4c06      	ldr	r4, [pc, #24]	; (8002358 <_isatty_r+0x1c>)
 8002340:	2300      	movs	r3, #0
 8002342:	4605      	mov	r5, r0
 8002344:	4608      	mov	r0, r1
 8002346:	6023      	str	r3, [r4, #0]
 8002348:	f000 fade 	bl	8002908 <_isatty>
 800234c:	1c43      	adds	r3, r0, #1
 800234e:	d102      	bne.n	8002356 <_isatty_r+0x1a>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	b103      	cbz	r3, 8002356 <_isatty_r+0x1a>
 8002354:	602b      	str	r3, [r5, #0]
 8002356:	bd38      	pop	{r3, r4, r5, pc}
 8002358:	200001b0 	.word	0x200001b0

0800235c <_lseek_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4c07      	ldr	r4, [pc, #28]	; (800237c <_lseek_r+0x20>)
 8002360:	4605      	mov	r5, r0
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	2200      	movs	r2, #0
 8002368:	6022      	str	r2, [r4, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f000 f8bb 	bl	80024e6 <_lseek>
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	d102      	bne.n	800237a <_lseek_r+0x1e>
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	b103      	cbz	r3, 800237a <_lseek_r+0x1e>
 8002378:	602b      	str	r3, [r5, #0]
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	200001b0 	.word	0x200001b0

08002380 <__malloc_lock>:
 8002380:	4770      	bx	lr

08002382 <__malloc_unlock>:
 8002382:	4770      	bx	lr

08002384 <_read_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4c07      	ldr	r4, [pc, #28]	; (80023a4 <_read_r+0x20>)
 8002388:	4605      	mov	r5, r0
 800238a:	4608      	mov	r0, r1
 800238c:	4611      	mov	r1, r2
 800238e:	2200      	movs	r2, #0
 8002390:	6022      	str	r2, [r4, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	f000 f850 	bl	8002438 <_read>
 8002398:	1c43      	adds	r3, r0, #1
 800239a:	d102      	bne.n	80023a2 <_read_r+0x1e>
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	b103      	cbz	r3, 80023a2 <_read_r+0x1e>
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	bd38      	pop	{r3, r4, r5, pc}
 80023a4:	200001b0 	.word	0x200001b0

080023a8 <findslot>:
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <findslot+0x2c>)
 80023aa:	b510      	push	{r4, lr}
 80023ac:	4604      	mov	r4, r0
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	b118      	cbz	r0, 80023ba <findslot+0x12>
 80023b2:	6983      	ldr	r3, [r0, #24]
 80023b4:	b90b      	cbnz	r3, 80023ba <findslot+0x12>
 80023b6:	f7ff fadb 	bl	8001970 <__sinit>
 80023ba:	2c13      	cmp	r4, #19
 80023bc:	d807      	bhi.n	80023ce <findslot+0x26>
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <findslot+0x30>)
 80023c0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80023c4:	3301      	adds	r3, #1
 80023c6:	d002      	beq.n	80023ce <findslot+0x26>
 80023c8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	2000      	movs	r0, #0
 80023d0:	e7fc      	b.n	80023cc <findslot+0x24>
 80023d2:	bf00      	nop
 80023d4:	20000020 	.word	0x20000020
 80023d8:	200000c8 	.word	0x200000c8

080023dc <checkerror>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	1c43      	adds	r3, r0, #1
 80023e0:	4605      	mov	r5, r0
 80023e2:	d109      	bne.n	80023f8 <checkerror+0x1c>
 80023e4:	f000 faac 	bl	8002940 <__errno>
 80023e8:	2413      	movs	r4, #19
 80023ea:	4606      	mov	r6, r0
 80023ec:	2700      	movs	r7, #0
 80023ee:	4620      	mov	r0, r4
 80023f0:	4639      	mov	r1, r7
 80023f2:	beab      	bkpt	0x00ab
 80023f4:	4604      	mov	r4, r0
 80023f6:	6034      	str	r4, [r6, #0]
 80023f8:	4628      	mov	r0, r5
 80023fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023fc <error>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	4605      	mov	r5, r0
 8002400:	f000 fa9e 	bl	8002940 <__errno>
 8002404:	2413      	movs	r4, #19
 8002406:	4606      	mov	r6, r0
 8002408:	2700      	movs	r7, #0
 800240a:	4620      	mov	r0, r4
 800240c:	4639      	mov	r1, r7
 800240e:	beab      	bkpt	0x00ab
 8002410:	4604      	mov	r4, r0
 8002412:	6034      	str	r4, [r6, #0]
 8002414:	4628      	mov	r0, r5
 8002416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002418 <_swiread>:
 8002418:	b530      	push	{r4, r5, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002420:	9203      	str	r2, [sp, #12]
 8002422:	2406      	movs	r4, #6
 8002424:	ad01      	add	r5, sp, #4
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	beab      	bkpt	0x00ab
 800242c:	4604      	mov	r4, r0
 800242e:	4620      	mov	r0, r4
 8002430:	f7ff ffd4 	bl	80023dc <checkerror>
 8002434:	b005      	add	sp, #20
 8002436:	bd30      	pop	{r4, r5, pc}

08002438 <_read>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	460e      	mov	r6, r1
 800243c:	4615      	mov	r5, r2
 800243e:	f7ff ffb3 	bl	80023a8 <findslot>
 8002442:	4604      	mov	r4, r0
 8002444:	b930      	cbnz	r0, 8002454 <_read+0x1c>
 8002446:	f000 fa7b 	bl	8002940 <__errno>
 800244a:	2309      	movs	r3, #9
 800244c:	6003      	str	r3, [r0, #0]
 800244e:	f04f 30ff 	mov.w	r0, #4294967295
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	462a      	mov	r2, r5
 8002456:	4631      	mov	r1, r6
 8002458:	6800      	ldr	r0, [r0, #0]
 800245a:	f7ff ffdd 	bl	8002418 <_swiread>
 800245e:	1c43      	adds	r3, r0, #1
 8002460:	bf1f      	itttt	ne
 8002462:	6863      	ldrne	r3, [r4, #4]
 8002464:	1a28      	subne	r0, r5, r0
 8002466:	181b      	addne	r3, r3, r0
 8002468:	6063      	strne	r3, [r4, #4]
 800246a:	e7f2      	b.n	8002452 <_read+0x1a>

0800246c <_swilseek>:
 800246c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800246e:	460c      	mov	r4, r1
 8002470:	4616      	mov	r6, r2
 8002472:	f7ff ff99 	bl	80023a8 <findslot>
 8002476:	4605      	mov	r5, r0
 8002478:	b940      	cbnz	r0, 800248c <_swilseek+0x20>
 800247a:	f000 fa61 	bl	8002940 <__errno>
 800247e:	2309      	movs	r3, #9
 8002480:	6003      	str	r3, [r0, #0]
 8002482:	f04f 34ff 	mov.w	r4, #4294967295
 8002486:	4620      	mov	r0, r4
 8002488:	b003      	add	sp, #12
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248c:	2e02      	cmp	r6, #2
 800248e:	d903      	bls.n	8002498 <_swilseek+0x2c>
 8002490:	f000 fa56 	bl	8002940 <__errno>
 8002494:	2316      	movs	r3, #22
 8002496:	e7f3      	b.n	8002480 <_swilseek+0x14>
 8002498:	2e01      	cmp	r6, #1
 800249a:	d112      	bne.n	80024c2 <_swilseek+0x56>
 800249c:	6843      	ldr	r3, [r0, #4]
 800249e:	18e4      	adds	r4, r4, r3
 80024a0:	d4f6      	bmi.n	8002490 <_swilseek+0x24>
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	260a      	movs	r6, #10
 80024a6:	e9cd 3400 	strd	r3, r4, [sp]
 80024aa:	466f      	mov	r7, sp
 80024ac:	4630      	mov	r0, r6
 80024ae:	4639      	mov	r1, r7
 80024b0:	beab      	bkpt	0x00ab
 80024b2:	4606      	mov	r6, r0
 80024b4:	4630      	mov	r0, r6
 80024b6:	f7ff ff91 	bl	80023dc <checkerror>
 80024ba:	2800      	cmp	r0, #0
 80024bc:	dbe1      	blt.n	8002482 <_swilseek+0x16>
 80024be:	606c      	str	r4, [r5, #4]
 80024c0:	e7e1      	b.n	8002486 <_swilseek+0x1a>
 80024c2:	2e02      	cmp	r6, #2
 80024c4:	d1ed      	bne.n	80024a2 <_swilseek+0x36>
 80024c6:	af02      	add	r7, sp, #8
 80024c8:	6803      	ldr	r3, [r0, #0]
 80024ca:	f847 3d08 	str.w	r3, [r7, #-8]!
 80024ce:	260c      	movs	r6, #12
 80024d0:	4630      	mov	r0, r6
 80024d2:	4639      	mov	r1, r7
 80024d4:	beab      	bkpt	0x00ab
 80024d6:	4606      	mov	r6, r0
 80024d8:	4630      	mov	r0, r6
 80024da:	f7ff ff7f 	bl	80023dc <checkerror>
 80024de:	1c43      	adds	r3, r0, #1
 80024e0:	d0cf      	beq.n	8002482 <_swilseek+0x16>
 80024e2:	4404      	add	r4, r0
 80024e4:	e7dd      	b.n	80024a2 <_swilseek+0x36>

080024e6 <_lseek>:
 80024e6:	f7ff bfc1 	b.w	800246c <_swilseek>

080024ea <_swiwrite>:
 80024ea:	b530      	push	{r4, r5, lr}
 80024ec:	b085      	sub	sp, #20
 80024ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80024f2:	9203      	str	r2, [sp, #12]
 80024f4:	2405      	movs	r4, #5
 80024f6:	ad01      	add	r5, sp, #4
 80024f8:	4620      	mov	r0, r4
 80024fa:	4629      	mov	r1, r5
 80024fc:	beab      	bkpt	0x00ab
 80024fe:	4604      	mov	r4, r0
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ff6b 	bl	80023dc <checkerror>
 8002506:	b005      	add	sp, #20
 8002508:	bd30      	pop	{r4, r5, pc}

0800250a <_write>:
 800250a:	b570      	push	{r4, r5, r6, lr}
 800250c:	460e      	mov	r6, r1
 800250e:	4615      	mov	r5, r2
 8002510:	f7ff ff4a 	bl	80023a8 <findslot>
 8002514:	4604      	mov	r4, r0
 8002516:	b930      	cbnz	r0, 8002526 <_write+0x1c>
 8002518:	f000 fa12 	bl	8002940 <__errno>
 800251c:	2309      	movs	r3, #9
 800251e:	6003      	str	r3, [r0, #0]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	bd70      	pop	{r4, r5, r6, pc}
 8002526:	462a      	mov	r2, r5
 8002528:	4631      	mov	r1, r6
 800252a:	6800      	ldr	r0, [r0, #0]
 800252c:	f7ff ffdd 	bl	80024ea <_swiwrite>
 8002530:	1e02      	subs	r2, r0, #0
 8002532:	dbf5      	blt.n	8002520 <_write+0x16>
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	1aa8      	subs	r0, r5, r2
 8002538:	4403      	add	r3, r0
 800253a:	42aa      	cmp	r2, r5
 800253c:	6063      	str	r3, [r4, #4]
 800253e:	d1f1      	bne.n	8002524 <_write+0x1a>
 8002540:	2000      	movs	r0, #0
 8002542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002546:	f7ff bf59 	b.w	80023fc <error>

0800254a <_swiclose>:
 800254a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800254c:	ad02      	add	r5, sp, #8
 800254e:	2402      	movs	r4, #2
 8002550:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002554:	4620      	mov	r0, r4
 8002556:	4629      	mov	r1, r5
 8002558:	beab      	bkpt	0x00ab
 800255a:	4604      	mov	r4, r0
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff ff3d 	bl	80023dc <checkerror>
 8002562:	b003      	add	sp, #12
 8002564:	bd30      	pop	{r4, r5, pc}
	...

08002568 <_close>:
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4605      	mov	r5, r0
 800256c:	f7ff ff1c 	bl	80023a8 <findslot>
 8002570:	4604      	mov	r4, r0
 8002572:	b930      	cbnz	r0, 8002582 <_close+0x1a>
 8002574:	f000 f9e4 	bl	8002940 <__errno>
 8002578:	2309      	movs	r3, #9
 800257a:	6003      	str	r3, [r0, #0]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	bd38      	pop	{r3, r4, r5, pc}
 8002582:	3d01      	subs	r5, #1
 8002584:	2d01      	cmp	r5, #1
 8002586:	d809      	bhi.n	800259c <_close+0x34>
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <_close+0x48>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	429a      	cmp	r2, r3
 8002590:	d104      	bne.n	800259c <_close+0x34>
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	6003      	str	r3, [r0, #0]
 8002598:	2000      	movs	r0, #0
 800259a:	e7f1      	b.n	8002580 <_close+0x18>
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	f7ff ffd4 	bl	800254a <_swiclose>
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d1ec      	bne.n	8002580 <_close+0x18>
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	6023      	str	r3, [r4, #0]
 80025ac:	e7e8      	b.n	8002580 <_close+0x18>
 80025ae:	bf00      	nop
 80025b0:	200000c8 	.word	0x200000c8

080025b4 <_sbrk>:
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <_sbrk+0x38>)
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4602      	mov	r2, r0
 80025bc:	b909      	cbnz	r1, 80025c2 <_sbrk+0xe>
 80025be:	490c      	ldr	r1, [pc, #48]	; (80025f0 <_sbrk+0x3c>)
 80025c0:	6019      	str	r1, [r3, #0]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	4669      	mov	r1, sp
 80025c6:	4402      	add	r2, r0
 80025c8:	428a      	cmp	r2, r1
 80025ca:	d806      	bhi.n	80025da <_sbrk+0x26>
 80025cc:	4909      	ldr	r1, [pc, #36]	; (80025f4 <_sbrk+0x40>)
 80025ce:	4c0a      	ldr	r4, [pc, #40]	; (80025f8 <_sbrk+0x44>)
 80025d0:	6809      	ldr	r1, [r1, #0]
 80025d2:	42a1      	cmp	r1, r4
 80025d4:	d008      	beq.n	80025e8 <_sbrk+0x34>
 80025d6:	428a      	cmp	r2, r1
 80025d8:	d906      	bls.n	80025e8 <_sbrk+0x34>
 80025da:	f000 f9b1 	bl	8002940 <__errno>
 80025de:	230c      	movs	r3, #12
 80025e0:	6003      	str	r3, [r0, #0]
 80025e2:	f04f 30ff 	mov.w	r0, #4294967295
 80025e6:	bd10      	pop	{r4, pc}
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e7fc      	b.n	80025e6 <_sbrk+0x32>
 80025ec:	200000b8 	.word	0x200000b8
 80025f0:	200001b8 	.word	0x200001b8
 80025f4:	20000084 	.word	0x20000084
 80025f8:	cafedead 	.word	0xcafedead

080025fc <_swistat>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	460c      	mov	r4, r1
 8002600:	f7ff fed2 	bl	80023a8 <findslot>
 8002604:	4606      	mov	r6, r0
 8002606:	b930      	cbnz	r0, 8002616 <_swistat+0x1a>
 8002608:	f000 f99a 	bl	8002940 <__errno>
 800260c:	2309      	movs	r3, #9
 800260e:	6003      	str	r3, [r0, #0]
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	bd70      	pop	{r4, r5, r6, pc}
 8002616:	6863      	ldr	r3, [r4, #4]
 8002618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800261c:	6063      	str	r3, [r4, #4]
 800261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002622:	6463      	str	r3, [r4, #68]	; 0x44
 8002624:	250c      	movs	r5, #12
 8002626:	4628      	mov	r0, r5
 8002628:	4631      	mov	r1, r6
 800262a:	beab      	bkpt	0x00ab
 800262c:	4605      	mov	r5, r0
 800262e:	4628      	mov	r0, r5
 8002630:	f7ff fed4 	bl	80023dc <checkerror>
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	bf1c      	itt	ne
 8002638:	6120      	strne	r0, [r4, #16]
 800263a:	2000      	movne	r0, #0
 800263c:	e7ea      	b.n	8002614 <_swistat+0x18>

0800263e <_fstat>:
 800263e:	460b      	mov	r3, r1
 8002640:	b510      	push	{r4, lr}
 8002642:	2100      	movs	r1, #0
 8002644:	4604      	mov	r4, r0
 8002646:	2258      	movs	r2, #88	; 0x58
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe ff5d 	bl	8001508 <memset>
 800264e:	4601      	mov	r1, r0
 8002650:	4620      	mov	r0, r4
 8002652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002656:	f7ff bfd1 	b.w	80025fc <_swistat>

0800265a <_stat>:
 800265a:	b538      	push	{r3, r4, r5, lr}
 800265c:	460d      	mov	r5, r1
 800265e:	4604      	mov	r4, r0
 8002660:	2258      	movs	r2, #88	; 0x58
 8002662:	2100      	movs	r1, #0
 8002664:	4628      	mov	r0, r5
 8002666:	f7fe ff4f 	bl	8001508 <memset>
 800266a:	4620      	mov	r0, r4
 800266c:	2100      	movs	r1, #0
 800266e:	f000 f811 	bl	8002694 <_swiopen>
 8002672:	1c43      	adds	r3, r0, #1
 8002674:	4604      	mov	r4, r0
 8002676:	d00b      	beq.n	8002690 <_stat+0x36>
 8002678:	686b      	ldr	r3, [r5, #4]
 800267a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800267e:	606b      	str	r3, [r5, #4]
 8002680:	4629      	mov	r1, r5
 8002682:	f7ff ffbb 	bl	80025fc <_swistat>
 8002686:	4605      	mov	r5, r0
 8002688:	4620      	mov	r0, r4
 800268a:	f7ff ff6d 	bl	8002568 <_close>
 800268e:	462c      	mov	r4, r5
 8002690:	4620      	mov	r0, r4
 8002692:	bd38      	pop	{r3, r4, r5, pc}

08002694 <_swiopen>:
 8002694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <_swiopen+0xb4>)
 800269a:	b096      	sub	sp, #88	; 0x58
 800269c:	4682      	mov	sl, r0
 800269e:	460e      	mov	r6, r1
 80026a0:	2500      	movs	r5, #0
 80026a2:	4698      	mov	r8, r3
 80026a4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80026a8:	1c61      	adds	r1, r4, #1
 80026aa:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80026ae:	d036      	beq.n	800271e <_swiopen+0x8a>
 80026b0:	3501      	adds	r5, #1
 80026b2:	2d14      	cmp	r5, #20
 80026b4:	d1f6      	bne.n	80026a4 <_swiopen+0x10>
 80026b6:	f000 f943 	bl	8002940 <__errno>
 80026ba:	2318      	movs	r3, #24
 80026bc:	6003      	str	r3, [r0, #0]
 80026be:	f04f 34ff 	mov.w	r4, #4294967295
 80026c2:	e03c      	b.n	800273e <_swiopen+0xaa>
 80026c4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80026c8:	f240 6301 	movw	r3, #1537	; 0x601
 80026cc:	07b2      	lsls	r2, r6, #30
 80026ce:	bf48      	it	mi
 80026d0:	f044 0402 	orrmi.w	r4, r4, #2
 80026d4:	421e      	tst	r6, r3
 80026d6:	bf18      	it	ne
 80026d8:	f044 0404 	orrne.w	r4, r4, #4
 80026dc:	0733      	lsls	r3, r6, #28
 80026de:	bf48      	it	mi
 80026e0:	f024 0404 	bicmi.w	r4, r4, #4
 80026e4:	4650      	mov	r0, sl
 80026e6:	bf48      	it	mi
 80026e8:	f044 0408 	orrmi.w	r4, r4, #8
 80026ec:	f8cd a000 	str.w	sl, [sp]
 80026f0:	f7fd fdde 	bl	80002b0 <strlen>
 80026f4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80026f8:	2401      	movs	r4, #1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4649      	mov	r1, r9
 80026fe:	beab      	bkpt	0x00ab
 8002700:	4604      	mov	r4, r0
 8002702:	2c00      	cmp	r4, #0
 8002704:	db06      	blt.n	8002714 <_swiopen+0x80>
 8002706:	4447      	add	r7, r8
 8002708:	2300      	movs	r3, #0
 800270a:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	462c      	mov	r4, r5
 8002712:	e014      	b.n	800273e <_swiopen+0xaa>
 8002714:	4620      	mov	r0, r4
 8002716:	f7ff fe71 	bl	80023fc <error>
 800271a:	4604      	mov	r4, r0
 800271c:	e00f      	b.n	800273e <_swiopen+0xaa>
 800271e:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002722:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002726:	46e9      	mov	r9, sp
 8002728:	d1cc      	bne.n	80026c4 <_swiopen+0x30>
 800272a:	4649      	mov	r1, r9
 800272c:	4650      	mov	r0, sl
 800272e:	f7ff ff94 	bl	800265a <_stat>
 8002732:	3001      	adds	r0, #1
 8002734:	d0c6      	beq.n	80026c4 <_swiopen+0x30>
 8002736:	f000 f903 	bl	8002940 <__errno>
 800273a:	2311      	movs	r3, #17
 800273c:	6003      	str	r3, [r0, #0]
 800273e:	4620      	mov	r0, r4
 8002740:	b016      	add	sp, #88	; 0x58
 8002742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002746:	bf00      	nop
 8002748:	200000c8 	.word	0x200000c8

0800274c <_get_semihosting_exts>:
 800274c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002750:	4607      	mov	r7, r0
 8002752:	4688      	mov	r8, r1
 8002754:	4829      	ldr	r0, [pc, #164]	; (80027fc <_get_semihosting_exts+0xb0>)
 8002756:	2100      	movs	r1, #0
 8002758:	4615      	mov	r5, r2
 800275a:	f7ff ff9b 	bl	8002694 <_swiopen>
 800275e:	462a      	mov	r2, r5
 8002760:	4604      	mov	r4, r0
 8002762:	2100      	movs	r1, #0
 8002764:	4638      	mov	r0, r7
 8002766:	f7fe fecf 	bl	8001508 <memset>
 800276a:	1c63      	adds	r3, r4, #1
 800276c:	d015      	beq.n	800279a <_get_semihosting_exts+0x4e>
 800276e:	4620      	mov	r0, r4
 8002770:	f7ff fe1a 	bl	80023a8 <findslot>
 8002774:	260c      	movs	r6, #12
 8002776:	4681      	mov	r9, r0
 8002778:	4630      	mov	r0, r6
 800277a:	4649      	mov	r1, r9
 800277c:	beab      	bkpt	0x00ab
 800277e:	4606      	mov	r6, r0
 8002780:	4630      	mov	r0, r6
 8002782:	f7ff fe2b 	bl	80023dc <checkerror>
 8002786:	2803      	cmp	r0, #3
 8002788:	dd02      	ble.n	8002790 <_get_semihosting_exts+0x44>
 800278a:	3803      	subs	r0, #3
 800278c:	42a8      	cmp	r0, r5
 800278e:	dc08      	bgt.n	80027a2 <_get_semihosting_exts+0x56>
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff fee9 	bl	8002568 <_close>
 8002796:	f04f 34ff 	mov.w	r4, #4294967295
 800279a:	4620      	mov	r0, r4
 800279c:	b003      	add	sp, #12
 800279e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027a2:	2204      	movs	r2, #4
 80027a4:	eb0d 0102 	add.w	r1, sp, r2
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff fe45 	bl	8002438 <_read>
 80027ae:	2803      	cmp	r0, #3
 80027b0:	ddee      	ble.n	8002790 <_get_semihosting_exts+0x44>
 80027b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027b6:	2b53      	cmp	r3, #83	; 0x53
 80027b8:	d1ea      	bne.n	8002790 <_get_semihosting_exts+0x44>
 80027ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80027be:	2b48      	cmp	r3, #72	; 0x48
 80027c0:	d1e6      	bne.n	8002790 <_get_semihosting_exts+0x44>
 80027c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027c6:	2b46      	cmp	r3, #70	; 0x46
 80027c8:	d1e2      	bne.n	8002790 <_get_semihosting_exts+0x44>
 80027ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027ce:	2b42      	cmp	r3, #66	; 0x42
 80027d0:	d1de      	bne.n	8002790 <_get_semihosting_exts+0x44>
 80027d2:	2201      	movs	r2, #1
 80027d4:	4641      	mov	r1, r8
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fe48 	bl	800246c <_swilseek>
 80027dc:	2800      	cmp	r0, #0
 80027de:	dbd7      	blt.n	8002790 <_get_semihosting_exts+0x44>
 80027e0:	462a      	mov	r2, r5
 80027e2:	4639      	mov	r1, r7
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fe27 	bl	8002438 <_read>
 80027ea:	4605      	mov	r5, r0
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff febb 	bl	8002568 <_close>
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7ff fdf2 	bl	80023dc <checkerror>
 80027f8:	4604      	mov	r4, r0
 80027fa:	e7ce      	b.n	800279a <_get_semihosting_exts+0x4e>
 80027fc:	08002a53 	.word	0x08002a53

08002800 <initialise_semihosting_exts>:
 8002800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002802:	4d0a      	ldr	r5, [pc, #40]	; (800282c <initialise_semihosting_exts+0x2c>)
 8002804:	4c0a      	ldr	r4, [pc, #40]	; (8002830 <initialise_semihosting_exts+0x30>)
 8002806:	2100      	movs	r1, #0
 8002808:	2201      	movs	r2, #1
 800280a:	a801      	add	r0, sp, #4
 800280c:	6029      	str	r1, [r5, #0]
 800280e:	6022      	str	r2, [r4, #0]
 8002810:	f7ff ff9c 	bl	800274c <_get_semihosting_exts>
 8002814:	2800      	cmp	r0, #0
 8002816:	dd07      	ble.n	8002828 <initialise_semihosting_exts+0x28>
 8002818:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800281c:	f003 0201 	and.w	r2, r3, #1
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	602a      	str	r2, [r5, #0]
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	b003      	add	sp, #12
 800282a:	bd30      	pop	{r4, r5, pc}
 800282c:	20000088 	.word	0x20000088
 8002830:	2000008c 	.word	0x2000008c

08002834 <_has_ext_stdout_stderr>:
 8002834:	b510      	push	{r4, lr}
 8002836:	4c04      	ldr	r4, [pc, #16]	; (8002848 <_has_ext_stdout_stderr+0x14>)
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	2a00      	cmp	r2, #0
 800283c:	da01      	bge.n	8002842 <_has_ext_stdout_stderr+0xe>
 800283e:	f7ff ffdf 	bl	8002800 <initialise_semihosting_exts>
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	bd10      	pop	{r4, pc}
 8002846:	bf00      	nop
 8002848:	2000008c 	.word	0x2000008c

0800284c <initialise_monitor_handles>:
 800284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002850:	b085      	sub	sp, #20
 8002852:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002904 <initialise_monitor_handles+0xb8>
 8002856:	f8cd 9004 	str.w	r9, [sp, #4]
 800285a:	2303      	movs	r3, #3
 800285c:	2400      	movs	r4, #0
 800285e:	9303      	str	r3, [sp, #12]
 8002860:	f10d 0804 	add.w	r8, sp, #4
 8002864:	9402      	str	r4, [sp, #8]
 8002866:	2501      	movs	r5, #1
 8002868:	4628      	mov	r0, r5
 800286a:	4641      	mov	r1, r8
 800286c:	beab      	bkpt	0x00ab
 800286e:	4605      	mov	r5, r0
 8002870:	4e20      	ldr	r6, [pc, #128]	; (80028f4 <initialise_monitor_handles+0xa8>)
 8002872:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <initialise_monitor_handles+0xac>)
 8002874:	6035      	str	r5, [r6, #0]
 8002876:	4623      	mov	r3, r4
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	4614      	mov	r4, r2
 800287e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002882:	3301      	adds	r3, #1
 8002884:	2b14      	cmp	r3, #20
 8002886:	d1fa      	bne.n	800287e <initialise_monitor_handles+0x32>
 8002888:	f7ff ffd4 	bl	8002834 <_has_ext_stdout_stderr>
 800288c:	4d1b      	ldr	r5, [pc, #108]	; (80028fc <initialise_monitor_handles+0xb0>)
 800288e:	b1d0      	cbz	r0, 80028c6 <initialise_monitor_handles+0x7a>
 8002890:	f04f 0a03 	mov.w	sl, #3
 8002894:	2304      	movs	r3, #4
 8002896:	f8cd 9004 	str.w	r9, [sp, #4]
 800289a:	2701      	movs	r7, #1
 800289c:	f8cd a00c 	str.w	sl, [sp, #12]
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	4638      	mov	r0, r7
 80028a4:	4641      	mov	r1, r8
 80028a6:	beab      	bkpt	0x00ab
 80028a8:	4683      	mov	fp, r0
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <initialise_monitor_handles+0xb4>)
 80028ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80028b0:	f8c3 b000 	str.w	fp, [r3]
 80028b4:	2308      	movs	r3, #8
 80028b6:	f8cd a00c 	str.w	sl, [sp, #12]
 80028ba:	9302      	str	r3, [sp, #8]
 80028bc:	4638      	mov	r0, r7
 80028be:	4641      	mov	r1, r8
 80028c0:	beab      	bkpt	0x00ab
 80028c2:	4607      	mov	r7, r0
 80028c4:	602f      	str	r7, [r5, #0]
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	bf02      	ittt	eq
 80028cc:	4b0c      	ldreq	r3, [pc, #48]	; (8002900 <initialise_monitor_handles+0xb4>)
 80028ce:	681b      	ldreq	r3, [r3, #0]
 80028d0:	602b      	streq	r3, [r5, #0]
 80028d2:	6833      	ldr	r3, [r6, #0]
 80028d4:	6023      	str	r3, [r4, #0]
 80028d6:	2600      	movs	r6, #0
 80028d8:	6066      	str	r6, [r4, #4]
 80028da:	f7ff ffab 	bl	8002834 <_has_ext_stdout_stderr>
 80028de:	b130      	cbz	r0, 80028ee <initialise_monitor_handles+0xa2>
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <initialise_monitor_handles+0xb4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80028ee:	b005      	add	sp, #20
 80028f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f4:	200000c0 	.word	0x200000c0
 80028f8:	200000c8 	.word	0x200000c8
 80028fc:	200000bc 	.word	0x200000bc
 8002900:	200000c4 	.word	0x200000c4
 8002904:	08002a69 	.word	0x08002a69

08002908 <_isatty>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	f7ff fd4d 	bl	80023a8 <findslot>
 800290e:	2509      	movs	r5, #9
 8002910:	4604      	mov	r4, r0
 8002912:	b920      	cbnz	r0, 800291e <_isatty+0x16>
 8002914:	f000 f814 	bl	8002940 <__errno>
 8002918:	6005      	str	r5, [r0, #0]
 800291a:	4620      	mov	r0, r4
 800291c:	bd70      	pop	{r4, r5, r6, pc}
 800291e:	4628      	mov	r0, r5
 8002920:	4621      	mov	r1, r4
 8002922:	beab      	bkpt	0x00ab
 8002924:	4604      	mov	r4, r0
 8002926:	2c01      	cmp	r4, #1
 8002928:	d0f7      	beq.n	800291a <_isatty+0x12>
 800292a:	f000 f809 	bl	8002940 <__errno>
 800292e:	2400      	movs	r4, #0
 8002930:	4606      	mov	r6, r0
 8002932:	2513      	movs	r5, #19
 8002934:	4628      	mov	r0, r5
 8002936:	4621      	mov	r1, r4
 8002938:	beab      	bkpt	0x00ab
 800293a:	4605      	mov	r5, r0
 800293c:	6035      	str	r5, [r6, #0]
 800293e:	e7ec      	b.n	800291a <_isatty+0x12>

08002940 <__errno>:
 8002940:	4b01      	ldr	r3, [pc, #4]	; (8002948 <__errno+0x8>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000020 	.word	0x20000020

0800294c <_init>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr

08002958 <_fini>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr
