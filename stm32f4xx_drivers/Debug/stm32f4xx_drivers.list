
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c2c  08000c2c  00010c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c38  08000c38  00010c40  2**0
                  CONTENTS
  4 .ARM          00000000  08000c38  08000c38  00010c40  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c38  08000c40  00010c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c40  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c40  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c40  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018ae  00000000  00000000  00010c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000464  00000000  00000000  0001251e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00012988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00012ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001f89  00000000  00000000  00012bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000011bf  00000000  00000000  00014b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008dfa  00000000  00000000  00015d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001eb02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000424  00000000  00000000  0001eb80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000c14 	.word	0x08000c14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000c14 	.word	0x08000c14

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:
#include "stm32f446E.h"
#include  "stm32f446xx_gpio_driver.h"
#include "string.h"

void delay(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000/2 ; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <delay+0x28>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	0003d08f 	.word	0x0003d08f

08000240 <SPI2_GPIO_Init>:
//PB14 --> MISO
//PB13 --> SCLK
//PB12 --> NSS
// ALT function mode: 5
void SPI2_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx=GPIOB;
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <SPI2_GPIO_Init+0x4c>)
 8000248:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 800024a:	2302      	movs	r3, #2
 800024c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFuncMode= 5;
 800024e:	2305      	movs	r3, #5
 8000250:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 8000252:	2300      	movs	r3, #0
 8000254:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_PU;
 8000256:	2301      	movs	r3, #1
 8000258:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]

	//sclk pin
	//TO DO: use different pins
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 800025e:	230d      	movs	r3, #13
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fafb 	bl	8000860 <GPIO_Init>
	//TO DO: use different pins
	//MOSI pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_15;
 800026a:	230f      	movs	r3, #15
 800026c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 faf5 	bl	8000860 <GPIO_Init>
	//MISO pin
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_14;
	//GPIO_Init(&SPIPins);
	//NSS pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_12;
 8000276:	230c      	movs	r3, #12
 8000278:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 faef 	bl	8000860 <GPIO_Init>



}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40020400 	.word	0x40020400

08000290 <SPI2_Init>:

//init SPI2 peripheral
void SPI2_Init(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx=SPI2;
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <SPI2_Init+0x38>)
 8000298:	607b      	str	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_Busconfig=SPI_BUS_CONFIG_FD;
 800029a:	2301      	movs	r3, #1
 800029c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_Devicemode=SPI_DEVICE_MASTER;
 800029e:	2301      	movs	r3, #1
 80002a0:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_Speed=SPI_SCLK_SPEED_DIV8;//generates 2 Mhz
 80002a2:	2302      	movs	r3, #2
 80002a4:	73bb      	strb	r3, [r7, #14]
	SPI2handle.SPI_Config.SPI_DFF=SPI_DFF_8BITS;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_Config.SPI_CPOL=SPI_CPOL_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPI_Config.SPI_CPHA=SPI_CPPHA_LOW;
 80002ae:	2300      	movs	r3, #0
 80002b0:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPI_Config.SPI_SSM=SPI_SSM_DI;//disable SW slave management. Will use HW for this exercise
 80002b2:	2300      	movs	r3, #0
 80002b4:	737b      	strb	r3, [r7, #13]
	SPI_Init(&SPI2handle);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f907 	bl	80004cc <SPI_Init>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40003800 	.word	0x40003800

080002cc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//button configuration
	GpioBtn.pGPIOx =GPIOC;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <GPIO_ButtonInit+0x2c>)
 80002d4:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 80002d6:	230d      	movs	r3, #13
 80002d8:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IN;
 80002da:	2300      	movs	r3, #0
 80002dc:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fab9 	bl	8000860 <GPIO_Init>



}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020800 	.word	0x40020800

080002fc <main>:

int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0




	char user_data[] = "hello world";//string length within 255 characters since using 1 byte
 8000302:	4a22      	ldr	r2, [pc, #136]	; (800038c <main+0x90>)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	ca07      	ldmia	r2, {r0, r1, r2}
 8000308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_ButtonInit();
 800030c:	f7ff ffde 	bl	80002cc <GPIO_ButtonInit>
	SPI2_GPIO_Init();
 8000310:	f7ff ff96 	bl	8000240 <SPI2_GPIO_Init>
	SPI2_Init();
 8000314:	f7ff ffbc 	bl	8000290 <SPI2_Init>
	 * NSS output enable (SSM=0,SSOE = 1): this configuration is only used when the
	 * MCU is set as master. The NSS pin is managed by the hardware. The NSS signal
	 * is driven low as soon as the SPI is enabled in master mode (SPE=1), and is kept
	 * low until the SPI is disabled (SPE =0).
	 */
	SPI_SSIConfig(SPI2, DISABLE);
 8000318:	2100      	movs	r1, #0
 800031a:	481d      	ldr	r0, [pc, #116]	; (8000390 <main+0x94>)
 800031c:	f000 f94d 	bl	80005ba <SPI_SSIConfig>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	481b      	ldr	r0, [pc, #108]	; (8000390 <main+0x94>)
 8000324:	f000 f965 	bl	80005f2 <SPI_SSOEConfig>

	while(1)
	{
		//send spi when reading LOW from button
		while (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13)==1);
 8000328:	bf00      	nop
 800032a:	210d      	movs	r1, #13
 800032c:	4819      	ldr	r0, [pc, #100]	; (8000394 <main+0x98>)
 800032e:	f000 fc37 	bl	8000ba0 <GPIO_ReadFromInputPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b01      	cmp	r3, #1
 8000336:	d0f8      	beq.n	800032a <main+0x2e>
		delay();//debounce prevention
 8000338:	f7ff ff6c 	bl	8000214 <delay>

		//enable SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800033c:	2101      	movs	r1, #1
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <main+0x94>)
 8000340:	f000 f91f 	bl	8000582 <SPI_PeripheralControl>
		//first send #of bytes information for slave device to expect
		uint8_t dataLen =  strlen(user_data);
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff5c 	bl	8000204 <strlen>
 800034c:	4603      	mov	r3, r0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &dataLen,  1);
 8000352:	1cfb      	adds	r3, r7, #3
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <main+0x94>)
 800035a:	f000 f97a 	bl	8000652 <SPI_SendData>
		//send data
		SPI_SendData(SPI2, (uint8_t *)user_data,  strlen(user_data));
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff4f 	bl	8000204 <strlen>
 8000366:	4602      	mov	r2, r0
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4808      	ldr	r0, [pc, #32]	; (8000390 <main+0x94>)
 800036e:	f000 f970 	bl	8000652 <SPI_SendData>
		//check if SPI is still sending data
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000372:	bf00      	nop
 8000374:	2180      	movs	r1, #128	; 0x80
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <main+0x94>)
 8000378:	f000 f957 	bl	800062a <SPI_GetFlagStatus>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f8      	bne.n	8000374 <main+0x78>
		//disable peripheral when done
		SPI_PeripheralControl(SPI2,DISABLE);
 8000382:	2100      	movs	r1, #0
 8000384:	4802      	ldr	r0, [pc, #8]	; (8000390 <main+0x94>)
 8000386:	f000 f8fc 	bl	8000582 <SPI_PeripheralControl>
	{
 800038a:	e7cd      	b.n	8000328 <main+0x2c>
 800038c:	08000c2c 	.word	0x08000c2c
 8000390:	40003800 	.word	0x40003800
 8000394:	40020800 	.word	0x40020800

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490e      	ldr	r1, [pc, #56]	; (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0b      	ldr	r4, [pc, #44]	; (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003c2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 fc01 	bl	8000bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ff97 	bl	80002fc <main>

080003ce <LoopForever>:

LoopForever:
    b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003dc:	08000c40 	.word	0x08000c40
  ldr r2, =_sbss
 80003e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e4:	2000001c 	.word	0x2000001c

080003e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <SPI_PeriClockControl>:
* ReturnVal:	none
* Notes:		none
*/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d12b      	bne.n	8000456 <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a2d      	ldr	r2, [pc, #180]	; (80004b8 <SPI_PeriClockControl+0xcc>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <SPI_PeriClockControl+0x28>
		{
			SPI1_PERICLK_EN();
 8000406:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800040a:	4a2c      	ldr	r2, [pc, #176]	; (80004bc <SPI_PeriClockControl+0xd0>)
 800040c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000410:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI4_PERICLK_DI();
		}

	}
}
 8000412:	e04b      	b.n	80004ac <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a2a      	ldr	r2, [pc, #168]	; (80004c0 <SPI_PeriClockControl+0xd4>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <SPI_PeriClockControl+0x3e>
			SPI2_PERICLK_EN();
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <SPI_PeriClockControl+0xd0>)
 800041e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000420:	4a26      	ldr	r2, [pc, #152]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000426:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000428:	e040      	b.n	80004ac <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a25      	ldr	r2, [pc, #148]	; (80004c4 <SPI_PeriClockControl+0xd8>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <SPI_PeriClockControl+0x54>
			SPI3_PERICLK_EN();
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800043c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800043e:	e035      	b.n	80004ac <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a21      	ldr	r2, [pc, #132]	; (80004c8 <SPI_PeriClockControl+0xdc>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d131      	bne.n	80004ac <SPI_PeriClockControl+0xc0>
			SPI4_PERICLK_EN();
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <SPI_PeriClockControl+0xd0>)
 800044a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <SPI_PeriClockControl+0xd0>)
 800044e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000452:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000454:	e02a      	b.n	80004ac <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <SPI_PeriClockControl+0xcc>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <SPI_PeriClockControl+0x80>
			SPI1_PERICLK_DI();
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000462:	4a16      	ldr	r2, [pc, #88]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000468:	6453      	str	r3, [r2, #68]	; 0x44
}
 800046a:	e01f      	b.n	80004ac <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <SPI_PeriClockControl+0xd4>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <SPI_PeriClockControl+0x96>
			SPI2_PERICLK_DI();
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <SPI_PeriClockControl+0xd0>)
 800047a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800047e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000480:	e014      	b.n	80004ac <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <SPI_PeriClockControl+0xd8>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <SPI_PeriClockControl+0xac>
			SPI3_PERICLK_DI();
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <SPI_PeriClockControl+0xd0>)
 800048c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <SPI_PeriClockControl+0xd0>)
 8000490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000494:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000496:	e009      	b.n	80004ac <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <SPI_PeriClockControl+0xdc>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d105      	bne.n	80004ac <SPI_PeriClockControl+0xc0>
			SPI4_PERICLK_DI();
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <SPI_PeriClockControl+0xd0>)
 80004a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <SPI_PeriClockControl+0xd0>)
 80004a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004aa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40013000 	.word	0x40013000
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40003800 	.word	0x40003800
 80004c4:	40003c00 	.word	0x40003c00
 80004c8:	40013400 	.word	0x40013400

080004cc <SPI_Init>:
* Parameter1:	handle of the desired SPI peripheral
* ReturnVal:	none
* Notes:		none
*/
void SPI_Init(SPI_Handle_t *SPIHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	//enable peripheral clock
	SPI_PeriClockControl(SPIHandle->pSPIx, ENABLE);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2101      	movs	r1, #1
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff86 	bl	80003ec <SPI_PeriClockControl>


	uint32_t tempreg=0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
	//1. device mode
	tempreg |= SPIHandle->SPI_Config.SPI_Devicemode<<SPI_CR1_MSTR;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	461a      	mov	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4313      	orrs	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
	//2. Busconfig
	if(SPIHandle->SPI_Config.SPI_Busconfig==SPI_BUS_CONFIG_FD)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d104      	bne.n	8000504 <SPI_Init+0x38>
	{
		//clear bidi mode/
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e014      	b.n	800052e <SPI_Init+0x62>

	}
	else if(SPIHandle->SPI_Config.SPI_Busconfig==SPI_BUS_CONFIG_HD)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d104      	bne.n	8000516 <SPI_Init+0x4a>
	{
		//enable bidi mode
		tempreg |= (1<<SPI_CR1_BIDIMODE);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e00b      	b.n	800052e <SPI_Init+0x62>

	}
	else if(SPIHandle->SPI_Config.SPI_Busconfig==SPI_BUS_CONFIG__SIMPLEX_RXONLY)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d107      	bne.n	800052e <SPI_Init+0x62>
	{
		//clear bidimode + rx only
		tempreg &= ~(1<<SPI_CR1_BIDIMODE);
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000524:	60fb      	str	r3, [r7, #12]
		tempreg |= (1<<SPI_CR1_RXONLY);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052c:	60fb      	str	r3, [r7, #12]
	}
	//3. SPI serial clock speed
	tempreg |= SPIHandle->SPI_Config.SPI_Speed <<SPI_CR1_BR;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7a9b      	ldrb	r3, [r3, #10]
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	461a      	mov	r2, r3
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4313      	orrs	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
	//4. DFF
	tempreg |= SPIHandle->SPI_Config.SPI_DFF <<SPI_CR1_DFF;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	799b      	ldrb	r3, [r3, #6]
 8000540:	02db      	lsls	r3, r3, #11
 8000542:	461a      	mov	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4313      	orrs	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
	//5. CPOL
	tempreg |= SPIHandle->SPI_Config.SPI_CPOL <<SPI_CR1_CPOL;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7a1b      	ldrb	r3, [r3, #8]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4313      	orrs	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
	//6. CPHA
	tempreg |= SPIHandle->SPI_Config.SPI_CPHA <<SPI_CR1_CPHA;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	79db      	ldrb	r3, [r3, #7]
 800055c:	461a      	mov	r2, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4313      	orrs	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
	//7. SSM
	tempreg |= SPIHandle->SPI_Config.SPI_SSM <<SPI_CR1_SSM;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7a5b      	ldrb	r3, [r3, #9]
 8000568:	025b      	lsls	r3, r3, #9
 800056a:	461a      	mov	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4313      	orrs	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]

	//write value in tempreg to the CR1 register
	SPIHandle->pSPIx->CR1 = tempreg;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <SPI_PeripheralControl>:
* Parameter2:	Enable or disable value
* ReturnVal:	none
* Notes:		none
*/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d106      	bne.n	80005a2 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 80005a0:	e005      	b.n	80005ae <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <SPI_SSIConfig>:

//enable/disable the SSI bit to connect NSS bit to internal voltage source.
//not enabling SSI bit can lead to MODF error
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	460b      	mov	r3, r1
 80005c4:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d106      	bne.n	80005da <SPI_SSIConfig+0x20>
		{
			pSPIx->CR1 |= (1<<SPI_CR1_SSI);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
		}
}
 80005d8:	e005      	b.n	80005e6 <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &= ~(1<<SPI_CR1_SSI);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <SPI_SSOEConfig>:

//enable disable SSOE bit for controlling nss pin
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]
	if (EnorDi==ENABLE)
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d106      	bne.n	8000612 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f043 0204 	orr.w	r2, r3, #4
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	605a      	str	r2, [r3, #4]
	else
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}

}
 8000610:	e005      	b.n	800061e <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f023 0204 	bic.w	r2, r3, #4
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	605a      	str	r2, [r3, #4]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <SPI_GetFlagStatus>:


/*******************Blocking Data controls************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t Flagname)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & Flagname)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	4013      	ands	r3, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SPI_GetFlagStatus+0x1a>
	{
		return 1;
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <SPI_GetFlagStatus+0x1c>
	}
	return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <SPI_SendData>:

/* SPI send data (blocking) */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b084      	sub	sp, #16
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
	while(len>0)
 800065e:	e027      	b.n	80006b0 <SPI_SendData+0x5e>
	{


		//wait until TX buffer is empty (TXEis empty via status register)
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)==0);
 8000660:	bf00      	nop
 8000662:	2102      	movs	r1, #2
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff ffe0 	bl	800062a <SPI_GetFlagStatus>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f8      	beq.n	8000662 <SPI_SendData+0x10>

		if(pSPIx->CR1 & (1<< SPI_CR1_DFF ))
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00e      	beq.n	800069a <SPI_SendData+0x48>
		{
			// 16 bit dff type cast into 16 bit pointer then dereference
			// I definitely would like to use a less confusing implementation
			//load DR with 2 bytes of data to send and increment the buffer address
			// to point to the next group of data to send
			pSPIx->DR= *((uint16_t  *)pTxBuffer) ;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	60da      	str	r2, [r3, #12]
			len--;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3b01      	subs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
			len--;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
			(uint16_t  *)pTxBuffer++;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	3301      	adds	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	e00a      	b.n	80006b0 <SPI_SendData+0x5e>
		else
		{
			// 8 bit dff
			//load DR with 1 byte of data to be sent
			//and increment the buffer address for next byte of data
			pSPIx->DR= *pTxBuffer ;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	60da      	str	r2, [r3, #12]
			len--;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
	while(len>0)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1d4      	bne.n	8000660 <SPI_SendData+0xe>

	}



}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <GPIO_PeriClockControl>:
* ReturnVal:	none
* Notes:		none
*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d157      	bne.n	8000782 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a59      	ldr	r2, [pc, #356]	; (800083c <GPIO_PeriClockControl+0x17c>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PERICLK_EN();
 80006da:	4b59      	ldr	r3, [pc, #356]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a58      	ldr	r2, [pc, #352]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PERICLK_DI();
		}

	}
}
 80006e6:	e0a3      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a56      	ldr	r2, [pc, #344]	; (8000844 <GPIO_PeriClockControl+0x184>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PERICLK_EN();
 80006f0:	4b53      	ldr	r3, [pc, #332]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	4a52      	ldr	r2, [pc, #328]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80006f6:	f043 0302 	orr.w	r3, r3, #2
 80006fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006fc:	e098      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <GPIO_PeriClockControl+0x188>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <GPIO_PeriClockControl+0x54>
			GPIOC_PERICLK_EN();
 8000706:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a4d      	ldr	r2, [pc, #308]	; (8000840 <GPIO_PeriClockControl+0x180>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000712:	e08d      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a4d      	ldr	r2, [pc, #308]	; (800084c <GPIO_PeriClockControl+0x18c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <GPIO_PeriClockControl+0x6a>
			GPIOD_PERICLK_EN();
 800071c:	4b48      	ldr	r3, [pc, #288]	; (8000840 <GPIO_PeriClockControl+0x180>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	4a47      	ldr	r2, [pc, #284]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000728:	e082      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a48      	ldr	r2, [pc, #288]	; (8000850 <GPIO_PeriClockControl+0x190>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <GPIO_PeriClockControl+0x80>
			GPIOE_PERICLK_EN();
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a42      	ldr	r2, [pc, #264]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073e:	e077      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a44      	ldr	r2, [pc, #272]	; (8000854 <GPIO_PeriClockControl+0x194>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <GPIO_PeriClockControl+0x96>
			GPIOF_PERICLK_EN();
 8000748:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <GPIO_PeriClockControl+0x180>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4a3c      	ldr	r2, [pc, #240]	; (8000840 <GPIO_PeriClockControl+0x180>)
 800074e:	f043 0320 	orr.w	r3, r3, #32
 8000752:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000754:	e06c      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a3f      	ldr	r2, [pc, #252]	; (8000858 <GPIO_PeriClockControl+0x198>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <GPIO_PeriClockControl+0xac>
			GPIOG_PERICLK_EN();
 800075e:	4b38      	ldr	r3, [pc, #224]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a37      	ldr	r2, [pc, #220]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076a:	e061      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a3b      	ldr	r2, [pc, #236]	; (800085c <GPIO_PeriClockControl+0x19c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d15d      	bne.n	8000830 <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_EN();
 8000774:	4b32      	ldr	r3, [pc, #200]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	4a31      	ldr	r2, [pc, #196]	; (8000840 <GPIO_PeriClockControl+0x180>)
 800077a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000780:	e056      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <GPIO_PeriClockControl+0x17c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PeriClockControl+0xd8>
			GPIOA_PERICLK_DI();
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <GPIO_PeriClockControl+0x180>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000790:	f023 0301 	bic.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000796:	e04b      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a2a      	ldr	r2, [pc, #168]	; (8000844 <GPIO_PeriClockControl+0x184>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockControl+0xee>
			GPIOB_PERICLK_DI();
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a26      	ldr	r2, [pc, #152]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007a6:	f023 0302 	bic.w	r3, r3, #2
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ac:	e040      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a25      	ldr	r2, [pc, #148]	; (8000848 <GPIO_PeriClockControl+0x188>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockControl+0x104>
			GPIOC_PERICLK_DI();
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a21      	ldr	r2, [pc, #132]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007bc:	f023 0304 	bic.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c2:	e035      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a21      	ldr	r2, [pc, #132]	; (800084c <GPIO_PeriClockControl+0x18c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockControl+0x11a>
			GPIOD_PERICLK_DI();
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007d2:	f023 0308 	bic.w	r3, r3, #8
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d8:	e02a      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <GPIO_PeriClockControl+0x190>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <GPIO_PeriClockControl+0x130>
			GPIOE_PERICLK_DI();
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007e8:	f023 0310 	bic.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ee:	e01f      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <GPIO_PeriClockControl+0x194>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <GPIO_PeriClockControl+0x146>
			GPIOF_PERICLK_DI();
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <GPIO_PeriClockControl+0x180>)
 80007fe:	f023 0320 	bic.w	r3, r3, #32
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000804:	e014      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <GPIO_PeriClockControl+0x198>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PeriClockControl+0x15c>
			GPIOG_PERICLK_DI();
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081a:	e009      	b.n	8000830 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <GPIO_PeriClockControl+0x19c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d105      	bne.n	8000830 <GPIO_PeriClockControl+0x170>
			GPIOH_PERICLK_DI();
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <GPIO_PeriClockControl+0x180>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <GPIO_PeriClockControl+0x180>)
 800082a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40020000 	.word	0x40020000
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400
 8000848:	40020800 	.word	0x40020800
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40021000 	.word	0x40021000
 8000854:	40021400 	.word	0x40021400
 8000858:	40021800 	.word	0x40021800
 800085c:	40021c00 	.word	0x40021c00

08000860 <GPIO_Init>:
* Parameter1:	Handle of GPIO port
* ReturnVal:	none
* Notes:		none
*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{	uint32_t temp=0;
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]

	//enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2101      	movs	r1, #1
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff24 	bl	80006c0 <GPIO_PeriClockControl>

	//see if its not an interrupt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	795b      	ldrb	r3, [r3, #5]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d820      	bhi.n	80008c2 <GPIO_Init+0x62>
	{
		//configure pin mode
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	795b      	ldrb	r3, [r3, #5]
 8000884:	461a      	mov	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear bit fields before setting
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	2103      	movs	r1, #3
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	4619      	mov	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	400a      	ands	r2, r1
 80008ae:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp; //set bits
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	430a      	orrs	r2, r1
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	e0c6      	b.n	8000a50 <GPIO_Init+0x1f0>

	}
	//else configure for  interrupt mode
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d117      	bne.n	80008fa <GPIO_Init+0x9a>
		{
			//1. configure Falling trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ca:	4b48      	ldr	r3, [pc, #288]	; (80009ec <GPIO_Init+0x18c>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	7912      	ldrb	r2, [r2, #4]
 80008d2:	4611      	mov	r1, r2
 80008d4:	2201      	movs	r2, #1
 80008d6:	408a      	lsls	r2, r1
 80008d8:	4611      	mov	r1, r2
 80008da:	4a44      	ldr	r2, [pc, #272]	; (80009ec <GPIO_Init+0x18c>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	60d3      	str	r3, [r2, #12]
			//Clear corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e0:	4b42      	ldr	r3, [pc, #264]	; (80009ec <GPIO_Init+0x18c>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	7912      	ldrb	r2, [r2, #4]
 80008e8:	4611      	mov	r1, r2
 80008ea:	2201      	movs	r2, #1
 80008ec:	408a      	lsls	r2, r1
 80008ee:	43d2      	mvns	r2, r2
 80008f0:	4611      	mov	r1, r2
 80008f2:	4a3e      	ldr	r2, [pc, #248]	; (80009ec <GPIO_Init+0x18c>)
 80008f4:	400b      	ands	r3, r1
 80008f6:	6093      	str	r3, [r2, #8]
 80008f8:	e035      	b.n	8000966 <GPIO_Init+0x106>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	2b05      	cmp	r3, #5
 8000900:	d117      	bne.n	8000932 <GPIO_Init+0xd2>
		{
			//1. configure Rising trigger selection register
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000902:	4b3a      	ldr	r3, [pc, #232]	; (80009ec <GPIO_Init+0x18c>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	7912      	ldrb	r2, [r2, #4]
 800090a:	4611      	mov	r1, r2
 800090c:	2201      	movs	r2, #1
 800090e:	408a      	lsls	r2, r1
 8000910:	4611      	mov	r1, r2
 8000912:	4a36      	ldr	r2, [pc, #216]	; (80009ec <GPIO_Init+0x18c>)
 8000914:	430b      	orrs	r3, r1
 8000916:	6093      	str	r3, [r2, #8]
			//Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000918:	4b34      	ldr	r3, [pc, #208]	; (80009ec <GPIO_Init+0x18c>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	7912      	ldrb	r2, [r2, #4]
 8000920:	4611      	mov	r1, r2
 8000922:	2201      	movs	r2, #1
 8000924:	408a      	lsls	r2, r1
 8000926:	43d2      	mvns	r2, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a30      	ldr	r2, [pc, #192]	; (80009ec <GPIO_Init+0x18c>)
 800092c:	400b      	ands	r3, r1
 800092e:	60d3      	str	r3, [r2, #12]
 8000930:	e019      	b.n	8000966 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	2b06      	cmp	r3, #6
 8000938:	d115      	bne.n	8000966 <GPIO_Init+0x106>
		{
			//1. configure Falling and Rising trigger selection register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <GPIO_Init+0x18c>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	7912      	ldrb	r2, [r2, #4]
 8000942:	4611      	mov	r1, r2
 8000944:	2201      	movs	r2, #1
 8000946:	408a      	lsls	r2, r1
 8000948:	4611      	mov	r1, r2
 800094a:	4a28      	ldr	r2, [pc, #160]	; (80009ec <GPIO_Init+0x18c>)
 800094c:	430b      	orrs	r3, r1
 800094e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <GPIO_Init+0x18c>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	7912      	ldrb	r2, [r2, #4]
 8000958:	4611      	mov	r1, r2
 800095a:	2201      	movs	r2, #1
 800095c:	408a      	lsls	r2, r1
 800095e:	4611      	mov	r1, r2
 8000960:	4a22      	ldr	r2, [pc, #136]	; (80009ec <GPIO_Init+0x18c>)
 8000962:	430b      	orrs	r3, r1
 8000964:	6093      	str	r3, [r2, #8]
		}
		//2. configure GPIO port selection in SYSCFG_EXTIC
		uint8_t temp1 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to get which exti control register
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 =pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4; //to determine section within control register determined above
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	791b      	ldrb	r3, [r3, #4]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	73bb      	strb	r3, [r7, #14]
		uint8_t portcode = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	75fb      	strb	r3, [r7, #23]

		if(pGPIOHandle->pGPIOx == GPIOA){portcode=0;}
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <GPIO_Init+0x190>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d102      	bne.n	800098c <GPIO_Init+0x12c>
 8000986:	2300      	movs	r3, #0
 8000988:	75fb      	strb	r3, [r7, #23]
 800098a:	e046      	b.n	8000a1a <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOB){portcode=1;}
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <GPIO_Init+0x194>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d102      	bne.n	800099c <GPIO_Init+0x13c>
 8000996:	2301      	movs	r3, #1
 8000998:	75fb      	strb	r3, [r7, #23]
 800099a:	e03e      	b.n	8000a1a <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOC){portcode=2;}
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <GPIO_Init+0x198>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d102      	bne.n	80009ac <GPIO_Init+0x14c>
 80009a6:	2302      	movs	r3, #2
 80009a8:	75fb      	strb	r3, [r7, #23]
 80009aa:	e036      	b.n	8000a1a <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOD){portcode=3;}
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a12      	ldr	r2, [pc, #72]	; (80009fc <GPIO_Init+0x19c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d102      	bne.n	80009bc <GPIO_Init+0x15c>
 80009b6:	2303      	movs	r3, #3
 80009b8:	75fb      	strb	r3, [r7, #23]
 80009ba:	e02e      	b.n	8000a1a <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOE){portcode=4;}
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <GPIO_Init+0x1a0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d102      	bne.n	80009cc <GPIO_Init+0x16c>
 80009c6:	2304      	movs	r3, #4
 80009c8:	75fb      	strb	r3, [r7, #23]
 80009ca:	e026      	b.n	8000a1a <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOF){portcode=5;}
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <GPIO_Init+0x1a4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d102      	bne.n	80009dc <GPIO_Init+0x17c>
 80009d6:	2305      	movs	r3, #5
 80009d8:	75fb      	strb	r3, [r7, #23]
 80009da:	e01e      	b.n	8000a1a <GPIO_Init+0x1ba>
		else if(pGPIOHandle->pGPIOx == GPIOG){portcode=6;}
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <GPIO_Init+0x1a8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d112      	bne.n	8000a0c <GPIO_Init+0x1ac>
 80009e6:	2306      	movs	r3, #6
 80009e8:	75fb      	strb	r3, [r7, #23]
 80009ea:	e016      	b.n	8000a1a <GPIO_Init+0x1ba>
 80009ec:	40013c00 	.word	0x40013c00
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40021400 	.word	0x40021400
 8000a08:	40021800 	.word	0x40021800
		else if(pGPIOHandle->pGPIOx == GPIOH){portcode=7;}
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a5f      	ldr	r2, [pc, #380]	; (8000b90 <GPIO_Init+0x330>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <GPIO_Init+0x1ba>
 8000a16:	2307      	movs	r3, #7
 8000a18:	75fb      	strb	r3, [r7, #23]

		SYSCFG_PERICLK_EN();
 8000a1a:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <GPIO_Init+0x334>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a5d      	ldr	r2, [pc, #372]	; (8000b94 <GPIO_Init+0x334>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000a26:	7dfa      	ldrb	r2, [r7, #23]
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	fa02 f103 	lsl.w	r1, r2, r3
 8000a30:	4a59      	ldr	r2, [pc, #356]	; (8000b98 <GPIO_Init+0x338>)
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	3302      	adds	r3, #2
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. enable EXTI interrupt delivery via IMR
		EXTI->IMR |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a3a:	4b58      	ldr	r3, [pc, #352]	; (8000b9c <GPIO_Init+0x33c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	7912      	ldrb	r2, [r2, #4]
 8000a42:	4611      	mov	r1, r2
 8000a44:	2201      	movs	r2, #1
 8000a46:	408a      	lsls	r2, r1
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4a54      	ldr	r2, [pc, #336]	; (8000b9c <GPIO_Init+0x33c>)
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	6013      	str	r3, [r2, #0]
	}
	//configure speed
	temp=0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	799b      	ldrb	r3, [r3, #6]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2103      	movs	r1, #3
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	400a      	ands	r2, r1
 8000a82:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6899      	ldr	r1, [r3, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	609a      	str	r2, [r3, #8]
	//configure pullup/pulldown
	temp=0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	79db      	ldrb	r3, [r3, #7]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	791b      	ldrb	r3, [r3, #4]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	791b      	ldrb	r3, [r3, #4]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68d9      	ldr	r1, [r3, #12]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	60da      	str	r2, [r3, #12]
	//configure output type
	temp=0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7a1b      	ldrb	r3, [r3, #8]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2301      	movs	r3, #1
 8000afa:	408b      	lsls	r3, r1
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4619      	mov	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	400a      	ands	r2, r1
 8000b06:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	605a      	str	r2, [r3, #4]

	temp=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]

	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	795b      	ldrb	r3, [r3, #5]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d131      	bne.n	8000b88 <GPIO_Init+0x328>
	{
		//Need to revisit this to understand
		uint8_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	737b      	strb	r3, [r7, #13]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	733b      	strb	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[temp1]&= ~(0xF<<(4*temp2));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	7b7a      	ldrb	r2, [r7, #13]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b42:	7b3b      	ldrb	r3, [r7, #12]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	7b7a      	ldrb	r2, [r7, #13]
 8000b56:	4001      	ands	r1, r0
 8000b58:	3208      	adds	r2, #8
 8000b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode<<(4*temp2));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	7b7a      	ldrb	r2, [r7, #13]
 8000b64:	3208      	adds	r2, #8
 8000b66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	7a5b      	ldrb	r3, [r3, #9]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	7b7a      	ldrb	r2, [r7, #13]
 8000b80:	4301      	orrs	r1, r0
 8000b82:	3208      	adds	r2, #8
 8000b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}




}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021c00 	.word	0x40021c00
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40013800 	.word	0x40013800
 8000b9c:	40013c00 	.word	0x40013c00

08000ba0 <GPIO_ReadFromInputPin>:
* Parameter2:	GPIO pin in range of 0 to 16
* ReturnVal:	0 or 1
* Notes:		none
*/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
	return value;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <__libc_init_array>:
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	4e0d      	ldr	r6, [pc, #52]	; (8000c04 <__libc_init_array+0x38>)
 8000bd0:	4c0d      	ldr	r4, [pc, #52]	; (8000c08 <__libc_init_array+0x3c>)
 8000bd2:	1ba4      	subs	r4, r4, r6
 8000bd4:	10a4      	asrs	r4, r4, #2
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	d109      	bne.n	8000bf0 <__libc_init_array+0x24>
 8000bdc:	4e0b      	ldr	r6, [pc, #44]	; (8000c0c <__libc_init_array+0x40>)
 8000bde:	4c0c      	ldr	r4, [pc, #48]	; (8000c10 <__libc_init_array+0x44>)
 8000be0:	f000 f818 	bl	8000c14 <_init>
 8000be4:	1ba4      	subs	r4, r4, r6
 8000be6:	10a4      	asrs	r4, r4, #2
 8000be8:	2500      	movs	r5, #0
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d105      	bne.n	8000bfa <__libc_init_array+0x2e>
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf4:	4798      	blx	r3
 8000bf6:	3501      	adds	r5, #1
 8000bf8:	e7ee      	b.n	8000bd8 <__libc_init_array+0xc>
 8000bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bfe:	4798      	blx	r3
 8000c00:	3501      	adds	r5, #1
 8000c02:	e7f2      	b.n	8000bea <__libc_init_array+0x1e>
 8000c04:	08000c38 	.word	0x08000c38
 8000c08:	08000c38 	.word	0x08000c38
 8000c0c:	08000c38 	.word	0x08000c38
 8000c10:	08000c3c 	.word	0x08000c3c

08000c14 <_init>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	bf00      	nop
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr

08000c20 <_fini>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr
